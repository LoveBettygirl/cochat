// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendService.proto

#include "FriendService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_FriendService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendInfo_FriendService_2eproto;
class UserInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfoRequest> _instance;
} _UserInfoRequest_default_instance_;
class UserInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfoResponse> _instance;
} _UserInfoResponse_default_instance_;
class FriendInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendInfo> _instance;
} _FriendInfo_default_instance_;
class FriendListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendListRequest> _instance;
} _FriendListRequest_default_instance_;
class FriendListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendListResponse> _instance;
} _FriendListResponse_default_instance_;
class AddFriendRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFriendRequest> _instance;
} _AddFriendRequest_default_instance_;
class AddFriendResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFriendResponse> _instance;
} _AddFriendResponse_default_instance_;
class DeleteFriendRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteFriendRequest> _instance;
} _DeleteFriendRequest_default_instance_;
class DeleteFriendResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteFriendResponse> _instance;
} _DeleteFriendResponse_default_instance_;
static void InitDefaultsscc_info_AddFriendRequest_FriendService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AddFriendRequest_default_instance_;
    new (ptr) ::AddFriendRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AddFriendRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddFriendRequest_FriendService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddFriendRequest_FriendService_2eproto}, {}};

static void InitDefaultsscc_info_AddFriendResponse_FriendService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AddFriendResponse_default_instance_;
    new (ptr) ::AddFriendResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AddFriendResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddFriendResponse_FriendService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddFriendResponse_FriendService_2eproto}, {}};

static void InitDefaultsscc_info_DeleteFriendRequest_FriendService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeleteFriendRequest_default_instance_;
    new (ptr) ::DeleteFriendRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeleteFriendRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteFriendRequest_FriendService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteFriendRequest_FriendService_2eproto}, {}};

static void InitDefaultsscc_info_DeleteFriendResponse_FriendService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeleteFriendResponse_default_instance_;
    new (ptr) ::DeleteFriendResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeleteFriendResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteFriendResponse_FriendService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteFriendResponse_FriendService_2eproto}, {}};

static void InitDefaultsscc_info_FriendInfo_FriendService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FriendInfo_default_instance_;
    new (ptr) ::FriendInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FriendInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendInfo_FriendService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FriendInfo_FriendService_2eproto}, {}};

static void InitDefaultsscc_info_FriendListRequest_FriendService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FriendListRequest_default_instance_;
    new (ptr) ::FriendListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FriendListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendListRequest_FriendService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FriendListRequest_FriendService_2eproto}, {}};

static void InitDefaultsscc_info_FriendListResponse_FriendService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FriendListResponse_default_instance_;
    new (ptr) ::FriendListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FriendListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FriendListResponse_FriendService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FriendListResponse_FriendService_2eproto}, {
      &scc_info_FriendInfo_FriendService_2eproto.base,}};

static void InitDefaultsscc_info_UserInfoRequest_FriendService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserInfoRequest_default_instance_;
    new (ptr) ::UserInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfoRequest_FriendService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfoRequest_FriendService_2eproto}, {}};

static void InitDefaultsscc_info_UserInfoResponse_FriendService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserInfoResponse_default_instance_;
    new (ptr) ::UserInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfoResponse_FriendService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfoResponse_FriendService_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_FriendService_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_FriendService_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_FriendService_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_FriendService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserInfoRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserInfoResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::UserInfoResponse, res_info_),
  PROTOBUF_FIELD_OFFSET(::UserInfoResponse, id_),
  PROTOBUF_FIELD_OFFSET(::UserInfoResponse, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FriendInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FriendInfo, id_),
  PROTOBUF_FIELD_OFFSET(::FriendInfo, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FriendListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FriendListRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FriendListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FriendListResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::FriendListResponse, res_info_),
  PROTOBUF_FIELD_OFFSET(::FriendListResponse, friends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AddFriendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AddFriendRequest, my_id_),
  PROTOBUF_FIELD_OFFSET(::AddFriendRequest, friend_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AddFriendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AddFriendResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::AddFriendResponse, res_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeleteFriendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeleteFriendRequest, my_id_),
  PROTOBUF_FIELD_OFFSET(::DeleteFriendRequest, friend_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeleteFriendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeleteFriendResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::DeleteFriendResponse, res_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::UserInfoRequest)},
  { 6, -1, sizeof(::UserInfoResponse)},
  { 15, -1, sizeof(::FriendInfo)},
  { 22, -1, sizeof(::FriendListRequest)},
  { 28, -1, sizeof(::FriendListResponse)},
  { 36, -1, sizeof(::AddFriendRequest)},
  { 43, -1, sizeof(::AddFriendResponse)},
  { 50, -1, sizeof(::DeleteFriendRequest)},
  { 57, -1, sizeof(::DeleteFriendResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FriendInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FriendListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FriendListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AddFriendRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AddFriendResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeleteFriendRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeleteFriendResponse_default_instance_),
};

const char descriptor_table_protodef_FriendService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023FriendService.proto\"\035\n\017UserInfoRequest"
  "\022\n\n\002id\030\001 \001(\005\"P\n\020UserInfoResponse\022\020\n\010ret_"
  "code\030\001 \001(\005\022\020\n\010res_info\030\002 \001(\t\022\n\n\002id\030\003 \001(\005"
  "\022\014\n\004name\030\004 \001(\014\"&\n\nFriendInfo\022\n\n\002id\030\001 \001(\005"
  "\022\014\n\004name\030\002 \001(\014\"\037\n\021FriendListRequest\022\n\n\002i"
  "d\030\001 \001(\005\"V\n\022FriendListResponse\022\020\n\010ret_cod"
  "e\030\001 \001(\005\022\020\n\010res_info\030\002 \001(\t\022\034\n\007friends\030\003 \003"
  "(\0132\013.FriendInfo\"4\n\020AddFriendRequest\022\r\n\005m"
  "y_id\030\001 \001(\005\022\021\n\tfriend_id\030\002 \001(\005\"7\n\021AddFrie"
  "ndResponse\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010res_info"
  "\030\002 \001(\t\"7\n\023DeleteFriendRequest\022\r\n\005my_id\030\001"
  " \001(\005\022\021\n\tfriend_id\030\002 \001(\005\":\n\024DeleteFriendR"
  "esponse\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010res_info\030\002 "
  "\001(\t2\361\001\n\020FriendServiceRpc\0228\n\rGetFriendLis"
  "t\022\022.FriendListRequest\032\023.FriendListRespon"
  "se\0222\n\013GetUserInfo\022\020.UserInfoRequest\032\021.Us"
  "erInfoResponse\0222\n\tAddFriend\022\021.AddFriendR"
  "equest\032\022.AddFriendResponse\022;\n\014DeleteFrie"
  "nd\022\024.DeleteFriendRequest\032\025.DeleteFriendR"
  "esponseB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_FriendService_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_FriendService_2eproto_sccs[9] = {
  &scc_info_AddFriendRequest_FriendService_2eproto.base,
  &scc_info_AddFriendResponse_FriendService_2eproto.base,
  &scc_info_DeleteFriendRequest_FriendService_2eproto.base,
  &scc_info_DeleteFriendResponse_FriendService_2eproto.base,
  &scc_info_FriendInfo_FriendService_2eproto.base,
  &scc_info_FriendListRequest_FriendService_2eproto.base,
  &scc_info_FriendListResponse_FriendService_2eproto.base,
  &scc_info_UserInfoRequest_FriendService_2eproto.base,
  &scc_info_UserInfoResponse_FriendService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FriendService_2eproto_once;
static bool descriptor_table_FriendService_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FriendService_2eproto = {
  &descriptor_table_FriendService_2eproto_initialized, descriptor_table_protodef_FriendService_2eproto, "FriendService.proto", 780,
  &descriptor_table_FriendService_2eproto_once, descriptor_table_FriendService_2eproto_sccs, descriptor_table_FriendService_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_FriendService_2eproto::offsets,
  file_level_metadata_FriendService_2eproto, 9, file_level_enum_descriptors_FriendService_2eproto, file_level_service_descriptors_FriendService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_FriendService_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_FriendService_2eproto), true);

// ===================================================================

void UserInfoRequest::InitAsDefaultInstance() {
}
class UserInfoRequest::_Internal {
 public:
};

UserInfoRequest::UserInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserInfoRequest)
}
UserInfoRequest::UserInfoRequest(const UserInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:UserInfoRequest)
}

void UserInfoRequest::SharedCtor() {
  id_ = 0;
}

UserInfoRequest::~UserInfoRequest() {
  // @@protoc_insertion_point(destructor:UserInfoRequest)
  SharedDtor();
}

void UserInfoRequest::SharedDtor() {
}

void UserInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfoRequest& UserInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfoRequest_FriendService_2eproto.base);
  return *internal_default_instance();
}


void UserInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UserInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

const char* UserInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserInfoRequest)
  return target;
}

size_t UserInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserInfoRequest)
    MergeFrom(*source);
  }
}

void UserInfoRequest::MergeFrom(const UserInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UserInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoRequest::CopyFrom(const UserInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoRequest::IsInitialized() const {
  return true;
}

void UserInfoRequest::InternalSwap(UserInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInfoResponse::InitAsDefaultInstance() {
}
class UserInfoResponse::_Internal {
 public:
};

UserInfoResponse::UserInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserInfoResponse)
}
UserInfoResponse::UserInfoResponse(const UserInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:UserInfoResponse)
}

void UserInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInfoResponse_FriendService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(id_));
}

UserInfoResponse::~UserInfoResponse() {
  // @@protoc_insertion_point(destructor:UserInfoResponse)
  SharedDtor();
}

void UserInfoResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfoResponse& UserInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfoResponse_FriendService_2eproto.base);
  return *internal_default_instance();
}


void UserInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UserInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

const char* UserInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserInfoResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserInfoResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserInfoResponse)
  return target;
}

size_t UserInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  // int32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserInfoResponse)
    MergeFrom(*source);
  }
}

void UserInfoResponse::MergeFrom(const UserInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UserInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoResponse::CopyFrom(const UserInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoResponse::IsInitialized() const {
  return true;
}

void UserInfoResponse::InternalSwap(UserInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendInfo::InitAsDefaultInstance() {
}
class FriendInfo::_Internal {
 public:
};

FriendInfo::FriendInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendInfo)
}
FriendInfo::FriendInfo(const FriendInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:FriendInfo)
}

void FriendInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FriendInfo_FriendService_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

FriendInfo::~FriendInfo() {
  // @@protoc_insertion_point(destructor:FriendInfo)
  SharedDtor();
}

void FriendInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FriendInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendInfo& FriendInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendInfo_FriendService_2eproto.base);
  return *internal_default_instance();
}


void FriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

const char* FriendInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FriendInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendInfo)
  return target;
}

size_t FriendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendInfo)
    MergeFrom(*source);
  }
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void FriendInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {
  return true;
}

void FriendInfo::InternalSwap(FriendInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendListRequest::InitAsDefaultInstance() {
}
class FriendListRequest::_Internal {
 public:
};

FriendListRequest::FriendListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendListRequest)
}
FriendListRequest::FriendListRequest(const FriendListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:FriendListRequest)
}

void FriendListRequest::SharedCtor() {
  id_ = 0;
}

FriendListRequest::~FriendListRequest() {
  // @@protoc_insertion_point(destructor:FriendListRequest)
  SharedDtor();
}

void FriendListRequest::SharedDtor() {
}

void FriendListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendListRequest& FriendListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendListRequest_FriendService_2eproto.base);
  return *internal_default_instance();
}


void FriendListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

const char* FriendListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FriendListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendListRequest)
  return target;
}

size_t FriendListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendListRequest)
    MergeFrom(*source);
  }
}

void FriendListRequest::MergeFrom(const FriendListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void FriendListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListRequest::CopyFrom(const FriendListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListRequest::IsInitialized() const {
  return true;
}

void FriendListRequest::InternalSwap(FriendListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendListResponse::InitAsDefaultInstance() {
}
class FriendListResponse::_Internal {
 public:
};

FriendListResponse::FriendListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendListResponse)
}
FriendListResponse::FriendListResponse(const FriendListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:FriendListResponse)
}

void FriendListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FriendListResponse_FriendService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

FriendListResponse::~FriendListResponse() {
  // @@protoc_insertion_point(destructor:FriendListResponse)
  SharedDtor();
}

void FriendListResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FriendListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendListResponse& FriendListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendListResponse_FriendService_2eproto.base);
  return *internal_default_instance();
}


void FriendListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* FriendListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FriendListResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .FriendInfo friends = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FriendListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FriendListResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  // repeated .FriendInfo friends = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_friends(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendListResponse)
  return target;
}

size_t FriendListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FriendInfo friends = 3;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendListResponse)
    MergeFrom(*source);
  }
}

void FriendListResponse::MergeFrom(const FriendListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void FriendListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListResponse::CopyFrom(const FriendListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListResponse::IsInitialized() const {
  return true;
}

void FriendListResponse::InternalSwap(FriendListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  friends_.InternalSwap(&other->friends_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddFriendRequest::InitAsDefaultInstance() {
}
class AddFriendRequest::_Internal {
 public:
};

AddFriendRequest::AddFriendRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddFriendRequest)
}
AddFriendRequest::AddFriendRequest(const AddFriendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&my_id_, &from.my_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&friend_id_) -
    reinterpret_cast<char*>(&my_id_)) + sizeof(friend_id_));
  // @@protoc_insertion_point(copy_constructor:AddFriendRequest)
}

void AddFriendRequest::SharedCtor() {
  ::memset(&my_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friend_id_) -
      reinterpret_cast<char*>(&my_id_)) + sizeof(friend_id_));
}

AddFriendRequest::~AddFriendRequest() {
  // @@protoc_insertion_point(destructor:AddFriendRequest)
  SharedDtor();
}

void AddFriendRequest::SharedDtor() {
}

void AddFriendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFriendRequest& AddFriendRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFriendRequest_FriendService_2eproto.base);
  return *internal_default_instance();
}


void AddFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AddFriendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&my_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friend_id_) -
      reinterpret_cast<char*>(&my_id_)) + sizeof(friend_id_));
  _internal_metadata_.Clear();
}

const char* AddFriendRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 my_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          my_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 friend_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          friend_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFriendRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddFriendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 my_id = 1;
  if (this->my_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_my_id(), target);
  }

  // int32 friend_id = 2;
  if (this->friend_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_friend_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddFriendRequest)
  return target;
}

size_t AddFriendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddFriendRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 my_id = 1;
  if (this->my_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_my_id());
  }

  // int32 friend_id = 2;
  if (this->friend_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_friend_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriendRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriendRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFriendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddFriendRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddFriendRequest)
    MergeFrom(*source);
  }
}

void AddFriendRequest::MergeFrom(const AddFriendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.my_id() != 0) {
    _internal_set_my_id(from._internal_my_id());
  }
  if (from.friend_id() != 0) {
    _internal_set_friend_id(from._internal_friend_id());
  }
}

void AddFriendRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendRequest::CopyFrom(const AddFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendRequest::IsInitialized() const {
  return true;
}

void AddFriendRequest::InternalSwap(AddFriendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(my_id_, other->my_id_);
  swap(friend_id_, other->friend_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriendRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddFriendResponse::InitAsDefaultInstance() {
}
class AddFriendResponse::_Internal {
 public:
};

AddFriendResponse::AddFriendResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddFriendResponse)
}
AddFriendResponse::AddFriendResponse(const AddFriendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:AddFriendResponse)
}

void AddFriendResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddFriendResponse_FriendService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

AddFriendResponse::~AddFriendResponse() {
  // @@protoc_insertion_point(destructor:AddFriendResponse)
  SharedDtor();
}

void AddFriendResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddFriendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFriendResponse& AddFriendResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFriendResponse_FriendService_2eproto.base);
  return *internal_default_instance();
}


void AddFriendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AddFriendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* AddFriendResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AddFriendResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFriendResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddFriendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AddFriendResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddFriendResponse)
  return target;
}

size_t AddFriendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddFriendResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriendResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriendResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFriendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddFriendResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddFriendResponse)
    MergeFrom(*source);
  }
}

void AddFriendResponse::MergeFrom(const AddFriendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void AddFriendResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendResponse::CopyFrom(const AddFriendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendResponse::IsInitialized() const {
  return true;
}

void AddFriendResponse::InternalSwap(AddFriendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriendResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteFriendRequest::InitAsDefaultInstance() {
}
class DeleteFriendRequest::_Internal {
 public:
};

DeleteFriendRequest::DeleteFriendRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeleteFriendRequest)
}
DeleteFriendRequest::DeleteFriendRequest(const DeleteFriendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&my_id_, &from.my_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&friend_id_) -
    reinterpret_cast<char*>(&my_id_)) + sizeof(friend_id_));
  // @@protoc_insertion_point(copy_constructor:DeleteFriendRequest)
}

void DeleteFriendRequest::SharedCtor() {
  ::memset(&my_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friend_id_) -
      reinterpret_cast<char*>(&my_id_)) + sizeof(friend_id_));
}

DeleteFriendRequest::~DeleteFriendRequest() {
  // @@protoc_insertion_point(destructor:DeleteFriendRequest)
  SharedDtor();
}

void DeleteFriendRequest::SharedDtor() {
}

void DeleteFriendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteFriendRequest& DeleteFriendRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteFriendRequest_FriendService_2eproto.base);
  return *internal_default_instance();
}


void DeleteFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteFriendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&my_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friend_id_) -
      reinterpret_cast<char*>(&my_id_)) + sizeof(friend_id_));
  _internal_metadata_.Clear();
}

const char* DeleteFriendRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 my_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          my_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 friend_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          friend_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteFriendRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeleteFriendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 my_id = 1;
  if (this->my_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_my_id(), target);
  }

  // int32 friend_id = 2;
  if (this->friend_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_friend_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteFriendRequest)
  return target;
}

size_t DeleteFriendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteFriendRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 my_id = 1;
  if (this->my_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_my_id());
  }

  // int32 friend_id = 2;
  if (this->friend_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_friend_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteFriendRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeleteFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteFriendRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteFriendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeleteFriendRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeleteFriendRequest)
    MergeFrom(*source);
  }
}

void DeleteFriendRequest::MergeFrom(const DeleteFriendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeleteFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.my_id() != 0) {
    _internal_set_my_id(from._internal_my_id());
  }
  if (from.friend_id() != 0) {
    _internal_set_friend_id(from._internal_friend_id());
  }
}

void DeleteFriendRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeleteFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriendRequest::CopyFrom(const DeleteFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendRequest::IsInitialized() const {
  return true;
}

void DeleteFriendRequest::InternalSwap(DeleteFriendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(my_id_, other->my_id_);
  swap(friend_id_, other->friend_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFriendRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteFriendResponse::InitAsDefaultInstance() {
}
class DeleteFriendResponse::_Internal {
 public:
};

DeleteFriendResponse::DeleteFriendResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeleteFriendResponse)
}
DeleteFriendResponse::DeleteFriendResponse(const DeleteFriendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:DeleteFriendResponse)
}

void DeleteFriendResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteFriendResponse_FriendService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

DeleteFriendResponse::~DeleteFriendResponse() {
  // @@protoc_insertion_point(destructor:DeleteFriendResponse)
  SharedDtor();
}

void DeleteFriendResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteFriendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteFriendResponse& DeleteFriendResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteFriendResponse_FriendService_2eproto.base);
  return *internal_default_instance();
}


void DeleteFriendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteFriendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* DeleteFriendResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DeleteFriendResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteFriendResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeleteFriendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeleteFriendResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteFriendResponse)
  return target;
}

size_t DeleteFriendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteFriendResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteFriendResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeleteFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteFriendResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteFriendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeleteFriendResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeleteFriendResponse)
    MergeFrom(*source);
  }
}

void DeleteFriendResponse::MergeFrom(const DeleteFriendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeleteFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void DeleteFriendResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeleteFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriendResponse::CopyFrom(const DeleteFriendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendResponse::IsInitialized() const {
  return true;
}

void DeleteFriendResponse::InternalSwap(DeleteFriendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFriendResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FriendServiceRpc::~FriendServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FriendServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FriendService_2eproto);
  return file_level_service_descriptors_FriendService_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FriendServiceRpc::GetDescriptor() {
  return descriptor();
}

void FriendServiceRpc::GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::FriendListRequest*,
                         ::FriendListResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriendList() not implemented.");
  done->Run();
}

void FriendServiceRpc::GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::UserInfoRequest*,
                         ::UserInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserInfo() not implemented.");
  done->Run();
}

void FriendServiceRpc::AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::AddFriendRequest*,
                         ::AddFriendResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddFriend() not implemented.");
  done->Run();
}

void FriendServiceRpc::DeleteFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DeleteFriendRequest*,
                         ::DeleteFriendResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteFriend() not implemented.");
  done->Run();
}

void FriendServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_FriendService_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetFriendList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::FriendListRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::FriendListResponse*>(
                 response),
             done);
      break;
    case 1:
      GetUserInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::UserInfoRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::UserInfoResponse*>(
                 response),
             done);
      break;
    case 2:
      AddFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::AddFriendRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::AddFriendResponse*>(
                 response),
             done);
      break;
    case 3:
      DeleteFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DeleteFriendRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DeleteFriendResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FriendServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::FriendListRequest::default_instance();
    case 1:
      return ::UserInfoRequest::default_instance();
    case 2:
      return ::AddFriendRequest::default_instance();
    case 3:
      return ::DeleteFriendRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FriendServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::FriendListResponse::default_instance();
    case 1:
      return ::UserInfoResponse::default_instance();
    case 2:
      return ::AddFriendResponse::default_instance();
    case 3:
      return ::DeleteFriendResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FriendServiceRpc_Stub::FriendServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendServiceRpc_Stub::FriendServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
FriendServiceRpc_Stub::~FriendServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendServiceRpc_Stub::GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::FriendListRequest* request,
                              ::FriendListResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FriendServiceRpc_Stub::GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::UserInfoRequest* request,
                              ::UserInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FriendServiceRpc_Stub::AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::AddFriendRequest* request,
                              ::AddFriendResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FriendServiceRpc_Stub::DeleteFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DeleteFriendRequest* request,
                              ::DeleteFriendResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UserInfoRequest* Arena::CreateMaybeMessage< ::UserInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UserInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UserInfoResponse* Arena::CreateMaybeMessage< ::UserInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::UserInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FriendInfo* Arena::CreateMaybeMessage< ::FriendInfo >(Arena* arena) {
  return Arena::CreateInternal< ::FriendInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::FriendListRequest* Arena::CreateMaybeMessage< ::FriendListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::FriendListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FriendListResponse* Arena::CreateMaybeMessage< ::FriendListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::FriendListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AddFriendRequest* Arena::CreateMaybeMessage< ::AddFriendRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AddFriendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AddFriendResponse* Arena::CreateMaybeMessage< ::AddFriendResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AddFriendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DeleteFriendRequest* Arena::CreateMaybeMessage< ::DeleteFriendRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DeleteFriendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DeleteFriendResponse* Arena::CreateMaybeMessage< ::DeleteFriendResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DeleteFriendResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
