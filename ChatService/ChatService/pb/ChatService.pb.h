// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ChatService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ChatService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ChatService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ChatService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChatService_2eproto;
class GroupChatRequest;
class GroupChatRequestDefaultTypeInternal;
extern GroupChatRequestDefaultTypeInternal _GroupChatRequest_default_instance_;
class GroupChatResponse;
class GroupChatResponseDefaultTypeInternal;
extern GroupChatResponseDefaultTypeInternal _GroupChatResponse_default_instance_;
class OneChatRequest;
class OneChatRequestDefaultTypeInternal;
extern OneChatRequestDefaultTypeInternal _OneChatRequest_default_instance_;
class OneChatResponse;
class OneChatResponseDefaultTypeInternal;
extern OneChatResponseDefaultTypeInternal _OneChatResponse_default_instance_;
class ReadOfflineMessageRequest;
class ReadOfflineMessageRequestDefaultTypeInternal;
extern ReadOfflineMessageRequestDefaultTypeInternal _ReadOfflineMessageRequest_default_instance_;
class ReadOfflineMessageResponse;
class ReadOfflineMessageResponseDefaultTypeInternal;
extern ReadOfflineMessageResponseDefaultTypeInternal _ReadOfflineMessageResponse_default_instance_;
class SaveOfflineMessageRequest;
class SaveOfflineMessageRequestDefaultTypeInternal;
extern SaveOfflineMessageRequestDefaultTypeInternal _SaveOfflineMessageRequest_default_instance_;
class SaveOfflineMessageResponse;
class SaveOfflineMessageResponseDefaultTypeInternal;
extern SaveOfflineMessageResponseDefaultTypeInternal _SaveOfflineMessageResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GroupChatRequest* Arena::CreateMaybeMessage<::GroupChatRequest>(Arena*);
template<> ::GroupChatResponse* Arena::CreateMaybeMessage<::GroupChatResponse>(Arena*);
template<> ::OneChatRequest* Arena::CreateMaybeMessage<::OneChatRequest>(Arena*);
template<> ::OneChatResponse* Arena::CreateMaybeMessage<::OneChatResponse>(Arena*);
template<> ::ReadOfflineMessageRequest* Arena::CreateMaybeMessage<::ReadOfflineMessageRequest>(Arena*);
template<> ::ReadOfflineMessageResponse* Arena::CreateMaybeMessage<::ReadOfflineMessageResponse>(Arena*);
template<> ::SaveOfflineMessageRequest* Arena::CreateMaybeMessage<::SaveOfflineMessageRequest>(Arena*);
template<> ::SaveOfflineMessageResponse* Arena::CreateMaybeMessage<::SaveOfflineMessageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class OneChatRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OneChatRequest) */ {
 public:
  OneChatRequest();
  virtual ~OneChatRequest();

  OneChatRequest(const OneChatRequest& from);
  OneChatRequest(OneChatRequest&& from) noexcept
    : OneChatRequest() {
    *this = ::std::move(from);
  }

  inline OneChatRequest& operator=(const OneChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneChatRequest& operator=(OneChatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OneChatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneChatRequest* internal_default_instance() {
    return reinterpret_cast<const OneChatRequest*>(
               &_OneChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OneChatRequest& a, OneChatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OneChatRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OneChatRequest* New() const final {
    return CreateMaybeMessage<OneChatRequest>(nullptr);
  }

  OneChatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OneChatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OneChatRequest& from);
  void MergeFrom(const OneChatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneChatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OneChatRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatService_2eproto);
    return ::descriptor_table_ChatService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kFromUserIdFieldNumber = 1,
    kToUserIdFieldNumber = 2,
  };
  // bytes msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 from_user_id = 1;
  void clear_from_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 from_user_id() const;
  void set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_user_id() const;
  void _internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to_user_id = 2;
  void clear_to_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 to_user_id() const;
  void set_to_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_user_id() const;
  void _internal_set_to_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OneChatRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatService_2eproto;
};
// -------------------------------------------------------------------

class OneChatResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OneChatResponse) */ {
 public:
  OneChatResponse();
  virtual ~OneChatResponse();

  OneChatResponse(const OneChatResponse& from);
  OneChatResponse(OneChatResponse&& from) noexcept
    : OneChatResponse() {
    *this = ::std::move(from);
  }

  inline OneChatResponse& operator=(const OneChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneChatResponse& operator=(OneChatResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OneChatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneChatResponse* internal_default_instance() {
    return reinterpret_cast<const OneChatResponse*>(
               &_OneChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OneChatResponse& a, OneChatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OneChatResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OneChatResponse* New() const final {
    return CreateMaybeMessage<OneChatResponse>(nullptr);
  }

  OneChatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OneChatResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OneChatResponse& from);
  void MergeFrom(const OneChatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneChatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OneChatResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatService_2eproto);
    return ::descriptor_table_ChatService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OneChatResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatService_2eproto;
};
// -------------------------------------------------------------------

class GroupChatRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupChatRequest) */ {
 public:
  GroupChatRequest();
  virtual ~GroupChatRequest();

  GroupChatRequest(const GroupChatRequest& from);
  GroupChatRequest(GroupChatRequest&& from) noexcept
    : GroupChatRequest() {
    *this = ::std::move(from);
  }

  inline GroupChatRequest& operator=(const GroupChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChatRequest& operator=(GroupChatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupChatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupChatRequest* internal_default_instance() {
    return reinterpret_cast<const GroupChatRequest*>(
               &_GroupChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GroupChatRequest& a, GroupChatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChatRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupChatRequest* New() const final {
    return CreateMaybeMessage<GroupChatRequest>(nullptr);
  }

  GroupChatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupChatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupChatRequest& from);
  void MergeFrom(const GroupChatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupChatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupChatRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatService_2eproto);
    return ::descriptor_table_ChatService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kFromUserIdFieldNumber = 1,
    kToGroupIdFieldNumber = 2,
  };
  // bytes msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 from_user_id = 1;
  void clear_from_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 from_user_id() const;
  void set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_user_id() const;
  void _internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to_group_id = 2;
  void clear_to_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 to_group_id() const;
  void set_to_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_group_id() const;
  void _internal_set_to_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GroupChatRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatService_2eproto;
};
// -------------------------------------------------------------------

class GroupChatResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupChatResponse) */ {
 public:
  GroupChatResponse();
  virtual ~GroupChatResponse();

  GroupChatResponse(const GroupChatResponse& from);
  GroupChatResponse(GroupChatResponse&& from) noexcept
    : GroupChatResponse() {
    *this = ::std::move(from);
  }

  inline GroupChatResponse& operator=(const GroupChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChatResponse& operator=(GroupChatResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupChatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupChatResponse* internal_default_instance() {
    return reinterpret_cast<const GroupChatResponse*>(
               &_GroupChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupChatResponse& a, GroupChatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChatResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupChatResponse* New() const final {
    return CreateMaybeMessage<GroupChatResponse>(nullptr);
  }

  GroupChatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupChatResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupChatResponse& from);
  void MergeFrom(const GroupChatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupChatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupChatResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatService_2eproto);
    return ::descriptor_table_ChatService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GroupChatResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatService_2eproto;
};
// -------------------------------------------------------------------

class ReadOfflineMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReadOfflineMessageRequest) */ {
 public:
  ReadOfflineMessageRequest();
  virtual ~ReadOfflineMessageRequest();

  ReadOfflineMessageRequest(const ReadOfflineMessageRequest& from);
  ReadOfflineMessageRequest(ReadOfflineMessageRequest&& from) noexcept
    : ReadOfflineMessageRequest() {
    *this = ::std::move(from);
  }

  inline ReadOfflineMessageRequest& operator=(const ReadOfflineMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOfflineMessageRequest& operator=(ReadOfflineMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadOfflineMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadOfflineMessageRequest* internal_default_instance() {
    return reinterpret_cast<const ReadOfflineMessageRequest*>(
               &_ReadOfflineMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReadOfflineMessageRequest& a, ReadOfflineMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOfflineMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadOfflineMessageRequest* New() const final {
    return CreateMaybeMessage<ReadOfflineMessageRequest>(nullptr);
  }

  ReadOfflineMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadOfflineMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadOfflineMessageRequest& from);
  void MergeFrom(const ReadOfflineMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOfflineMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReadOfflineMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatService_2eproto);
    return ::descriptor_table_ChatService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ReadOfflineMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatService_2eproto;
};
// -------------------------------------------------------------------

class ReadOfflineMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReadOfflineMessageResponse) */ {
 public:
  ReadOfflineMessageResponse();
  virtual ~ReadOfflineMessageResponse();

  ReadOfflineMessageResponse(const ReadOfflineMessageResponse& from);
  ReadOfflineMessageResponse(ReadOfflineMessageResponse&& from) noexcept
    : ReadOfflineMessageResponse() {
    *this = ::std::move(from);
  }

  inline ReadOfflineMessageResponse& operator=(const ReadOfflineMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOfflineMessageResponse& operator=(ReadOfflineMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadOfflineMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadOfflineMessageResponse* internal_default_instance() {
    return reinterpret_cast<const ReadOfflineMessageResponse*>(
               &_ReadOfflineMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReadOfflineMessageResponse& a, ReadOfflineMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOfflineMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadOfflineMessageResponse* New() const final {
    return CreateMaybeMessage<ReadOfflineMessageResponse>(nullptr);
  }

  ReadOfflineMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadOfflineMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadOfflineMessageResponse& from);
  void MergeFrom(const ReadOfflineMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOfflineMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReadOfflineMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatService_2eproto);
    return ::descriptor_table_ChatService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 3,
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // repeated bytes msgs = 3;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;
  public:
  void clear_msgs();
  const std::string& msgs(int index) const;
  std::string* mutable_msgs(int index);
  void set_msgs(int index, const std::string& value);
  void set_msgs(int index, std::string&& value);
  void set_msgs(int index, const char* value);
  void set_msgs(int index, const void* value, size_t size);
  std::string* add_msgs();
  void add_msgs(const std::string& value);
  void add_msgs(std::string&& value);
  void add_msgs(const char* value);
  void add_msgs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msgs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msgs();
  private:
  const std::string& _internal_msgs(int index) const;
  std::string* _internal_add_msgs();
  public:

  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ReadOfflineMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msgs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatService_2eproto;
};
// -------------------------------------------------------------------

class SaveOfflineMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SaveOfflineMessageRequest) */ {
 public:
  SaveOfflineMessageRequest();
  virtual ~SaveOfflineMessageRequest();

  SaveOfflineMessageRequest(const SaveOfflineMessageRequest& from);
  SaveOfflineMessageRequest(SaveOfflineMessageRequest&& from) noexcept
    : SaveOfflineMessageRequest() {
    *this = ::std::move(from);
  }

  inline SaveOfflineMessageRequest& operator=(const SaveOfflineMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveOfflineMessageRequest& operator=(SaveOfflineMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveOfflineMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveOfflineMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SaveOfflineMessageRequest*>(
               &_SaveOfflineMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SaveOfflineMessageRequest& a, SaveOfflineMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveOfflineMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveOfflineMessageRequest* New() const final {
    return CreateMaybeMessage<SaveOfflineMessageRequest>(nullptr);
  }

  SaveOfflineMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveOfflineMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveOfflineMessageRequest& from);
  void MergeFrom(const SaveOfflineMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveOfflineMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SaveOfflineMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatService_2eproto);
    return ::descriptor_table_ChatService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SaveOfflineMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatService_2eproto;
};
// -------------------------------------------------------------------

class SaveOfflineMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SaveOfflineMessageResponse) */ {
 public:
  SaveOfflineMessageResponse();
  virtual ~SaveOfflineMessageResponse();

  SaveOfflineMessageResponse(const SaveOfflineMessageResponse& from);
  SaveOfflineMessageResponse(SaveOfflineMessageResponse&& from) noexcept
    : SaveOfflineMessageResponse() {
    *this = ::std::move(from);
  }

  inline SaveOfflineMessageResponse& operator=(const SaveOfflineMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveOfflineMessageResponse& operator=(SaveOfflineMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveOfflineMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveOfflineMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SaveOfflineMessageResponse*>(
               &_SaveOfflineMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SaveOfflineMessageResponse& a, SaveOfflineMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveOfflineMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveOfflineMessageResponse* New() const final {
    return CreateMaybeMessage<SaveOfflineMessageResponse>(nullptr);
  }

  SaveOfflineMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveOfflineMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveOfflineMessageResponse& from);
  void MergeFrom(const SaveOfflineMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveOfflineMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SaveOfflineMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatService_2eproto);
    return ::descriptor_table_ChatService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SaveOfflineMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatService_2eproto;
};
// ===================================================================

class ChatServiceRpc_Stub;

class ChatServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ChatServiceRpc() {};
 public:
  virtual ~ChatServiceRpc();

  typedef ChatServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void OneChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OneChatRequest* request,
                       ::OneChatResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GroupChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GroupChatRequest* request,
                       ::GroupChatResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ReadOfflineMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ReadOfflineMessageRequest* request,
                       ::ReadOfflineMessageResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SaveOfflineMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SaveOfflineMessageRequest* request,
                       ::SaveOfflineMessageResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChatServiceRpc);
};

class ChatServiceRpc_Stub : public ChatServiceRpc {
 public:
  ChatServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ChatServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ChatServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ChatServiceRpc ------------------------------------------

  void OneChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OneChatRequest* request,
                       ::OneChatResponse* response,
                       ::google::protobuf::Closure* done);
  void GroupChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GroupChatRequest* request,
                       ::GroupChatResponse* response,
                       ::google::protobuf::Closure* done);
  void ReadOfflineMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ReadOfflineMessageRequest* request,
                       ::ReadOfflineMessageResponse* response,
                       ::google::protobuf::Closure* done);
  void SaveOfflineMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SaveOfflineMessageRequest* request,
                       ::SaveOfflineMessageResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChatServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OneChatRequest

// int32 from_user_id = 1;
inline void OneChatRequest::clear_from_user_id() {
  from_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneChatRequest::_internal_from_user_id() const {
  return from_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneChatRequest::from_user_id() const {
  // @@protoc_insertion_point(field_get:OneChatRequest.from_user_id)
  return _internal_from_user_id();
}
inline void OneChatRequest::_internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_user_id_ = value;
}
inline void OneChatRequest::set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:OneChatRequest.from_user_id)
}

// int32 to_user_id = 2;
inline void OneChatRequest::clear_to_user_id() {
  to_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneChatRequest::_internal_to_user_id() const {
  return to_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneChatRequest::to_user_id() const {
  // @@protoc_insertion_point(field_get:OneChatRequest.to_user_id)
  return _internal_to_user_id();
}
inline void OneChatRequest::_internal_set_to_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_user_id_ = value;
}
inline void OneChatRequest::set_to_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_user_id(value);
  // @@protoc_insertion_point(field_set:OneChatRequest.to_user_id)
}

// bytes msg = 3;
inline void OneChatRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OneChatRequest::msg() const {
  // @@protoc_insertion_point(field_get:OneChatRequest.msg)
  return _internal_msg();
}
inline void OneChatRequest::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:OneChatRequest.msg)
}
inline std::string* OneChatRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:OneChatRequest.msg)
  return _internal_mutable_msg();
}
inline const std::string& OneChatRequest::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void OneChatRequest::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OneChatRequest::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneChatRequest.msg)
}
inline void OneChatRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneChatRequest.msg)
}
inline void OneChatRequest::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneChatRequest.msg)
}
inline std::string* OneChatRequest::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OneChatRequest::release_msg() {
  // @@protoc_insertion_point(field_release:OneChatRequest.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OneChatRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:OneChatRequest.msg)
}

// -------------------------------------------------------------------

// OneChatResponse

// int32 ret_code = 1;
inline void OneChatResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneChatResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneChatResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:OneChatResponse.ret_code)
  return _internal_ret_code();
}
inline void OneChatResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void OneChatResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:OneChatResponse.ret_code)
}

// string res_info = 2;
inline void OneChatResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OneChatResponse::res_info() const {
  // @@protoc_insertion_point(field_get:OneChatResponse.res_info)
  return _internal_res_info();
}
inline void OneChatResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:OneChatResponse.res_info)
}
inline std::string* OneChatResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:OneChatResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& OneChatResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void OneChatResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OneChatResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneChatResponse.res_info)
}
inline void OneChatResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneChatResponse.res_info)
}
inline void OneChatResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneChatResponse.res_info)
}
inline std::string* OneChatResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OneChatResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:OneChatResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OneChatResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:OneChatResponse.res_info)
}

// -------------------------------------------------------------------

// GroupChatRequest

// int32 from_user_id = 1;
inline void GroupChatRequest::clear_from_user_id() {
  from_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChatRequest::_internal_from_user_id() const {
  return from_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChatRequest::from_user_id() const {
  // @@protoc_insertion_point(field_get:GroupChatRequest.from_user_id)
  return _internal_from_user_id();
}
inline void GroupChatRequest::_internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_user_id_ = value;
}
inline void GroupChatRequest::set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:GroupChatRequest.from_user_id)
}

// int32 to_group_id = 2;
inline void GroupChatRequest::clear_to_group_id() {
  to_group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChatRequest::_internal_to_group_id() const {
  return to_group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChatRequest::to_group_id() const {
  // @@protoc_insertion_point(field_get:GroupChatRequest.to_group_id)
  return _internal_to_group_id();
}
inline void GroupChatRequest::_internal_set_to_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_group_id_ = value;
}
inline void GroupChatRequest::set_to_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_group_id(value);
  // @@protoc_insertion_point(field_set:GroupChatRequest.to_group_id)
}

// bytes msg = 3;
inline void GroupChatRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupChatRequest::msg() const {
  // @@protoc_insertion_point(field_get:GroupChatRequest.msg)
  return _internal_msg();
}
inline void GroupChatRequest::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GroupChatRequest.msg)
}
inline std::string* GroupChatRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GroupChatRequest.msg)
  return _internal_mutable_msg();
}
inline const std::string& GroupChatRequest::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void GroupChatRequest::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupChatRequest::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupChatRequest.msg)
}
inline void GroupChatRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupChatRequest.msg)
}
inline void GroupChatRequest::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupChatRequest.msg)
}
inline std::string* GroupChatRequest::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupChatRequest::release_msg() {
  // @@protoc_insertion_point(field_release:GroupChatRequest.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:GroupChatRequest.msg)
}

// -------------------------------------------------------------------

// GroupChatResponse

// int32 ret_code = 1;
inline void GroupChatResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChatResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChatResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:GroupChatResponse.ret_code)
  return _internal_ret_code();
}
inline void GroupChatResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void GroupChatResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:GroupChatResponse.ret_code)
}

// string res_info = 2;
inline void GroupChatResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupChatResponse::res_info() const {
  // @@protoc_insertion_point(field_get:GroupChatResponse.res_info)
  return _internal_res_info();
}
inline void GroupChatResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:GroupChatResponse.res_info)
}
inline std::string* GroupChatResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:GroupChatResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& GroupChatResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void GroupChatResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupChatResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupChatResponse.res_info)
}
inline void GroupChatResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupChatResponse.res_info)
}
inline void GroupChatResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupChatResponse.res_info)
}
inline std::string* GroupChatResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupChatResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:GroupChatResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:GroupChatResponse.res_info)
}

// -------------------------------------------------------------------

// ReadOfflineMessageRequest

// int32 user_id = 1;
inline void ReadOfflineMessageRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadOfflineMessageRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadOfflineMessageRequest::user_id() const {
  // @@protoc_insertion_point(field_get:ReadOfflineMessageRequest.user_id)
  return _internal_user_id();
}
inline void ReadOfflineMessageRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void ReadOfflineMessageRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ReadOfflineMessageRequest.user_id)
}

// -------------------------------------------------------------------

// ReadOfflineMessageResponse

// int32 ret_code = 1;
inline void ReadOfflineMessageResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadOfflineMessageResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadOfflineMessageResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:ReadOfflineMessageResponse.ret_code)
  return _internal_ret_code();
}
inline void ReadOfflineMessageResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void ReadOfflineMessageResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:ReadOfflineMessageResponse.ret_code)
}

// string res_info = 2;
inline void ReadOfflineMessageResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadOfflineMessageResponse::res_info() const {
  // @@protoc_insertion_point(field_get:ReadOfflineMessageResponse.res_info)
  return _internal_res_info();
}
inline void ReadOfflineMessageResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:ReadOfflineMessageResponse.res_info)
}
inline std::string* ReadOfflineMessageResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:ReadOfflineMessageResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& ReadOfflineMessageResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void ReadOfflineMessageResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReadOfflineMessageResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadOfflineMessageResponse.res_info)
}
inline void ReadOfflineMessageResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadOfflineMessageResponse.res_info)
}
inline void ReadOfflineMessageResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadOfflineMessageResponse.res_info)
}
inline std::string* ReadOfflineMessageResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadOfflineMessageResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:ReadOfflineMessageResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadOfflineMessageResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:ReadOfflineMessageResponse.res_info)
}

// repeated bytes msgs = 3;
inline int ReadOfflineMessageResponse::_internal_msgs_size() const {
  return msgs_.size();
}
inline int ReadOfflineMessageResponse::msgs_size() const {
  return _internal_msgs_size();
}
inline void ReadOfflineMessageResponse::clear_msgs() {
  msgs_.Clear();
}
inline std::string* ReadOfflineMessageResponse::add_msgs() {
  // @@protoc_insertion_point(field_add_mutable:ReadOfflineMessageResponse.msgs)
  return _internal_add_msgs();
}
inline const std::string& ReadOfflineMessageResponse::_internal_msgs(int index) const {
  return msgs_.Get(index);
}
inline const std::string& ReadOfflineMessageResponse::msgs(int index) const {
  // @@protoc_insertion_point(field_get:ReadOfflineMessageResponse.msgs)
  return _internal_msgs(index);
}
inline std::string* ReadOfflineMessageResponse::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:ReadOfflineMessageResponse.msgs)
  return msgs_.Mutable(index);
}
inline void ReadOfflineMessageResponse::set_msgs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ReadOfflineMessageResponse.msgs)
  msgs_.Mutable(index)->assign(value);
}
inline void ReadOfflineMessageResponse::set_msgs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ReadOfflineMessageResponse.msgs)
  msgs_.Mutable(index)->assign(std::move(value));
}
inline void ReadOfflineMessageResponse::set_msgs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ReadOfflineMessageResponse.msgs)
}
inline void ReadOfflineMessageResponse::set_msgs(int index, const void* value, size_t size) {
  msgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ReadOfflineMessageResponse.msgs)
}
inline std::string* ReadOfflineMessageResponse::_internal_add_msgs() {
  return msgs_.Add();
}
inline void ReadOfflineMessageResponse::add_msgs(const std::string& value) {
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ReadOfflineMessageResponse.msgs)
}
inline void ReadOfflineMessageResponse::add_msgs(std::string&& value) {
  msgs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ReadOfflineMessageResponse.msgs)
}
inline void ReadOfflineMessageResponse::add_msgs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ReadOfflineMessageResponse.msgs)
}
inline void ReadOfflineMessageResponse::add_msgs(const void* value, size_t size) {
  msgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ReadOfflineMessageResponse.msgs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadOfflineMessageResponse::msgs() const {
  // @@protoc_insertion_point(field_list:ReadOfflineMessageResponse.msgs)
  return msgs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadOfflineMessageResponse::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:ReadOfflineMessageResponse.msgs)
  return &msgs_;
}

// -------------------------------------------------------------------

// SaveOfflineMessageRequest

// int32 user_id = 1;
inline void SaveOfflineMessageRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveOfflineMessageRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveOfflineMessageRequest::user_id() const {
  // @@protoc_insertion_point(field_get:SaveOfflineMessageRequest.user_id)
  return _internal_user_id();
}
inline void SaveOfflineMessageRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void SaveOfflineMessageRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:SaveOfflineMessageRequest.user_id)
}

// bytes msg = 2;
inline void SaveOfflineMessageRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SaveOfflineMessageRequest::msg() const {
  // @@protoc_insertion_point(field_get:SaveOfflineMessageRequest.msg)
  return _internal_msg();
}
inline void SaveOfflineMessageRequest::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:SaveOfflineMessageRequest.msg)
}
inline std::string* SaveOfflineMessageRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:SaveOfflineMessageRequest.msg)
  return _internal_mutable_msg();
}
inline const std::string& SaveOfflineMessageRequest::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SaveOfflineMessageRequest::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SaveOfflineMessageRequest::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SaveOfflineMessageRequest.msg)
}
inline void SaveOfflineMessageRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SaveOfflineMessageRequest.msg)
}
inline void SaveOfflineMessageRequest::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SaveOfflineMessageRequest.msg)
}
inline std::string* SaveOfflineMessageRequest::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SaveOfflineMessageRequest::release_msg() {
  // @@protoc_insertion_point(field_release:SaveOfflineMessageRequest.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SaveOfflineMessageRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:SaveOfflineMessageRequest.msg)
}

// -------------------------------------------------------------------

// SaveOfflineMessageResponse

// int32 ret_code = 1;
inline void SaveOfflineMessageResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveOfflineMessageResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveOfflineMessageResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:SaveOfflineMessageResponse.ret_code)
  return _internal_ret_code();
}
inline void SaveOfflineMessageResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void SaveOfflineMessageResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:SaveOfflineMessageResponse.ret_code)
}

// string res_info = 2;
inline void SaveOfflineMessageResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SaveOfflineMessageResponse::res_info() const {
  // @@protoc_insertion_point(field_get:SaveOfflineMessageResponse.res_info)
  return _internal_res_info();
}
inline void SaveOfflineMessageResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:SaveOfflineMessageResponse.res_info)
}
inline std::string* SaveOfflineMessageResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:SaveOfflineMessageResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& SaveOfflineMessageResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void SaveOfflineMessageResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SaveOfflineMessageResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SaveOfflineMessageResponse.res_info)
}
inline void SaveOfflineMessageResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SaveOfflineMessageResponse.res_info)
}
inline void SaveOfflineMessageResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SaveOfflineMessageResponse.res_info)
}
inline std::string* SaveOfflineMessageResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SaveOfflineMessageResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:SaveOfflineMessageResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SaveOfflineMessageResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:SaveOfflineMessageResponse.res_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ChatService_2eproto
