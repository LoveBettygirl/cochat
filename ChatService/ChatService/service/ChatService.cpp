/*************************************************************
 * ChatService.cpp
 * Generated by corpc framework corpc_gen.py
 * Create Time: 2023-01-14 00:06:29
 * This file will be overwrite every time
 *************************************************************/

#include <google/protobuf/service.h>
#include <exception>
#include <corpc/common/log.h>
#include "ChatService/pb/ChatService.pb.h"
#include "ChatService/service/ChatService.h"
#include "ChatService/common/business_exception.h"
#include "ChatService/interface/one_chat.h"
#include "ChatService/interface/group_chat.h"
#include "ChatService/interface/read_offline_message.h"


#define CALL_RPC_INTERFACE(type)                                                                               \
    type impl(*request, *response);                                                                            \
    try {                                                                                                      \
        USER_LOG_INFO << "In|request:{" << request->ShortDebugString() << "}";                                 \
        impl.run();                                                                                            \
        response->set_ret_code(0);                                                                             \
        response->set_res_info("OK");                                                                          \
        USER_LOG_INFO << "Out|response:{" << response->ShortDebugString() << "}";                              \
        if (done) {                                                                                            \
            done->Run();                                                                                       \
        }                                                                                                      \
    }                                                                                                          \
    catch (ChatService::BusinessException &e) {                                                            \
        USER_LOG_ERROR << "[" << e.fileName() << ":" << e.line() << "] occur BusinessException, error code = " \
                       << e.code() << ", errinfo = " << e.error();                                             \
        response->set_ret_code(e.code());                                                                      \
        response->set_res_info(e.error());                                                                     \
        USER_LOG_INFO << "Out|response:{" << response->ShortDebugString() << "}";                              \
        if (done) {                                                                                            \
            done->Run();                                                                                       \
        }                                                                                                      \
    }                                                                                                          \
    catch (std::exception &) {                                                                                 \
        USER_LOG_ERROR << "occur std::exception, error code = -1, errorinfo = Unknown error ";                 \
        response->set_ret_code(-1);                                                                            \
        response->set_res_info("Unknown error");                                                               \
        USER_LOG_INFO << "Out|response:{" << response->ShortDebugString() << "}";                              \
        if (done) {                                                                                            \
            done->Run();                                                                                       \
        }                                                                                                      \
    }                                                                                                          \
    catch (...) {                                                                                              \
        USER_LOG_ERROR << "occur Unknown exception, error code = -1, errorinfo = Unknown error ";              \
        response->set_ret_code(-1);                                                                            \
        response->set_res_info("Unknown error");                                                               \
        USER_LOG_INFO << "Out|response:{" << response->ShortDebugString() << "}";                              \
        if (done) {                                                                                            \
            done->Run();                                                                                       \
        }                                                                                                      \
    }                                                                                                          \
    if (done) {                                                                                                \
        done->Run();                                                                                           \
    }


namespace ChatService {

void ChatServiceRpcImpl::OneChat(::google::protobuf::RpcController* controller,
                       const ::OneChatRequest* request,
                       ::OneChatResponse* response,
                       ::google::protobuf::Closure* done)
{
    CALL_RPC_INTERFACE(OneChatInterface);
}

void ChatServiceRpcImpl::GroupChat(::google::protobuf::RpcController* controller,
                       const ::GroupChatRequest* request,
                       ::GroupChatResponse* response,
                       ::google::protobuf::Closure* done)
{
    CALL_RPC_INTERFACE(GroupChatInterface);
}

void ChatServiceRpcImpl::ReadOfflineMessage(::google::protobuf::RpcController* controller,
                       const ::ReadOfflineMessageRequest* request,
                       ::ReadOfflineMessageResponse* response,
                       ::google::protobuf::Closure* done)
{
    CALL_RPC_INTERFACE(ReadOfflineMessageInterface);
}

}