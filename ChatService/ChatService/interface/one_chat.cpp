/*************************************************************
 * one_chat.cpp
 * Generated by corpc framework corpc_gen.py
 * Create Time: 2023-01-11 09:45:23
 * This file will not be overwrite althrough protobuf file changed !!!
 * Just write this file while not exist
*************************************************************/

#include <corpc/common/log.h>
#include "ChatService/interface/one_chat.h"
#include "ChatService/pb/ChatService.pb.h"
#include "ChatService/lib/rocketmq/rocketmq.h"
#include "ChatService/dao/user_dao.h"
#include "ChatService/dao/friend_dao.h"
#include "ChatService/common/business_exception.h"
#include "ChatService/common/const.h"
#include "ChatService/common/error_code.h"
#include <string>
#include <corpc/net/tcp/tcp_client.h>


namespace ChatService {

extern RocketMQProducer::ptr gProducer;

OneChatInterface::OneChatInterface(const ::OneChatRequest &request, ::OneChatResponse &response)
    : request_(request), 
    response_(response)
{

}

OneChatInterface::~OneChatInterface()
{

}

void OneChatInterface::run()
{
    //
    // Run your business at here
    // response_.set_ret_code(0);
    // response_.set_res_info("Succ");
    //
    int fromUserId = request_.to_user_id();
    int toUserId = request_.to_user_id();
    std::string msg = request_.msg();

    UserDao userDao;
    User user = userDao.queryUserState(toUserId);
    if (user.getState() == NOT_EXIST_STATE) {
        throw BusinessException(CURRENT_USER_NOT_EXIST, getErrorMsg(CURRENT_USER_NOT_EXIST), __FILE__, __LINE__);
    }
    User friendUser = userDao.queryUserInfo(toUserId);
    if (friendUser.getState() == NOT_EXIST_STATE) {
        throw BusinessException(FRIEND_USER_NOT_EXIST, getErrorMsg(FRIEND_USER_NOT_EXIST), __FILE__, __LINE__);
    }

    FriendDao friendDao;
    if (!friendDao.queryFriend(fromUserId, toUserId)) {
        throw BusinessException(USER_NOT_IN_FRIEND_RELATION, getErrorMsg(USER_NOT_IN_FRIEND_RELATION), __FILE__, __LINE__);
    }

    if (user.getState() == ONLINE_STATE) {
        // 用户在线，转发给对应的ProxyServer
        corpc::NetAddress::ptr addr = userDao.quetyUserHost(toUserId);
        if (addr->toString() == "0.0.0.0:0") {
            throw BusinessException(FORWARD_CHAT_MSG_FAILED, getErrorMsg(FORWARD_CHAT_MSG_FAILED), __FILE__, __LINE__);
        }
        corpc::TcpClient::ptr client = std::make_shared<corpc::TcpClient>(addr);
        if (client->sendData(msg)) {
            throw BusinessException(FORWARD_CHAT_MSG_FAILED, getErrorMsg(FORWARD_CHAT_MSG_FAILED), __FILE__, __LINE__);
        }
    }
    else if (user.getState() == OFFLINE_STATE) {
        // 用户不在线，发送给消息队列的SAVE_OFFLINE_MSG_TOPIC，异步进行离线消息存储
        if (!gProducer->send(SAVE_OFFLINE_MSG_TOPIC, std::to_string(toUserId), msg)) {
            throw BusinessException(SAVE_OFFLINE_MSG_FAILED, getErrorMsg(SAVE_OFFLINE_MSG_FAILED), __FILE__, __LINE__);
        }
    }
}

}