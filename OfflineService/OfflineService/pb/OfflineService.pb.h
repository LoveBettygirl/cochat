// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OfflineService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OfflineService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OfflineService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OfflineService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OfflineService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OfflineService_2eproto;
class ReadOfflineRequest;
class ReadOfflineRequestDefaultTypeInternal;
extern ReadOfflineRequestDefaultTypeInternal _ReadOfflineRequest_default_instance_;
class ReadOfflineResponse;
class ReadOfflineResponseDefaultTypeInternal;
extern ReadOfflineResponseDefaultTypeInternal _ReadOfflineResponse_default_instance_;
class WriteOfflineRequest;
class WriteOfflineRequestDefaultTypeInternal;
extern WriteOfflineRequestDefaultTypeInternal _WriteOfflineRequest_default_instance_;
class WriteOfflineResponse;
class WriteOfflineResponseDefaultTypeInternal;
extern WriteOfflineResponseDefaultTypeInternal _WriteOfflineResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ReadOfflineRequest* Arena::CreateMaybeMessage<::ReadOfflineRequest>(Arena*);
template<> ::ReadOfflineResponse* Arena::CreateMaybeMessage<::ReadOfflineResponse>(Arena*);
template<> ::WriteOfflineRequest* Arena::CreateMaybeMessage<::WriteOfflineRequest>(Arena*);
template<> ::WriteOfflineResponse* Arena::CreateMaybeMessage<::WriteOfflineResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class WriteOfflineRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WriteOfflineRequest) */ {
 public:
  WriteOfflineRequest();
  virtual ~WriteOfflineRequest();

  WriteOfflineRequest(const WriteOfflineRequest& from);
  WriteOfflineRequest(WriteOfflineRequest&& from) noexcept
    : WriteOfflineRequest() {
    *this = ::std::move(from);
  }

  inline WriteOfflineRequest& operator=(const WriteOfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteOfflineRequest& operator=(WriteOfflineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteOfflineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteOfflineRequest* internal_default_instance() {
    return reinterpret_cast<const WriteOfflineRequest*>(
               &_WriteOfflineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WriteOfflineRequest& a, WriteOfflineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteOfflineRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteOfflineRequest* New() const final {
    return CreateMaybeMessage<WriteOfflineRequest>(nullptr);
  }

  WriteOfflineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteOfflineRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteOfflineRequest& from);
  void MergeFrom(const WriteOfflineRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteOfflineRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WriteOfflineRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OfflineService_2eproto);
    return ::descriptor_table_OfflineService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:WriteOfflineRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OfflineService_2eproto;
};
// -------------------------------------------------------------------

class WriteOfflineResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WriteOfflineResponse) */ {
 public:
  WriteOfflineResponse();
  virtual ~WriteOfflineResponse();

  WriteOfflineResponse(const WriteOfflineResponse& from);
  WriteOfflineResponse(WriteOfflineResponse&& from) noexcept
    : WriteOfflineResponse() {
    *this = ::std::move(from);
  }

  inline WriteOfflineResponse& operator=(const WriteOfflineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteOfflineResponse& operator=(WriteOfflineResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteOfflineResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteOfflineResponse* internal_default_instance() {
    return reinterpret_cast<const WriteOfflineResponse*>(
               &_WriteOfflineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WriteOfflineResponse& a, WriteOfflineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteOfflineResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteOfflineResponse* New() const final {
    return CreateMaybeMessage<WriteOfflineResponse>(nullptr);
  }

  WriteOfflineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteOfflineResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteOfflineResponse& from);
  void MergeFrom(const WriteOfflineResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteOfflineResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WriteOfflineResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OfflineService_2eproto);
    return ::descriptor_table_OfflineService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:WriteOfflineResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OfflineService_2eproto;
};
// -------------------------------------------------------------------

class ReadOfflineRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReadOfflineRequest) */ {
 public:
  ReadOfflineRequest();
  virtual ~ReadOfflineRequest();

  ReadOfflineRequest(const ReadOfflineRequest& from);
  ReadOfflineRequest(ReadOfflineRequest&& from) noexcept
    : ReadOfflineRequest() {
    *this = ::std::move(from);
  }

  inline ReadOfflineRequest& operator=(const ReadOfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOfflineRequest& operator=(ReadOfflineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadOfflineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadOfflineRequest* internal_default_instance() {
    return reinterpret_cast<const ReadOfflineRequest*>(
               &_ReadOfflineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadOfflineRequest& a, ReadOfflineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOfflineRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadOfflineRequest* New() const final {
    return CreateMaybeMessage<ReadOfflineRequest>(nullptr);
  }

  ReadOfflineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadOfflineRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadOfflineRequest& from);
  void MergeFrom(const ReadOfflineRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOfflineRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReadOfflineRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OfflineService_2eproto);
    return ::descriptor_table_OfflineService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ReadOfflineRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OfflineService_2eproto;
};
// -------------------------------------------------------------------

class ReadOfflineResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReadOfflineResponse) */ {
 public:
  ReadOfflineResponse();
  virtual ~ReadOfflineResponse();

  ReadOfflineResponse(const ReadOfflineResponse& from);
  ReadOfflineResponse(ReadOfflineResponse&& from) noexcept
    : ReadOfflineResponse() {
    *this = ::std::move(from);
  }

  inline ReadOfflineResponse& operator=(const ReadOfflineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOfflineResponse& operator=(ReadOfflineResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadOfflineResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadOfflineResponse* internal_default_instance() {
    return reinterpret_cast<const ReadOfflineResponse*>(
               &_ReadOfflineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReadOfflineResponse& a, ReadOfflineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOfflineResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadOfflineResponse* New() const final {
    return CreateMaybeMessage<ReadOfflineResponse>(nullptr);
  }

  ReadOfflineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadOfflineResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadOfflineResponse& from);
  void MergeFrom(const ReadOfflineResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOfflineResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReadOfflineResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OfflineService_2eproto);
    return ::descriptor_table_OfflineService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // repeated bytes msg = 3;
  int msg_size() const;
  private:
  int _internal_msg_size() const;
  public:
  void clear_msg();
  const std::string& msg(int index) const;
  std::string* mutable_msg(int index);
  void set_msg(int index, const std::string& value);
  void set_msg(int index, std::string&& value);
  void set_msg(int index, const char* value);
  void set_msg(int index, const void* value, size_t size);
  std::string* add_msg();
  void add_msg(const std::string& value);
  void add_msg(std::string&& value);
  void add_msg(const char* value);
  void add_msg(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msg();
  private:
  const std::string& _internal_msg(int index) const;
  std::string* _internal_add_msg();
  public:

  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ReadOfflineResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OfflineService_2eproto;
};
// ===================================================================

class OfflineServiceRpc_Stub;

class OfflineServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline OfflineServiceRpc() {};
 public:
  virtual ~OfflineServiceRpc();

  typedef OfflineServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void WriteOffline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::WriteOfflineRequest* request,
                       ::WriteOfflineResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ReadOffline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ReadOfflineRequest* request,
                       ::ReadOfflineResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(OfflineServiceRpc);
};

class OfflineServiceRpc_Stub : public OfflineServiceRpc {
 public:
  OfflineServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  OfflineServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~OfflineServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements OfflineServiceRpc ------------------------------------------

  void WriteOffline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::WriteOfflineRequest* request,
                       ::WriteOfflineResponse* response,
                       ::google::protobuf::Closure* done);
  void ReadOffline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ReadOfflineRequest* request,
                       ::ReadOfflineResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(OfflineServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WriteOfflineRequest

// int32 user_id = 1;
inline void WriteOfflineRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteOfflineRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteOfflineRequest::user_id() const {
  // @@protoc_insertion_point(field_get:WriteOfflineRequest.user_id)
  return _internal_user_id();
}
inline void WriteOfflineRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void WriteOfflineRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:WriteOfflineRequest.user_id)
}

// bytes msg = 2;
inline void WriteOfflineRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WriteOfflineRequest::msg() const {
  // @@protoc_insertion_point(field_get:WriteOfflineRequest.msg)
  return _internal_msg();
}
inline void WriteOfflineRequest::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:WriteOfflineRequest.msg)
}
inline std::string* WriteOfflineRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:WriteOfflineRequest.msg)
  return _internal_mutable_msg();
}
inline const std::string& WriteOfflineRequest::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void WriteOfflineRequest::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WriteOfflineRequest::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteOfflineRequest.msg)
}
inline void WriteOfflineRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteOfflineRequest.msg)
}
inline void WriteOfflineRequest::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteOfflineRequest.msg)
}
inline std::string* WriteOfflineRequest::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteOfflineRequest::release_msg() {
  // @@protoc_insertion_point(field_release:WriteOfflineRequest.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteOfflineRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:WriteOfflineRequest.msg)
}

// -------------------------------------------------------------------

// WriteOfflineResponse

// int32 ret_code = 1;
inline void WriteOfflineResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteOfflineResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteOfflineResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:WriteOfflineResponse.ret_code)
  return _internal_ret_code();
}
inline void WriteOfflineResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void WriteOfflineResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:WriteOfflineResponse.ret_code)
}

// string res_info = 2;
inline void WriteOfflineResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WriteOfflineResponse::res_info() const {
  // @@protoc_insertion_point(field_get:WriteOfflineResponse.res_info)
  return _internal_res_info();
}
inline void WriteOfflineResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:WriteOfflineResponse.res_info)
}
inline std::string* WriteOfflineResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:WriteOfflineResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& WriteOfflineResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void WriteOfflineResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WriteOfflineResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteOfflineResponse.res_info)
}
inline void WriteOfflineResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteOfflineResponse.res_info)
}
inline void WriteOfflineResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteOfflineResponse.res_info)
}
inline std::string* WriteOfflineResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteOfflineResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:WriteOfflineResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteOfflineResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:WriteOfflineResponse.res_info)
}

// -------------------------------------------------------------------

// ReadOfflineRequest

// int32 user_id = 1;
inline void ReadOfflineRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadOfflineRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadOfflineRequest::user_id() const {
  // @@protoc_insertion_point(field_get:ReadOfflineRequest.user_id)
  return _internal_user_id();
}
inline void ReadOfflineRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void ReadOfflineRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ReadOfflineRequest.user_id)
}

// -------------------------------------------------------------------

// ReadOfflineResponse

// int32 ret_code = 1;
inline void ReadOfflineResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadOfflineResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadOfflineResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:ReadOfflineResponse.ret_code)
  return _internal_ret_code();
}
inline void ReadOfflineResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void ReadOfflineResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:ReadOfflineResponse.ret_code)
}

// string res_info = 2;
inline void ReadOfflineResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadOfflineResponse::res_info() const {
  // @@protoc_insertion_point(field_get:ReadOfflineResponse.res_info)
  return _internal_res_info();
}
inline void ReadOfflineResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:ReadOfflineResponse.res_info)
}
inline std::string* ReadOfflineResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:ReadOfflineResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& ReadOfflineResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void ReadOfflineResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReadOfflineResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadOfflineResponse.res_info)
}
inline void ReadOfflineResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadOfflineResponse.res_info)
}
inline void ReadOfflineResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadOfflineResponse.res_info)
}
inline std::string* ReadOfflineResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadOfflineResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:ReadOfflineResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadOfflineResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:ReadOfflineResponse.res_info)
}

// repeated bytes msg = 3;
inline int ReadOfflineResponse::_internal_msg_size() const {
  return msg_.size();
}
inline int ReadOfflineResponse::msg_size() const {
  return _internal_msg_size();
}
inline void ReadOfflineResponse::clear_msg() {
  msg_.Clear();
}
inline std::string* ReadOfflineResponse::add_msg() {
  // @@protoc_insertion_point(field_add_mutable:ReadOfflineResponse.msg)
  return _internal_add_msg();
}
inline const std::string& ReadOfflineResponse::_internal_msg(int index) const {
  return msg_.Get(index);
}
inline const std::string& ReadOfflineResponse::msg(int index) const {
  // @@protoc_insertion_point(field_get:ReadOfflineResponse.msg)
  return _internal_msg(index);
}
inline std::string* ReadOfflineResponse::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:ReadOfflineResponse.msg)
  return msg_.Mutable(index);
}
inline void ReadOfflineResponse::set_msg(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ReadOfflineResponse.msg)
  msg_.Mutable(index)->assign(value);
}
inline void ReadOfflineResponse::set_msg(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ReadOfflineResponse.msg)
  msg_.Mutable(index)->assign(std::move(value));
}
inline void ReadOfflineResponse::set_msg(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::set_msg(int index, const void* value, size_t size) {
  msg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ReadOfflineResponse.msg)
}
inline std::string* ReadOfflineResponse::_internal_add_msg() {
  return msg_.Add();
}
inline void ReadOfflineResponse::add_msg(const std::string& value) {
  msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::add_msg(std::string&& value) {
  msg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::add_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::add_msg(const void* value, size_t size) {
  msg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ReadOfflineResponse.msg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadOfflineResponse::msg() const {
  // @@protoc_insertion_point(field_list:ReadOfflineResponse.msg)
  return msg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadOfflineResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:ReadOfflineResponse.msg)
  return &msg_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OfflineService_2eproto
