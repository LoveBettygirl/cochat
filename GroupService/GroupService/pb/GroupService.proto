syntax = "proto3";

option cc_generic_services = true;

enum GroupUserRole {
    CREATOR = 0;
    NORMAL = 1;
}

enum UserState {
    ONLINE = 0;
    OFFLINE = 1;
}

message GroupUserInfo {
    int32 id = 1;
    bytes name = 2;
    UserState state = 3;
    GroupUserRole role = 4;
}

message GroupInfo {
    int32 id = 1;
    bytes name = 2;
    bytes desc = 3;
    repeated GroupUserInfo users = 4;
}

message AddGroupRequest {
    int32 user_id = 1;
    int32 group_id = 2;
}

message AddGroupResponse {
    int32 ret_code = 1;
    string res_info = 2;
}

message CreateGroupRequest {
    int32 user_id = 1;
    bytes group_name = 2;
    bytes group_desc = 3;
}

message CreateGroupResponse {
    int32 ret_code = 1;
    string res_info = 2;
    int32 group_id = 3;
}

message QuitGroupRequest {
    int32 user_id = 1;
    int32 group_id = 2;
}

message QuitGroupResponse {
    int32 ret_code = 1;
    string res_info = 2;
}

message GetGroupInfoRequest {
    int32 group_id = 1;
}

message GetGroupInfoResponse {
    int32 ret_code = 1;
    string res_info = 2;
    GroupInfo group_info = 3;
}

message GetUserGroupsRequest {
    int32 user_id = 1;
}

message GetUserGroupsResponse {
    int32 ret_code = 1;
    string res_info = 2;
    repeated GroupInfo groups = 3;
}

service GroupServiceRpc {
    rpc AddGroup(AddGroupRequest) returns(AddGroupResponse);
    rpc CreateGroup(CreateGroupRequest) returns(CreateGroupResponse);
    rpc QuitGroup(QuitGroupRequest) returns(QuitGroupResponse);
    rpc GetGroupInfo(GetGroupInfoRequest) returns(GetGroupInfoResponse);
    rpc GetUserGroups(GetUserGroupsRequest) returns(GetUserGroupsResponse);
}