/*************************************************************
 * create_group.cpp
 * Generated by corpc framework corpc_gen.py
 * Create Time: 2022-12-30 10:15:13
 * This file will not be overwrite althrough protobuf file changed !!!
 * Just write this file while not exist
*************************************************************/

#include <corpc/common/log.h>
#include "GroupService/interface/create_group.h"
#include "GroupService/pb/GroupService.pb.h"
#include <string>
#include "GroupService/dao/group_dao.h"
#include "GroupService/common/business_exception.h"
#include "GroupService/common/const.h"
#include "GroupService/common/error_code.h"
#include "GroupService/dao/user_dao.h"


namespace GroupService {

CreateGroupInterface::CreateGroupInterface(const ::CreateGroupRequest &request, ::CreateGroupResponse &response)
    : request_(request), 
    response_(response)
{

}

CreateGroupInterface::~CreateGroupInterface()
{

}

void CreateGroupInterface::run()
{
    //
    // Run your business at here
    // response_.set_ret_code(0);
    // response_.set_res_info("Succ");
    //
    int userid = request_.user_id();
    std::string name = request_.group_name();
    std::string desc = request_.group_desc();

    UserDao userDao;
    User user = userDao.queryUserInfo(userid);
    if (user.getState() == NOT_EXIST_STATE) {
        throw BusinessException(CURRENT_USER_NOT_EXIST, getErrorMsg(CURRENT_USER_NOT_EXIST), __FILE__, __LINE__);
    }

    // 存储新创建的群组信息
    Group group(-1, name, desc);
    GroupDao dao;
    if (dao.createGroup(group)) {
        // 存储群组创建人信息
        if (!dao.addGroup(userid, group.getId(), CREATOR_ROLE)) {
            throw BusinessException(USER_IS_IN_GROUP, getErrorMsg(USER_IS_IN_GROUP), __FILE__, __LINE__);
        }
        response_.set_group_id(group.getId());
    }
    else {
        throw BusinessException(GROUP_IS_EXIST, getErrorMsg(GROUP_IS_EXIST), __FILE__, __LINE__);
    }
}

}