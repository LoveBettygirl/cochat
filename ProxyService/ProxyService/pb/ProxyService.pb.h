// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProxyService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProxyService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProxyService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProxyService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProxyService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[35]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProxyService_2eproto;
class AddFriendRequest;
class AddFriendRequestDefaultTypeInternal;
extern AddFriendRequestDefaultTypeInternal _AddFriendRequest_default_instance_;
class AddFriendResponse;
class AddFriendResponseDefaultTypeInternal;
extern AddFriendResponseDefaultTypeInternal _AddFriendResponse_default_instance_;
class AddGroupRequest;
class AddGroupRequestDefaultTypeInternal;
extern AddGroupRequestDefaultTypeInternal _AddGroupRequest_default_instance_;
class AddGroupResponse;
class AddGroupResponseDefaultTypeInternal;
extern AddGroupResponseDefaultTypeInternal _AddGroupResponse_default_instance_;
class CreateGroupRequest;
class CreateGroupRequestDefaultTypeInternal;
extern CreateGroupRequestDefaultTypeInternal _CreateGroupRequest_default_instance_;
class CreateGroupResponse;
class CreateGroupResponseDefaultTypeInternal;
extern CreateGroupResponseDefaultTypeInternal _CreateGroupResponse_default_instance_;
class DeleteFriendRequest;
class DeleteFriendRequestDefaultTypeInternal;
extern DeleteFriendRequestDefaultTypeInternal _DeleteFriendRequest_default_instance_;
class DeleteFriendResponse;
class DeleteFriendResponseDefaultTypeInternal;
extern DeleteFriendResponseDefaultTypeInternal _DeleteFriendResponse_default_instance_;
class FriendListRequest;
class FriendListRequestDefaultTypeInternal;
extern FriendListRequestDefaultTypeInternal _FriendListRequest_default_instance_;
class FriendListResponse;
class FriendListResponseDefaultTypeInternal;
extern FriendListResponseDefaultTypeInternal _FriendListResponse_default_instance_;
class GetGroupInfoRequest;
class GetGroupInfoRequestDefaultTypeInternal;
extern GetGroupInfoRequestDefaultTypeInternal _GetGroupInfoRequest_default_instance_;
class GetGroupInfoResponse;
class GetGroupInfoResponseDefaultTypeInternal;
extern GetGroupInfoResponseDefaultTypeInternal _GetGroupInfoResponse_default_instance_;
class GetUserGroupsRequest;
class GetUserGroupsRequestDefaultTypeInternal;
extern GetUserGroupsRequestDefaultTypeInternal _GetUserGroupsRequest_default_instance_;
class GetUserGroupsResponse;
class GetUserGroupsResponseDefaultTypeInternal;
extern GetUserGroupsResponseDefaultTypeInternal _GetUserGroupsResponse_default_instance_;
class GroupChatRequest;
class GroupChatRequestDefaultTypeInternal;
extern GroupChatRequestDefaultTypeInternal _GroupChatRequest_default_instance_;
class GroupChatResponse;
class GroupChatResponseDefaultTypeInternal;
extern GroupChatResponseDefaultTypeInternal _GroupChatResponse_default_instance_;
class GroupInfo;
class GroupInfoDefaultTypeInternal;
extern GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
class GroupUserInfo;
class GroupUserInfoDefaultTypeInternal;
extern GroupUserInfoDefaultTypeInternal _GroupUserInfo_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LogoutRequest;
class LogoutRequestDefaultTypeInternal;
extern LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
class LogoutResponse;
class LogoutResponseDefaultTypeInternal;
extern LogoutResponseDefaultTypeInternal _LogoutResponse_default_instance_;
class OneChatRequest;
class OneChatRequestDefaultTypeInternal;
extern OneChatRequestDefaultTypeInternal _OneChatRequest_default_instance_;
class OneChatResponse;
class OneChatResponseDefaultTypeInternal;
extern OneChatResponseDefaultTypeInternal _OneChatResponse_default_instance_;
class QuitGroupRequest;
class QuitGroupRequestDefaultTypeInternal;
extern QuitGroupRequestDefaultTypeInternal _QuitGroupRequest_default_instance_;
class QuitGroupResponse;
class QuitGroupResponseDefaultTypeInternal;
extern QuitGroupResponseDefaultTypeInternal _QuitGroupResponse_default_instance_;
class ReadOfflineMessageRequest;
class ReadOfflineMessageRequestDefaultTypeInternal;
extern ReadOfflineMessageRequestDefaultTypeInternal _ReadOfflineMessageRequest_default_instance_;
class ReadOfflineMessageResponse;
class ReadOfflineMessageResponseDefaultTypeInternal;
extern ReadOfflineMessageResponseDefaultTypeInternal _ReadOfflineMessageResponse_default_instance_;
class RegisterRequest;
class RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
class RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
class SaveOfflineMessageRequest;
class SaveOfflineMessageRequestDefaultTypeInternal;
extern SaveOfflineMessageRequestDefaultTypeInternal _SaveOfflineMessageRequest_default_instance_;
class SaveOfflineMessageResponse;
class SaveOfflineMessageResponseDefaultTypeInternal;
extern SaveOfflineMessageResponseDefaultTypeInternal _SaveOfflineMessageResponse_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserInfoRequest;
class UserInfoRequestDefaultTypeInternal;
extern UserInfoRequestDefaultTypeInternal _UserInfoRequest_default_instance_;
class UserInfoResponse;
class UserInfoResponseDefaultTypeInternal;
extern UserInfoResponseDefaultTypeInternal _UserInfoResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AddFriendRequest* Arena::CreateMaybeMessage<::AddFriendRequest>(Arena*);
template<> ::AddFriendResponse* Arena::CreateMaybeMessage<::AddFriendResponse>(Arena*);
template<> ::AddGroupRequest* Arena::CreateMaybeMessage<::AddGroupRequest>(Arena*);
template<> ::AddGroupResponse* Arena::CreateMaybeMessage<::AddGroupResponse>(Arena*);
template<> ::CreateGroupRequest* Arena::CreateMaybeMessage<::CreateGroupRequest>(Arena*);
template<> ::CreateGroupResponse* Arena::CreateMaybeMessage<::CreateGroupResponse>(Arena*);
template<> ::DeleteFriendRequest* Arena::CreateMaybeMessage<::DeleteFriendRequest>(Arena*);
template<> ::DeleteFriendResponse* Arena::CreateMaybeMessage<::DeleteFriendResponse>(Arena*);
template<> ::FriendListRequest* Arena::CreateMaybeMessage<::FriendListRequest>(Arena*);
template<> ::FriendListResponse* Arena::CreateMaybeMessage<::FriendListResponse>(Arena*);
template<> ::GetGroupInfoRequest* Arena::CreateMaybeMessage<::GetGroupInfoRequest>(Arena*);
template<> ::GetGroupInfoResponse* Arena::CreateMaybeMessage<::GetGroupInfoResponse>(Arena*);
template<> ::GetUserGroupsRequest* Arena::CreateMaybeMessage<::GetUserGroupsRequest>(Arena*);
template<> ::GetUserGroupsResponse* Arena::CreateMaybeMessage<::GetUserGroupsResponse>(Arena*);
template<> ::GroupChatRequest* Arena::CreateMaybeMessage<::GroupChatRequest>(Arena*);
template<> ::GroupChatResponse* Arena::CreateMaybeMessage<::GroupChatResponse>(Arena*);
template<> ::GroupInfo* Arena::CreateMaybeMessage<::GroupInfo>(Arena*);
template<> ::GroupUserInfo* Arena::CreateMaybeMessage<::GroupUserInfo>(Arena*);
template<> ::LoginRequest* Arena::CreateMaybeMessage<::LoginRequest>(Arena*);
template<> ::LoginResponse* Arena::CreateMaybeMessage<::LoginResponse>(Arena*);
template<> ::LogoutRequest* Arena::CreateMaybeMessage<::LogoutRequest>(Arena*);
template<> ::LogoutResponse* Arena::CreateMaybeMessage<::LogoutResponse>(Arena*);
template<> ::OneChatRequest* Arena::CreateMaybeMessage<::OneChatRequest>(Arena*);
template<> ::OneChatResponse* Arena::CreateMaybeMessage<::OneChatResponse>(Arena*);
template<> ::QuitGroupRequest* Arena::CreateMaybeMessage<::QuitGroupRequest>(Arena*);
template<> ::QuitGroupResponse* Arena::CreateMaybeMessage<::QuitGroupResponse>(Arena*);
template<> ::ReadOfflineMessageRequest* Arena::CreateMaybeMessage<::ReadOfflineMessageRequest>(Arena*);
template<> ::ReadOfflineMessageResponse* Arena::CreateMaybeMessage<::ReadOfflineMessageResponse>(Arena*);
template<> ::RegisterRequest* Arena::CreateMaybeMessage<::RegisterRequest>(Arena*);
template<> ::RegisterResponse* Arena::CreateMaybeMessage<::RegisterResponse>(Arena*);
template<> ::SaveOfflineMessageRequest* Arena::CreateMaybeMessage<::SaveOfflineMessageRequest>(Arena*);
template<> ::SaveOfflineMessageResponse* Arena::CreateMaybeMessage<::SaveOfflineMessageResponse>(Arena*);
template<> ::UserInfo* Arena::CreateMaybeMessage<::UserInfo>(Arena*);
template<> ::UserInfoRequest* Arena::CreateMaybeMessage<::UserInfoRequest>(Arena*);
template<> ::UserInfoResponse* Arena::CreateMaybeMessage<::UserInfoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum UserState : int {
  ONLINE = 0,
  OFFLINE = 1,
  UserState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserState_IsValid(int value);
constexpr UserState UserState_MIN = ONLINE;
constexpr UserState UserState_MAX = OFFLINE;
constexpr int UserState_ARRAYSIZE = UserState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserState_descriptor();
template<typename T>
inline const std::string& UserState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserState_descriptor(), enum_t_value);
}
inline bool UserState_Parse(
    const std::string& name, UserState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserState>(
    UserState_descriptor(), name, value);
}
enum GroupUserRole : int {
  CREATOR = 0,
  NORMAL = 1,
  GroupUserRole_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GroupUserRole_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GroupUserRole_IsValid(int value);
constexpr GroupUserRole GroupUserRole_MIN = CREATOR;
constexpr GroupUserRole GroupUserRole_MAX = NORMAL;
constexpr int GroupUserRole_ARRAYSIZE = GroupUserRole_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupUserRole_descriptor();
template<typename T>
inline const std::string& GroupUserRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupUserRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupUserRole_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupUserRole_descriptor(), enum_t_value);
}
inline bool GroupUserRole_Parse(
    const std::string& name, GroupUserRole* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupUserRole>(
    GroupUserRole_descriptor(), name, value);
}
// ===================================================================

class OneChatRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OneChatRequest) */ {
 public:
  OneChatRequest();
  virtual ~OneChatRequest();

  OneChatRequest(const OneChatRequest& from);
  OneChatRequest(OneChatRequest&& from) noexcept
    : OneChatRequest() {
    *this = ::std::move(from);
  }

  inline OneChatRequest& operator=(const OneChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneChatRequest& operator=(OneChatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OneChatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneChatRequest* internal_default_instance() {
    return reinterpret_cast<const OneChatRequest*>(
               &_OneChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OneChatRequest& a, OneChatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OneChatRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OneChatRequest* New() const final {
    return CreateMaybeMessage<OneChatRequest>(nullptr);
  }

  OneChatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OneChatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OneChatRequest& from);
  void MergeFrom(const OneChatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneChatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OneChatRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kFromUserIdFieldNumber = 1,
    kToUserIdFieldNumber = 2,
  };
  // bytes msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 from_user_id = 1;
  void clear_from_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 from_user_id() const;
  void set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_user_id() const;
  void _internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to_user_id = 2;
  void clear_to_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 to_user_id() const;
  void set_to_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_user_id() const;
  void _internal_set_to_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OneChatRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class OneChatResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OneChatResponse) */ {
 public:
  OneChatResponse();
  virtual ~OneChatResponse();

  OneChatResponse(const OneChatResponse& from);
  OneChatResponse(OneChatResponse&& from) noexcept
    : OneChatResponse() {
    *this = ::std::move(from);
  }

  inline OneChatResponse& operator=(const OneChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneChatResponse& operator=(OneChatResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OneChatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneChatResponse* internal_default_instance() {
    return reinterpret_cast<const OneChatResponse*>(
               &_OneChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OneChatResponse& a, OneChatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OneChatResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OneChatResponse* New() const final {
    return CreateMaybeMessage<OneChatResponse>(nullptr);
  }

  OneChatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OneChatResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OneChatResponse& from);
  void MergeFrom(const OneChatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneChatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OneChatResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OneChatResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class GroupChatRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupChatRequest) */ {
 public:
  GroupChatRequest();
  virtual ~GroupChatRequest();

  GroupChatRequest(const GroupChatRequest& from);
  GroupChatRequest(GroupChatRequest&& from) noexcept
    : GroupChatRequest() {
    *this = ::std::move(from);
  }

  inline GroupChatRequest& operator=(const GroupChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChatRequest& operator=(GroupChatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupChatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupChatRequest* internal_default_instance() {
    return reinterpret_cast<const GroupChatRequest*>(
               &_GroupChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GroupChatRequest& a, GroupChatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChatRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupChatRequest* New() const final {
    return CreateMaybeMessage<GroupChatRequest>(nullptr);
  }

  GroupChatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupChatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupChatRequest& from);
  void MergeFrom(const GroupChatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupChatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupChatRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kFromUserIdFieldNumber = 1,
    kToGroupIdFieldNumber = 2,
  };
  // bytes msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 from_user_id = 1;
  void clear_from_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 from_user_id() const;
  void set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_user_id() const;
  void _internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to_group_id = 2;
  void clear_to_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 to_group_id() const;
  void set_to_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_group_id() const;
  void _internal_set_to_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GroupChatRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class GroupChatResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupChatResponse) */ {
 public:
  GroupChatResponse();
  virtual ~GroupChatResponse();

  GroupChatResponse(const GroupChatResponse& from);
  GroupChatResponse(GroupChatResponse&& from) noexcept
    : GroupChatResponse() {
    *this = ::std::move(from);
  }

  inline GroupChatResponse& operator=(const GroupChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChatResponse& operator=(GroupChatResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupChatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupChatResponse* internal_default_instance() {
    return reinterpret_cast<const GroupChatResponse*>(
               &_GroupChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupChatResponse& a, GroupChatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChatResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupChatResponse* New() const final {
    return CreateMaybeMessage<GroupChatResponse>(nullptr);
  }

  GroupChatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupChatResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupChatResponse& from);
  void MergeFrom(const GroupChatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupChatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupChatResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GroupChatResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class ReadOfflineMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReadOfflineMessageRequest) */ {
 public:
  ReadOfflineMessageRequest();
  virtual ~ReadOfflineMessageRequest();

  ReadOfflineMessageRequest(const ReadOfflineMessageRequest& from);
  ReadOfflineMessageRequest(ReadOfflineMessageRequest&& from) noexcept
    : ReadOfflineMessageRequest() {
    *this = ::std::move(from);
  }

  inline ReadOfflineMessageRequest& operator=(const ReadOfflineMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOfflineMessageRequest& operator=(ReadOfflineMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadOfflineMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadOfflineMessageRequest* internal_default_instance() {
    return reinterpret_cast<const ReadOfflineMessageRequest*>(
               &_ReadOfflineMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReadOfflineMessageRequest& a, ReadOfflineMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOfflineMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadOfflineMessageRequest* New() const final {
    return CreateMaybeMessage<ReadOfflineMessageRequest>(nullptr);
  }

  ReadOfflineMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadOfflineMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadOfflineMessageRequest& from);
  void MergeFrom(const ReadOfflineMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOfflineMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReadOfflineMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ReadOfflineMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class ReadOfflineMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReadOfflineMessageResponse) */ {
 public:
  ReadOfflineMessageResponse();
  virtual ~ReadOfflineMessageResponse();

  ReadOfflineMessageResponse(const ReadOfflineMessageResponse& from);
  ReadOfflineMessageResponse(ReadOfflineMessageResponse&& from) noexcept
    : ReadOfflineMessageResponse() {
    *this = ::std::move(from);
  }

  inline ReadOfflineMessageResponse& operator=(const ReadOfflineMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOfflineMessageResponse& operator=(ReadOfflineMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadOfflineMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadOfflineMessageResponse* internal_default_instance() {
    return reinterpret_cast<const ReadOfflineMessageResponse*>(
               &_ReadOfflineMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReadOfflineMessageResponse& a, ReadOfflineMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOfflineMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadOfflineMessageResponse* New() const final {
    return CreateMaybeMessage<ReadOfflineMessageResponse>(nullptr);
  }

  ReadOfflineMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadOfflineMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadOfflineMessageResponse& from);
  void MergeFrom(const ReadOfflineMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOfflineMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReadOfflineMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 3,
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // repeated bytes msgs = 3;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;
  public:
  void clear_msgs();
  const std::string& msgs(int index) const;
  std::string* mutable_msgs(int index);
  void set_msgs(int index, const std::string& value);
  void set_msgs(int index, std::string&& value);
  void set_msgs(int index, const char* value);
  void set_msgs(int index, const void* value, size_t size);
  std::string* add_msgs();
  void add_msgs(const std::string& value);
  void add_msgs(std::string&& value);
  void add_msgs(const char* value);
  void add_msgs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msgs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msgs();
  private:
  const std::string& _internal_msgs(int index) const;
  std::string* _internal_add_msgs();
  public:

  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ReadOfflineMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msgs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class SaveOfflineMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SaveOfflineMessageRequest) */ {
 public:
  SaveOfflineMessageRequest();
  virtual ~SaveOfflineMessageRequest();

  SaveOfflineMessageRequest(const SaveOfflineMessageRequest& from);
  SaveOfflineMessageRequest(SaveOfflineMessageRequest&& from) noexcept
    : SaveOfflineMessageRequest() {
    *this = ::std::move(from);
  }

  inline SaveOfflineMessageRequest& operator=(const SaveOfflineMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveOfflineMessageRequest& operator=(SaveOfflineMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveOfflineMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveOfflineMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SaveOfflineMessageRequest*>(
               &_SaveOfflineMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SaveOfflineMessageRequest& a, SaveOfflineMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveOfflineMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveOfflineMessageRequest* New() const final {
    return CreateMaybeMessage<SaveOfflineMessageRequest>(nullptr);
  }

  SaveOfflineMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveOfflineMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveOfflineMessageRequest& from);
  void MergeFrom(const SaveOfflineMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveOfflineMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SaveOfflineMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SaveOfflineMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class SaveOfflineMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SaveOfflineMessageResponse) */ {
 public:
  SaveOfflineMessageResponse();
  virtual ~SaveOfflineMessageResponse();

  SaveOfflineMessageResponse(const SaveOfflineMessageResponse& from);
  SaveOfflineMessageResponse(SaveOfflineMessageResponse&& from) noexcept
    : SaveOfflineMessageResponse() {
    *this = ::std::move(from);
  }

  inline SaveOfflineMessageResponse& operator=(const SaveOfflineMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveOfflineMessageResponse& operator=(SaveOfflineMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveOfflineMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveOfflineMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SaveOfflineMessageResponse*>(
               &_SaveOfflineMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SaveOfflineMessageResponse& a, SaveOfflineMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveOfflineMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveOfflineMessageResponse* New() const final {
    return CreateMaybeMessage<SaveOfflineMessageResponse>(nullptr);
  }

  SaveOfflineMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveOfflineMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveOfflineMessageResponse& from);
  void MergeFrom(const SaveOfflineMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveOfflineMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SaveOfflineMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SaveOfflineMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class UserInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kStateFieldNumber = 3,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .UserState state = 3;
  void clear_state();
  ::UserState state() const;
  void set_state(::UserState value);
  private:
  ::UserState _internal_state() const;
  void _internal_set_state(::UserState value);
  public:

  // @@protoc_insertion_point(class_scope:UserInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class UserInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserInfoRequest) */ {
 public:
  UserInfoRequest();
  virtual ~UserInfoRequest();

  UserInfoRequest(const UserInfoRequest& from);
  UserInfoRequest(UserInfoRequest&& from) noexcept
    : UserInfoRequest() {
    *this = ::std::move(from);
  }

  inline UserInfoRequest& operator=(const UserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoRequest& operator=(UserInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UserInfoRequest*>(
               &_UserInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UserInfoRequest& a, UserInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfoRequest* New() const final {
    return CreateMaybeMessage<UserInfoRequest>(nullptr);
  }

  UserInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfoRequest& from);
  void MergeFrom(const UserInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:UserInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class UserInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserInfoResponse) */ {
 public:
  UserInfoResponse();
  virtual ~UserInfoResponse();

  UserInfoResponse(const UserInfoResponse& from);
  UserInfoResponse(UserInfoResponse&& from) noexcept
    : UserInfoResponse() {
    *this = ::std::move(from);
  }

  inline UserInfoResponse& operator=(const UserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoResponse& operator=(UserInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfoResponse* internal_default_instance() {
    return reinterpret_cast<const UserInfoResponse*>(
               &_UserInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UserInfoResponse& a, UserInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfoResponse* New() const final {
    return CreateMaybeMessage<UserInfoResponse>(nullptr);
  }

  UserInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfoResponse& from);
  void MergeFrom(const UserInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kUserFieldNumber = 3,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // .UserInfo user = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::UserInfo& user() const;
  ::UserInfo* release_user();
  ::UserInfo* mutable_user();
  void set_allocated_user(::UserInfo* user);
  private:
  const ::UserInfo& _internal_user() const;
  ::UserInfo* _internal_mutable_user();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:UserInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::UserInfo* user_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class FriendListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendListRequest) */ {
 public:
  FriendListRequest();
  virtual ~FriendListRequest();

  FriendListRequest(const FriendListRequest& from);
  FriendListRequest(FriendListRequest&& from) noexcept
    : FriendListRequest() {
    *this = ::std::move(from);
  }

  inline FriendListRequest& operator=(const FriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListRequest& operator=(FriendListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendListRequest* internal_default_instance() {
    return reinterpret_cast<const FriendListRequest*>(
               &_FriendListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FriendListRequest& a, FriendListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendListRequest* New() const final {
    return CreateMaybeMessage<FriendListRequest>(nullptr);
  }

  FriendListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendListRequest& from);
  void MergeFrom(const FriendListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FriendListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class FriendListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendListResponse) */ {
 public:
  FriendListResponse();
  virtual ~FriendListResponse();

  FriendListResponse(const FriendListResponse& from);
  FriendListResponse(FriendListResponse&& from) noexcept
    : FriendListResponse() {
    *this = ::std::move(from);
  }

  inline FriendListResponse& operator=(const FriendListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListResponse& operator=(FriendListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendListResponse* internal_default_instance() {
    return reinterpret_cast<const FriendListResponse*>(
               &_FriendListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FriendListResponse& a, FriendListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendListResponse* New() const final {
    return CreateMaybeMessage<FriendListResponse>(nullptr);
  }

  FriendListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendListResponse& from);
  void MergeFrom(const FriendListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 3,
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // repeated .UserInfo friends = 3;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::UserInfo* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfo >*
      mutable_friends();
  private:
  const ::UserInfo& _internal_friends(int index) const;
  ::UserInfo* _internal_add_friends();
  public:
  const ::UserInfo& friends(int index) const;
  ::UserInfo* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfo >&
      friends() const;

  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FriendListResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfo > friends_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class AddFriendRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddFriendRequest) */ {
 public:
  AddFriendRequest();
  virtual ~AddFriendRequest();

  AddFriendRequest(const AddFriendRequest& from);
  AddFriendRequest(AddFriendRequest&& from) noexcept
    : AddFriendRequest() {
    *this = ::std::move(from);
  }

  inline AddFriendRequest& operator=(const AddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendRequest& operator=(AddFriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFriendRequest* internal_default_instance() {
    return reinterpret_cast<const AddFriendRequest*>(
               &_AddFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AddFriendRequest& a, AddFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFriendRequest* New() const final {
    return CreateMaybeMessage<AddFriendRequest>(nullptr);
  }

  AddFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFriendRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFriendRequest& from);
  void MergeFrom(const AddFriendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddFriendRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 friend_id = 2;
  void clear_friend_id();
  ::PROTOBUF_NAMESPACE_ID::int32 friend_id() const;
  void set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_friend_id() const;
  void _internal_set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AddFriendRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 friend_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class AddFriendResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddFriendResponse) */ {
 public:
  AddFriendResponse();
  virtual ~AddFriendResponse();

  AddFriendResponse(const AddFriendResponse& from);
  AddFriendResponse(AddFriendResponse&& from) noexcept
    : AddFriendResponse() {
    *this = ::std::move(from);
  }

  inline AddFriendResponse& operator=(const AddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendResponse& operator=(AddFriendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFriendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFriendResponse* internal_default_instance() {
    return reinterpret_cast<const AddFriendResponse*>(
               &_AddFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AddFriendResponse& a, AddFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFriendResponse* New() const final {
    return CreateMaybeMessage<AddFriendResponse>(nullptr);
  }

  AddFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFriendResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFriendResponse& from);
  void MergeFrom(const AddFriendResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddFriendResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AddFriendResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class DeleteFriendRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteFriendRequest) */ {
 public:
  DeleteFriendRequest();
  virtual ~DeleteFriendRequest();

  DeleteFriendRequest(const DeleteFriendRequest& from);
  DeleteFriendRequest(DeleteFriendRequest&& from) noexcept
    : DeleteFriendRequest() {
    *this = ::std::move(from);
  }

  inline DeleteFriendRequest& operator=(const DeleteFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFriendRequest& operator=(DeleteFriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteFriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteFriendRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteFriendRequest*>(
               &_DeleteFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DeleteFriendRequest& a, DeleteFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteFriendRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteFriendRequest* New() const final {
    return CreateMaybeMessage<DeleteFriendRequest>(nullptr);
  }

  DeleteFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFriendRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteFriendRequest& from);
  void MergeFrom(const DeleteFriendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFriendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteFriendRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 friend_id = 2;
  void clear_friend_id();
  ::PROTOBUF_NAMESPACE_ID::int32 friend_id() const;
  void set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_friend_id() const;
  void _internal_set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DeleteFriendRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 friend_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class DeleteFriendResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteFriendResponse) */ {
 public:
  DeleteFriendResponse();
  virtual ~DeleteFriendResponse();

  DeleteFriendResponse(const DeleteFriendResponse& from);
  DeleteFriendResponse(DeleteFriendResponse&& from) noexcept
    : DeleteFriendResponse() {
    *this = ::std::move(from);
  }

  inline DeleteFriendResponse& operator=(const DeleteFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFriendResponse& operator=(DeleteFriendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteFriendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteFriendResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteFriendResponse*>(
               &_DeleteFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DeleteFriendResponse& a, DeleteFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteFriendResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteFriendResponse* New() const final {
    return CreateMaybeMessage<DeleteFriendResponse>(nullptr);
  }

  DeleteFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFriendResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteFriendResponse& from);
  void MergeFrom(const DeleteFriendResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFriendResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteFriendResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DeleteFriendResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class GroupUserInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupUserInfo) */ {
 public:
  GroupUserInfo();
  virtual ~GroupUserInfo();

  GroupUserInfo(const GroupUserInfo& from);
  GroupUserInfo(GroupUserInfo&& from) noexcept
    : GroupUserInfo() {
    *this = ::std::move(from);
  }

  inline GroupUserInfo& operator=(const GroupUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupUserInfo& operator=(GroupUserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupUserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupUserInfo* internal_default_instance() {
    return reinterpret_cast<const GroupUserInfo*>(
               &_GroupUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GroupUserInfo& a, GroupUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupUserInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupUserInfo* New() const final {
    return CreateMaybeMessage<GroupUserInfo>(nullptr);
  }

  GroupUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupUserInfo& from);
  void MergeFrom(const GroupUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupUserInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kStateFieldNumber = 3,
    kRoleFieldNumber = 4,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .UserState state = 3;
  void clear_state();
  ::UserState state() const;
  void set_state(::UserState value);
  private:
  ::UserState _internal_state() const;
  void _internal_set_state(::UserState value);
  public:

  // .GroupUserRole role = 4;
  void clear_role();
  ::GroupUserRole role() const;
  void set_role(::GroupUserRole value);
  private:
  ::GroupUserRole _internal_role() const;
  void _internal_set_role(::GroupUserRole value);
  public:

  // @@protoc_insertion_point(class_scope:GroupUserInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int state_;
  int role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class GroupInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupInfo) */ {
 public:
  GroupInfo();
  virtual ~GroupInfo();

  GroupInfo(const GroupInfo& from);
  GroupInfo(GroupInfo&& from) noexcept
    : GroupInfo() {
    *this = ::std::move(from);
  }

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfo& operator=(GroupInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupInfo* internal_default_instance() {
    return reinterpret_cast<const GroupInfo*>(
               &_GroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GroupInfo& a, GroupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupInfo* New() const final {
    return CreateMaybeMessage<GroupInfo>(nullptr);
  }

  GroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupInfo& from);
  void MergeFrom(const GroupInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 4,
    kNameFieldNumber = 2,
    kDescFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .GroupUserInfo users = 4;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::GroupUserInfo* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupUserInfo >*
      mutable_users();
  private:
  const ::GroupUserInfo& _internal_users(int index) const;
  ::GroupUserInfo* _internal_add_users();
  public:
  const ::GroupUserInfo& users(int index) const;
  ::GroupUserInfo* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupUserInfo >&
      users() const;

  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes desc = 3;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GroupInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupUserInfo > users_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class AddGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddGroupRequest) */ {
 public:
  AddGroupRequest();
  virtual ~AddGroupRequest();

  AddGroupRequest(const AddGroupRequest& from);
  AddGroupRequest(AddGroupRequest&& from) noexcept
    : AddGroupRequest() {
    *this = ::std::move(from);
  }

  inline AddGroupRequest& operator=(const AddGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroupRequest& operator=(AddGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGroupRequest* internal_default_instance() {
    return reinterpret_cast<const AddGroupRequest*>(
               &_AddGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AddGroupRequest& a, AddGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGroupRequest* New() const final {
    return CreateMaybeMessage<AddGroupRequest>(nullptr);
  }

  AddGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGroupRequest& from);
  void MergeFrom(const AddGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AddGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class AddGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddGroupResponse) */ {
 public:
  AddGroupResponse();
  virtual ~AddGroupResponse();

  AddGroupResponse(const AddGroupResponse& from);
  AddGroupResponse(AddGroupResponse&& from) noexcept
    : AddGroupResponse() {
    *this = ::std::move(from);
  }

  inline AddGroupResponse& operator=(const AddGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroupResponse& operator=(AddGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGroupResponse* internal_default_instance() {
    return reinterpret_cast<const AddGroupResponse*>(
               &_AddGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AddGroupResponse& a, AddGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGroupResponse* New() const final {
    return CreateMaybeMessage<AddGroupResponse>(nullptr);
  }

  AddGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGroupResponse& from);
  void MergeFrom(const AddGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AddGroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateGroupRequest) */ {
 public:
  CreateGroupRequest();
  virtual ~CreateGroupRequest();

  CreateGroupRequest(const CreateGroupRequest& from);
  CreateGroupRequest(CreateGroupRequest&& from) noexcept
    : CreateGroupRequest() {
    *this = ::std::move(from);
  }

  inline CreateGroupRequest& operator=(const CreateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupRequest& operator=(CreateGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRequest*>(
               &_CreateGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CreateGroupRequest& a, CreateGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupRequest* New() const final {
    return CreateMaybeMessage<CreateGroupRequest>(nullptr);
  }

  CreateGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGroupRequest& from);
  void MergeFrom(const CreateGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 2,
    kGroupDescFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // bytes group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  void set_group_name(const std::string& value);
  void set_group_name(std::string&& value);
  void set_group_name(const char* value);
  void set_group_name(const void* value, size_t size);
  std::string* mutable_group_name();
  std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // bytes group_desc = 3;
  void clear_group_desc();
  const std::string& group_desc() const;
  void set_group_desc(const std::string& value);
  void set_group_desc(std::string&& value);
  void set_group_desc(const char* value);
  void set_group_desc(const void* value, size_t size);
  std::string* mutable_group_desc();
  std::string* release_group_desc();
  void set_allocated_group_desc(std::string* group_desc);
  private:
  const std::string& _internal_group_desc() const;
  void _internal_set_group_desc(const std::string& value);
  std::string* _internal_mutable_group_desc();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CreateGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_desc_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateGroupResponse) */ {
 public:
  CreateGroupResponse();
  virtual ~CreateGroupResponse();

  CreateGroupResponse(const CreateGroupResponse& from);
  CreateGroupResponse(CreateGroupResponse&& from) noexcept
    : CreateGroupResponse() {
    *this = ::std::move(from);
  }

  inline CreateGroupResponse& operator=(const CreateGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupResponse& operator=(CreateGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupResponse* internal_default_instance() {
    return reinterpret_cast<const CreateGroupResponse*>(
               &_CreateGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CreateGroupResponse& a, CreateGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupResponse* New() const final {
    return CreateMaybeMessage<CreateGroupResponse>(nullptr);
  }

  CreateGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGroupResponse& from);
  void MergeFrom(const CreateGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
    kGroupIdFieldNumber = 3,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 group_id = 3;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CreateGroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class QuitGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QuitGroupRequest) */ {
 public:
  QuitGroupRequest();
  virtual ~QuitGroupRequest();

  QuitGroupRequest(const QuitGroupRequest& from);
  QuitGroupRequest(QuitGroupRequest&& from) noexcept
    : QuitGroupRequest() {
    *this = ::std::move(from);
  }

  inline QuitGroupRequest& operator=(const QuitGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitGroupRequest& operator=(QuitGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuitGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuitGroupRequest* internal_default_instance() {
    return reinterpret_cast<const QuitGroupRequest*>(
               &_QuitGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(QuitGroupRequest& a, QuitGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuitGroupRequest* New() const final {
    return CreateMaybeMessage<QuitGroupRequest>(nullptr);
  }

  QuitGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuitGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuitGroupRequest& from);
  void MergeFrom(const QuitGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QuitGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:QuitGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class QuitGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QuitGroupResponse) */ {
 public:
  QuitGroupResponse();
  virtual ~QuitGroupResponse();

  QuitGroupResponse(const QuitGroupResponse& from);
  QuitGroupResponse(QuitGroupResponse&& from) noexcept
    : QuitGroupResponse() {
    *this = ::std::move(from);
  }

  inline QuitGroupResponse& operator=(const QuitGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitGroupResponse& operator=(QuitGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuitGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuitGroupResponse* internal_default_instance() {
    return reinterpret_cast<const QuitGroupResponse*>(
               &_QuitGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(QuitGroupResponse& a, QuitGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitGroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuitGroupResponse* New() const final {
    return CreateMaybeMessage<QuitGroupResponse>(nullptr);
  }

  QuitGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuitGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuitGroupResponse& from);
  void MergeFrom(const QuitGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QuitGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:QuitGroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class GetGroupInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetGroupInfoRequest) */ {
 public:
  GetGroupInfoRequest();
  virtual ~GetGroupInfoRequest();

  GetGroupInfoRequest(const GetGroupInfoRequest& from);
  GetGroupInfoRequest(GetGroupInfoRequest&& from) noexcept
    : GetGroupInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetGroupInfoRequest& operator=(const GetGroupInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupInfoRequest& operator=(GetGroupInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetGroupInfoRequest*>(
               &_GetGroupInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetGroupInfoRequest& a, GetGroupInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupInfoRequest* New() const final {
    return CreateMaybeMessage<GetGroupInfoRequest>(nullptr);
  }

  GetGroupInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupInfoRequest& from);
  void MergeFrom(const GetGroupInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetGroupInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // int32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetGroupInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class GetGroupInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetGroupInfoResponse) */ {
 public:
  GetGroupInfoResponse();
  virtual ~GetGroupInfoResponse();

  GetGroupInfoResponse(const GetGroupInfoResponse& from);
  GetGroupInfoResponse(GetGroupInfoResponse&& from) noexcept
    : GetGroupInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetGroupInfoResponse& operator=(const GetGroupInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupInfoResponse& operator=(GetGroupInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetGroupInfoResponse*>(
               &_GetGroupInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetGroupInfoResponse& a, GetGroupInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupInfoResponse* New() const final {
    return CreateMaybeMessage<GetGroupInfoResponse>(nullptr);
  }

  GetGroupInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupInfoResponse& from);
  void MergeFrom(const GetGroupInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetGroupInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kGroupInfoFieldNumber = 3,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // .GroupInfo group_info = 3;
  bool has_group_info() const;
  private:
  bool _internal_has_group_info() const;
  public:
  void clear_group_info();
  const ::GroupInfo& group_info() const;
  ::GroupInfo* release_group_info();
  ::GroupInfo* mutable_group_info();
  void set_allocated_group_info(::GroupInfo* group_info);
  private:
  const ::GroupInfo& _internal_group_info() const;
  ::GroupInfo* _internal_mutable_group_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetGroupInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::GroupInfo* group_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class GetUserGroupsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetUserGroupsRequest) */ {
 public:
  GetUserGroupsRequest();
  virtual ~GetUserGroupsRequest();

  GetUserGroupsRequest(const GetUserGroupsRequest& from);
  GetUserGroupsRequest(GetUserGroupsRequest&& from) noexcept
    : GetUserGroupsRequest() {
    *this = ::std::move(from);
  }

  inline GetUserGroupsRequest& operator=(const GetUserGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserGroupsRequest& operator=(GetUserGroupsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserGroupsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserGroupsRequest*>(
               &_GetUserGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetUserGroupsRequest& a, GetUserGroupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserGroupsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserGroupsRequest* New() const final {
    return CreateMaybeMessage<GetUserGroupsRequest>(nullptr);
  }

  GetUserGroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserGroupsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserGroupsRequest& from);
  void MergeFrom(const GetUserGroupsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserGroupsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetUserGroupsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetUserGroupsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class GetUserGroupsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetUserGroupsResponse) */ {
 public:
  GetUserGroupsResponse();
  virtual ~GetUserGroupsResponse();

  GetUserGroupsResponse(const GetUserGroupsResponse& from);
  GetUserGroupsResponse(GetUserGroupsResponse&& from) noexcept
    : GetUserGroupsResponse() {
    *this = ::std::move(from);
  }

  inline GetUserGroupsResponse& operator=(const GetUserGroupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserGroupsResponse& operator=(GetUserGroupsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserGroupsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserGroupsResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserGroupsResponse*>(
               &_GetUserGroupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetUserGroupsResponse& a, GetUserGroupsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserGroupsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserGroupsResponse* New() const final {
    return CreateMaybeMessage<GetUserGroupsResponse>(nullptr);
  }

  GetUserGroupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserGroupsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserGroupsResponse& from);
  void MergeFrom(const GetUserGroupsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserGroupsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetUserGroupsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 3,
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // repeated .GroupInfo groups = 3;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::GroupInfo* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupInfo >*
      mutable_groups();
  private:
  const ::GroupInfo& _internal_groups(int index) const;
  ::GroupInfo* _internal_add_groups();
  public:
  const ::GroupInfo& groups(int index) const;
  ::GroupInfo* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupInfo >&
      groups() const;

  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetUserGroupsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupInfo > groups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserPasswordFieldNumber = 2,
    kAuthInfoFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // bytes user_password = 2;
  void clear_user_password();
  const std::string& user_password() const;
  void set_user_password(const std::string& value);
  void set_user_password(std::string&& value);
  void set_user_password(const char* value);
  void set_user_password(const void* value, size_t size);
  std::string* mutable_user_password();
  std::string* release_user_password();
  void set_allocated_user_password(std::string* user_password);
  private:
  const std::string& _internal_user_password() const;
  void _internal_set_user_password(const std::string& value);
  std::string* _internal_mutable_user_password();
  public:

  // bytes auth_info = 3;
  void clear_auth_info();
  const std::string& auth_info() const;
  void set_auth_info(const std::string& value);
  void set_auth_info(std::string&& value);
  void set_auth_info(const char* value);
  void set_auth_info(const void* value, size_t size);
  std::string* mutable_auth_info();
  std::string* release_auth_info();
  void set_allocated_auth_info(std::string* auth_info);
  private:
  const std::string& _internal_auth_info() const;
  void _internal_set_auth_info(const std::string& value);
  std::string* _internal_mutable_auth_info();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterRequest) */ {
 public:
  RegisterRequest();
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const final {
    return CreateMaybeMessage<RegisterRequest>(nullptr);
  }

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserPasswordFieldNumber = 2,
  };
  // bytes user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const void* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // bytes user_password = 2;
  void clear_user_password();
  const std::string& user_password() const;
  void set_user_password(const std::string& value);
  void set_user_password(std::string&& value);
  void set_user_password(const char* value);
  void set_user_password(const void* value, size_t size);
  std::string* mutable_user_password();
  std::string* release_user_password();
  void set_allocated_user_password(std::string* user_password);
  private:
  const std::string& _internal_user_password() const;
  void _internal_set_user_password(const std::string& value);
  std::string* _internal_mutable_user_password();
  public:

  // @@protoc_insertion_point(class_scope:RegisterRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class RegisterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterResponse) */ {
 public:
  RegisterResponse();
  virtual ~RegisterResponse();

  RegisterResponse(const RegisterResponse& from);
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterResponse* New() const final {
    return CreateMaybeMessage<RegisterResponse>(nullptr);
  }

  RegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterResponse& from);
  void MergeFrom(const RegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
    kUserIdFieldNumber = 3,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_id = 3;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class LogoutRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogoutRequest) */ {
 public:
  LogoutRequest();
  virtual ~LogoutRequest();

  LogoutRequest(const LogoutRequest& from);
  LogoutRequest(LogoutRequest&& from) noexcept
    : LogoutRequest() {
    *this = ::std::move(from);
  }

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutRequest& operator=(LogoutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest*>(
               &_LogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(LogoutRequest& a, LogoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutRequest* New() const final {
    return CreateMaybeMessage<LogoutRequest>(nullptr);
  }

  LogoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutRequest& from);
  void MergeFrom(const LogoutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogoutRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogoutRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// -------------------------------------------------------------------

class LogoutResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogoutResponse) */ {
 public:
  LogoutResponse();
  virtual ~LogoutResponse();

  LogoutResponse(const LogoutResponse& from);
  LogoutResponse(LogoutResponse&& from) noexcept
    : LogoutResponse() {
    *this = ::std::move(from);
  }

  inline LogoutResponse& operator=(const LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutResponse& operator=(LogoutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutResponse* internal_default_instance() {
    return reinterpret_cast<const LogoutResponse*>(
               &_LogoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(LogoutResponse& a, LogoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutResponse* New() const final {
    return CreateMaybeMessage<LogoutResponse>(nullptr);
  }

  LogoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutResponse& from);
  void MergeFrom(const LogoutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogoutResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyService_2eproto);
    return ::descriptor_table_ProxyService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogoutResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyService_2eproto;
};
// ===================================================================

class ChatServiceRpc_Stub;

class ChatServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ChatServiceRpc() {};
 public:
  virtual ~ChatServiceRpc();

  typedef ChatServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void OneChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OneChatRequest* request,
                       ::OneChatResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GroupChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GroupChatRequest* request,
                       ::GroupChatResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ReadOfflineMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ReadOfflineMessageRequest* request,
                       ::ReadOfflineMessageResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SaveOfflineMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SaveOfflineMessageRequest* request,
                       ::SaveOfflineMessageResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChatServiceRpc);
};

class ChatServiceRpc_Stub : public ChatServiceRpc {
 public:
  ChatServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ChatServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ChatServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ChatServiceRpc ------------------------------------------

  void OneChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OneChatRequest* request,
                       ::OneChatResponse* response,
                       ::google::protobuf::Closure* done);
  void GroupChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GroupChatRequest* request,
                       ::GroupChatResponse* response,
                       ::google::protobuf::Closure* done);
  void ReadOfflineMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ReadOfflineMessageRequest* request,
                       ::ReadOfflineMessageResponse* response,
                       ::google::protobuf::Closure* done);
  void SaveOfflineMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SaveOfflineMessageRequest* request,
                       ::SaveOfflineMessageResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChatServiceRpc_Stub);
};


// -------------------------------------------------------------------

class FriendServiceRpc_Stub;

class FriendServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendServiceRpc() {};
 public:
  virtual ~FriendServiceRpc();

  typedef FriendServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::FriendListRequest* request,
                       ::FriendListResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::UserInfoRequest* request,
                       ::UserInfoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::AddFriendRequest* request,
                       ::AddFriendResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DeleteFriendRequest* request,
                       ::DeleteFriendResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendServiceRpc);
};

class FriendServiceRpc_Stub : public FriendServiceRpc {
 public:
  FriendServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FriendServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FriendServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FriendServiceRpc ------------------------------------------

  void GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::FriendListRequest* request,
                       ::FriendListResponse* response,
                       ::google::protobuf::Closure* done);
  void GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::UserInfoRequest* request,
                       ::UserInfoResponse* response,
                       ::google::protobuf::Closure* done);
  void AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::AddFriendRequest* request,
                       ::AddFriendResponse* response,
                       ::google::protobuf::Closure* done);
  void DeleteFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DeleteFriendRequest* request,
                       ::DeleteFriendResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendServiceRpc_Stub);
};


// -------------------------------------------------------------------

class GroupServiceRpc_Stub;

class GroupServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GroupServiceRpc() {};
 public:
  virtual ~GroupServiceRpc();

  typedef GroupServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void AddGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::AddGroupRequest* request,
                       ::AddGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CreateGroupRequest* request,
                       ::CreateGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QuitGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::QuitGroupRequest* request,
                       ::QuitGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGroupInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GetGroupInfoRequest* request,
                       ::GetGroupInfoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GetUserGroupsRequest* request,
                       ::GetUserGroupsResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GroupServiceRpc);
};

class GroupServiceRpc_Stub : public GroupServiceRpc {
 public:
  GroupServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GroupServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GroupServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GroupServiceRpc ------------------------------------------

  void AddGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::AddGroupRequest* request,
                       ::AddGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void CreateGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CreateGroupRequest* request,
                       ::CreateGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void QuitGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::QuitGroupRequest* request,
                       ::QuitGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void GetGroupInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GetGroupInfoRequest* request,
                       ::GetGroupInfoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetUserGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GetUserGroupsRequest* request,
                       ::GetUserGroupsResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GroupServiceRpc_Stub);
};


// -------------------------------------------------------------------

class UserServiceRpc_Stub;

class UserServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserServiceRpc() {};
 public:
  virtual ~UserServiceRpc();

  typedef UserServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::LoginRequest* request,
                       ::LoginResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Register(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::RegisterRequest* request,
                       ::RegisterResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Logout(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::LogoutRequest* request,
                       ::LogoutResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc);
};

class UserServiceRpc_Stub : public UserServiceRpc {
 public:
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserServiceRpc ------------------------------------------

  void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::LoginRequest* request,
                       ::LoginResponse* response,
                       ::google::protobuf::Closure* done);
  void Register(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::RegisterRequest* request,
                       ::RegisterResponse* response,
                       ::google::protobuf::Closure* done);
  void Logout(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::LogoutRequest* request,
                       ::LogoutResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OneChatRequest

// int32 from_user_id = 1;
inline void OneChatRequest::clear_from_user_id() {
  from_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneChatRequest::_internal_from_user_id() const {
  return from_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneChatRequest::from_user_id() const {
  // @@protoc_insertion_point(field_get:OneChatRequest.from_user_id)
  return _internal_from_user_id();
}
inline void OneChatRequest::_internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_user_id_ = value;
}
inline void OneChatRequest::set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:OneChatRequest.from_user_id)
}

// int32 to_user_id = 2;
inline void OneChatRequest::clear_to_user_id() {
  to_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneChatRequest::_internal_to_user_id() const {
  return to_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneChatRequest::to_user_id() const {
  // @@protoc_insertion_point(field_get:OneChatRequest.to_user_id)
  return _internal_to_user_id();
}
inline void OneChatRequest::_internal_set_to_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_user_id_ = value;
}
inline void OneChatRequest::set_to_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_user_id(value);
  // @@protoc_insertion_point(field_set:OneChatRequest.to_user_id)
}

// bytes msg = 3;
inline void OneChatRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OneChatRequest::msg() const {
  // @@protoc_insertion_point(field_get:OneChatRequest.msg)
  return _internal_msg();
}
inline void OneChatRequest::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:OneChatRequest.msg)
}
inline std::string* OneChatRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:OneChatRequest.msg)
  return _internal_mutable_msg();
}
inline const std::string& OneChatRequest::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void OneChatRequest::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OneChatRequest::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneChatRequest.msg)
}
inline void OneChatRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneChatRequest.msg)
}
inline void OneChatRequest::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneChatRequest.msg)
}
inline std::string* OneChatRequest::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OneChatRequest::release_msg() {
  // @@protoc_insertion_point(field_release:OneChatRequest.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OneChatRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:OneChatRequest.msg)
}

// -------------------------------------------------------------------

// OneChatResponse

// int32 ret_code = 1;
inline void OneChatResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneChatResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneChatResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:OneChatResponse.ret_code)
  return _internal_ret_code();
}
inline void OneChatResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void OneChatResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:OneChatResponse.ret_code)
}

// string res_info = 2;
inline void OneChatResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OneChatResponse::res_info() const {
  // @@protoc_insertion_point(field_get:OneChatResponse.res_info)
  return _internal_res_info();
}
inline void OneChatResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:OneChatResponse.res_info)
}
inline std::string* OneChatResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:OneChatResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& OneChatResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void OneChatResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OneChatResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneChatResponse.res_info)
}
inline void OneChatResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneChatResponse.res_info)
}
inline void OneChatResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneChatResponse.res_info)
}
inline std::string* OneChatResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OneChatResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:OneChatResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OneChatResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:OneChatResponse.res_info)
}

// -------------------------------------------------------------------

// GroupChatRequest

// int32 from_user_id = 1;
inline void GroupChatRequest::clear_from_user_id() {
  from_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChatRequest::_internal_from_user_id() const {
  return from_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChatRequest::from_user_id() const {
  // @@protoc_insertion_point(field_get:GroupChatRequest.from_user_id)
  return _internal_from_user_id();
}
inline void GroupChatRequest::_internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_user_id_ = value;
}
inline void GroupChatRequest::set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:GroupChatRequest.from_user_id)
}

// int32 to_group_id = 2;
inline void GroupChatRequest::clear_to_group_id() {
  to_group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChatRequest::_internal_to_group_id() const {
  return to_group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChatRequest::to_group_id() const {
  // @@protoc_insertion_point(field_get:GroupChatRequest.to_group_id)
  return _internal_to_group_id();
}
inline void GroupChatRequest::_internal_set_to_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_group_id_ = value;
}
inline void GroupChatRequest::set_to_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_group_id(value);
  // @@protoc_insertion_point(field_set:GroupChatRequest.to_group_id)
}

// bytes msg = 3;
inline void GroupChatRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupChatRequest::msg() const {
  // @@protoc_insertion_point(field_get:GroupChatRequest.msg)
  return _internal_msg();
}
inline void GroupChatRequest::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GroupChatRequest.msg)
}
inline std::string* GroupChatRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GroupChatRequest.msg)
  return _internal_mutable_msg();
}
inline const std::string& GroupChatRequest::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void GroupChatRequest::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupChatRequest::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupChatRequest.msg)
}
inline void GroupChatRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupChatRequest.msg)
}
inline void GroupChatRequest::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupChatRequest.msg)
}
inline std::string* GroupChatRequest::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupChatRequest::release_msg() {
  // @@protoc_insertion_point(field_release:GroupChatRequest.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:GroupChatRequest.msg)
}

// -------------------------------------------------------------------

// GroupChatResponse

// int32 ret_code = 1;
inline void GroupChatResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChatResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChatResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:GroupChatResponse.ret_code)
  return _internal_ret_code();
}
inline void GroupChatResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void GroupChatResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:GroupChatResponse.ret_code)
}

// string res_info = 2;
inline void GroupChatResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupChatResponse::res_info() const {
  // @@protoc_insertion_point(field_get:GroupChatResponse.res_info)
  return _internal_res_info();
}
inline void GroupChatResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:GroupChatResponse.res_info)
}
inline std::string* GroupChatResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:GroupChatResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& GroupChatResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void GroupChatResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupChatResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupChatResponse.res_info)
}
inline void GroupChatResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupChatResponse.res_info)
}
inline void GroupChatResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupChatResponse.res_info)
}
inline std::string* GroupChatResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupChatResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:GroupChatResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:GroupChatResponse.res_info)
}

// -------------------------------------------------------------------

// ReadOfflineMessageRequest

// int32 user_id = 1;
inline void ReadOfflineMessageRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadOfflineMessageRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadOfflineMessageRequest::user_id() const {
  // @@protoc_insertion_point(field_get:ReadOfflineMessageRequest.user_id)
  return _internal_user_id();
}
inline void ReadOfflineMessageRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void ReadOfflineMessageRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ReadOfflineMessageRequest.user_id)
}

// -------------------------------------------------------------------

// ReadOfflineMessageResponse

// int32 ret_code = 1;
inline void ReadOfflineMessageResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadOfflineMessageResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadOfflineMessageResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:ReadOfflineMessageResponse.ret_code)
  return _internal_ret_code();
}
inline void ReadOfflineMessageResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void ReadOfflineMessageResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:ReadOfflineMessageResponse.ret_code)
}

// string res_info = 2;
inline void ReadOfflineMessageResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadOfflineMessageResponse::res_info() const {
  // @@protoc_insertion_point(field_get:ReadOfflineMessageResponse.res_info)
  return _internal_res_info();
}
inline void ReadOfflineMessageResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:ReadOfflineMessageResponse.res_info)
}
inline std::string* ReadOfflineMessageResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:ReadOfflineMessageResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& ReadOfflineMessageResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void ReadOfflineMessageResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReadOfflineMessageResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadOfflineMessageResponse.res_info)
}
inline void ReadOfflineMessageResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadOfflineMessageResponse.res_info)
}
inline void ReadOfflineMessageResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadOfflineMessageResponse.res_info)
}
inline std::string* ReadOfflineMessageResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadOfflineMessageResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:ReadOfflineMessageResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadOfflineMessageResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:ReadOfflineMessageResponse.res_info)
}

// repeated bytes msgs = 3;
inline int ReadOfflineMessageResponse::_internal_msgs_size() const {
  return msgs_.size();
}
inline int ReadOfflineMessageResponse::msgs_size() const {
  return _internal_msgs_size();
}
inline void ReadOfflineMessageResponse::clear_msgs() {
  msgs_.Clear();
}
inline std::string* ReadOfflineMessageResponse::add_msgs() {
  // @@protoc_insertion_point(field_add_mutable:ReadOfflineMessageResponse.msgs)
  return _internal_add_msgs();
}
inline const std::string& ReadOfflineMessageResponse::_internal_msgs(int index) const {
  return msgs_.Get(index);
}
inline const std::string& ReadOfflineMessageResponse::msgs(int index) const {
  // @@protoc_insertion_point(field_get:ReadOfflineMessageResponse.msgs)
  return _internal_msgs(index);
}
inline std::string* ReadOfflineMessageResponse::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:ReadOfflineMessageResponse.msgs)
  return msgs_.Mutable(index);
}
inline void ReadOfflineMessageResponse::set_msgs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ReadOfflineMessageResponse.msgs)
  msgs_.Mutable(index)->assign(value);
}
inline void ReadOfflineMessageResponse::set_msgs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ReadOfflineMessageResponse.msgs)
  msgs_.Mutable(index)->assign(std::move(value));
}
inline void ReadOfflineMessageResponse::set_msgs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ReadOfflineMessageResponse.msgs)
}
inline void ReadOfflineMessageResponse::set_msgs(int index, const void* value, size_t size) {
  msgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ReadOfflineMessageResponse.msgs)
}
inline std::string* ReadOfflineMessageResponse::_internal_add_msgs() {
  return msgs_.Add();
}
inline void ReadOfflineMessageResponse::add_msgs(const std::string& value) {
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ReadOfflineMessageResponse.msgs)
}
inline void ReadOfflineMessageResponse::add_msgs(std::string&& value) {
  msgs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ReadOfflineMessageResponse.msgs)
}
inline void ReadOfflineMessageResponse::add_msgs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ReadOfflineMessageResponse.msgs)
}
inline void ReadOfflineMessageResponse::add_msgs(const void* value, size_t size) {
  msgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ReadOfflineMessageResponse.msgs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadOfflineMessageResponse::msgs() const {
  // @@protoc_insertion_point(field_list:ReadOfflineMessageResponse.msgs)
  return msgs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadOfflineMessageResponse::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:ReadOfflineMessageResponse.msgs)
  return &msgs_;
}

// -------------------------------------------------------------------

// SaveOfflineMessageRequest

// int32 user_id = 1;
inline void SaveOfflineMessageRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveOfflineMessageRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveOfflineMessageRequest::user_id() const {
  // @@protoc_insertion_point(field_get:SaveOfflineMessageRequest.user_id)
  return _internal_user_id();
}
inline void SaveOfflineMessageRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void SaveOfflineMessageRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:SaveOfflineMessageRequest.user_id)
}

// bytes msg = 2;
inline void SaveOfflineMessageRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SaveOfflineMessageRequest::msg() const {
  // @@protoc_insertion_point(field_get:SaveOfflineMessageRequest.msg)
  return _internal_msg();
}
inline void SaveOfflineMessageRequest::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:SaveOfflineMessageRequest.msg)
}
inline std::string* SaveOfflineMessageRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:SaveOfflineMessageRequest.msg)
  return _internal_mutable_msg();
}
inline const std::string& SaveOfflineMessageRequest::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SaveOfflineMessageRequest::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SaveOfflineMessageRequest::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SaveOfflineMessageRequest.msg)
}
inline void SaveOfflineMessageRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SaveOfflineMessageRequest.msg)
}
inline void SaveOfflineMessageRequest::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SaveOfflineMessageRequest.msg)
}
inline std::string* SaveOfflineMessageRequest::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SaveOfflineMessageRequest::release_msg() {
  // @@protoc_insertion_point(field_release:SaveOfflineMessageRequest.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SaveOfflineMessageRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:SaveOfflineMessageRequest.msg)
}

// -------------------------------------------------------------------

// SaveOfflineMessageResponse

// int32 ret_code = 1;
inline void SaveOfflineMessageResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveOfflineMessageResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveOfflineMessageResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:SaveOfflineMessageResponse.ret_code)
  return _internal_ret_code();
}
inline void SaveOfflineMessageResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void SaveOfflineMessageResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:SaveOfflineMessageResponse.ret_code)
}

// string res_info = 2;
inline void SaveOfflineMessageResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SaveOfflineMessageResponse::res_info() const {
  // @@protoc_insertion_point(field_get:SaveOfflineMessageResponse.res_info)
  return _internal_res_info();
}
inline void SaveOfflineMessageResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:SaveOfflineMessageResponse.res_info)
}
inline std::string* SaveOfflineMessageResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:SaveOfflineMessageResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& SaveOfflineMessageResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void SaveOfflineMessageResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SaveOfflineMessageResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SaveOfflineMessageResponse.res_info)
}
inline void SaveOfflineMessageResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SaveOfflineMessageResponse.res_info)
}
inline void SaveOfflineMessageResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SaveOfflineMessageResponse.res_info)
}
inline std::string* SaveOfflineMessageResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SaveOfflineMessageResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:SaveOfflineMessageResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SaveOfflineMessageResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:SaveOfflineMessageResponse.res_info)
}

// -------------------------------------------------------------------

// UserInfo

// int32 id = 1;
inline void UserInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::id() const {
  // @@protoc_insertion_point(field_get:UserInfo.id)
  return _internal_id();
}
inline void UserInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UserInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:UserInfo.id)
}

// bytes name = 2;
inline void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:UserInfo.name)
  return _internal_name();
}
inline void UserInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:UserInfo.name)
}
inline std::string* UserInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:UserInfo.name)
  return _internal_mutable_name();
}
inline const std::string& UserInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void UserInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.name)
}
inline void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.name)
}
inline void UserInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.name)
}
inline std::string* UserInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:UserInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.name)
}

// .UserState state = 3;
inline void UserInfo::clear_state() {
  state_ = 0;
}
inline ::UserState UserInfo::_internal_state() const {
  return static_cast< ::UserState >(state_);
}
inline ::UserState UserInfo::state() const {
  // @@protoc_insertion_point(field_get:UserInfo.state)
  return _internal_state();
}
inline void UserInfo::_internal_set_state(::UserState value) {
  
  state_ = value;
}
inline void UserInfo::set_state(::UserState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:UserInfo.state)
}

// -------------------------------------------------------------------

// UserInfoRequest

// int32 user_id = 1;
inline void UserInfoRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfoRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfoRequest::user_id() const {
  // @@protoc_insertion_point(field_get:UserInfoRequest.user_id)
  return _internal_user_id();
}
inline void UserInfoRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void UserInfoRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:UserInfoRequest.user_id)
}

// -------------------------------------------------------------------

// UserInfoResponse

// int32 ret_code = 1;
inline void UserInfoResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfoResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfoResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:UserInfoResponse.ret_code)
  return _internal_ret_code();
}
inline void UserInfoResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void UserInfoResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:UserInfoResponse.ret_code)
}

// string res_info = 2;
inline void UserInfoResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfoResponse::res_info() const {
  // @@protoc_insertion_point(field_get:UserInfoResponse.res_info)
  return _internal_res_info();
}
inline void UserInfoResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:UserInfoResponse.res_info)
}
inline std::string* UserInfoResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:UserInfoResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& UserInfoResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void UserInfoResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserInfoResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfoResponse.res_info)
}
inline void UserInfoResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfoResponse.res_info)
}
inline void UserInfoResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfoResponse.res_info)
}
inline std::string* UserInfoResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfoResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:UserInfoResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:UserInfoResponse.res_info)
}

// .UserInfo user = 3;
inline bool UserInfoResponse::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool UserInfoResponse::has_user() const {
  return _internal_has_user();
}
inline void UserInfoResponse::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::UserInfo& UserInfoResponse::_internal_user() const {
  const ::UserInfo* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::UserInfo*>(
      &::_UserInfo_default_instance_);
}
inline const ::UserInfo& UserInfoResponse::user() const {
  // @@protoc_insertion_point(field_get:UserInfoResponse.user)
  return _internal_user();
}
inline ::UserInfo* UserInfoResponse::release_user() {
  // @@protoc_insertion_point(field_release:UserInfoResponse.user)
  
  ::UserInfo* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::UserInfo* UserInfoResponse::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserInfo>(GetArenaNoVirtual());
    user_ = p;
  }
  return user_;
}
inline ::UserInfo* UserInfoResponse::mutable_user() {
  // @@protoc_insertion_point(field_mutable:UserInfoResponse.user)
  return _internal_mutable_user();
}
inline void UserInfoResponse::set_allocated_user(::UserInfo* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:UserInfoResponse.user)
}

// -------------------------------------------------------------------

// FriendListRequest

// int32 user_id = 1;
inline void FriendListRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendListRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendListRequest::user_id() const {
  // @@protoc_insertion_point(field_get:FriendListRequest.user_id)
  return _internal_user_id();
}
inline void FriendListRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void FriendListRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:FriendListRequest.user_id)
}

// -------------------------------------------------------------------

// FriendListResponse

// int32 ret_code = 1;
inline void FriendListResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendListResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendListResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:FriendListResponse.ret_code)
  return _internal_ret_code();
}
inline void FriendListResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void FriendListResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:FriendListResponse.ret_code)
}

// string res_info = 2;
inline void FriendListResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FriendListResponse::res_info() const {
  // @@protoc_insertion_point(field_get:FriendListResponse.res_info)
  return _internal_res_info();
}
inline void FriendListResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:FriendListResponse.res_info)
}
inline std::string* FriendListResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:FriendListResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& FriendListResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void FriendListResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FriendListResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendListResponse.res_info)
}
inline void FriendListResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendListResponse.res_info)
}
inline void FriendListResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendListResponse.res_info)
}
inline std::string* FriendListResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FriendListResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:FriendListResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FriendListResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:FriendListResponse.res_info)
}

// repeated .UserInfo friends = 3;
inline int FriendListResponse::_internal_friends_size() const {
  return friends_.size();
}
inline int FriendListResponse::friends_size() const {
  return _internal_friends_size();
}
inline void FriendListResponse::clear_friends() {
  friends_.Clear();
}
inline ::UserInfo* FriendListResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:FriendListResponse.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfo >*
FriendListResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:FriendListResponse.friends)
  return &friends_;
}
inline const ::UserInfo& FriendListResponse::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::UserInfo& FriendListResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:FriendListResponse.friends)
  return _internal_friends(index);
}
inline ::UserInfo* FriendListResponse::_internal_add_friends() {
  return friends_.Add();
}
inline ::UserInfo* FriendListResponse::add_friends() {
  // @@protoc_insertion_point(field_add:FriendListResponse.friends)
  return _internal_add_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfo >&
FriendListResponse::friends() const {
  // @@protoc_insertion_point(field_list:FriendListResponse.friends)
  return friends_;
}

// -------------------------------------------------------------------

// AddFriendRequest

// int32 user_id = 1;
inline void AddFriendRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendRequest::user_id() const {
  // @@protoc_insertion_point(field_get:AddFriendRequest.user_id)
  return _internal_user_id();
}
inline void AddFriendRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void AddFriendRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:AddFriendRequest.user_id)
}

// int32 friend_id = 2;
inline void AddFriendRequest::clear_friend_id() {
  friend_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendRequest::_internal_friend_id() const {
  return friend_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendRequest::friend_id() const {
  // @@protoc_insertion_point(field_get:AddFriendRequest.friend_id)
  return _internal_friend_id();
}
inline void AddFriendRequest::_internal_set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  friend_id_ = value;
}
inline void AddFriendRequest::set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:AddFriendRequest.friend_id)
}

// -------------------------------------------------------------------

// AddFriendResponse

// int32 ret_code = 1;
inline void AddFriendResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:AddFriendResponse.ret_code)
  return _internal_ret_code();
}
inline void AddFriendResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void AddFriendResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:AddFriendResponse.ret_code)
}

// string res_info = 2;
inline void AddFriendResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddFriendResponse::res_info() const {
  // @@protoc_insertion_point(field_get:AddFriendResponse.res_info)
  return _internal_res_info();
}
inline void AddFriendResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:AddFriendResponse.res_info)
}
inline std::string* AddFriendResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:AddFriendResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& AddFriendResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void AddFriendResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddFriendResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddFriendResponse.res_info)
}
inline void AddFriendResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddFriendResponse.res_info)
}
inline void AddFriendResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddFriendResponse.res_info)
}
inline std::string* AddFriendResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddFriendResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:AddFriendResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:AddFriendResponse.res_info)
}

// -------------------------------------------------------------------

// DeleteFriendRequest

// int32 user_id = 1;
inline void DeleteFriendRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFriendRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFriendRequest::user_id() const {
  // @@protoc_insertion_point(field_get:DeleteFriendRequest.user_id)
  return _internal_user_id();
}
inline void DeleteFriendRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void DeleteFriendRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:DeleteFriendRequest.user_id)
}

// int32 friend_id = 2;
inline void DeleteFriendRequest::clear_friend_id() {
  friend_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFriendRequest::_internal_friend_id() const {
  return friend_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFriendRequest::friend_id() const {
  // @@protoc_insertion_point(field_get:DeleteFriendRequest.friend_id)
  return _internal_friend_id();
}
inline void DeleteFriendRequest::_internal_set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  friend_id_ = value;
}
inline void DeleteFriendRequest::set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:DeleteFriendRequest.friend_id)
}

// -------------------------------------------------------------------

// DeleteFriendResponse

// int32 ret_code = 1;
inline void DeleteFriendResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFriendResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFriendResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:DeleteFriendResponse.ret_code)
  return _internal_ret_code();
}
inline void DeleteFriendResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void DeleteFriendResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:DeleteFriendResponse.ret_code)
}

// string res_info = 2;
inline void DeleteFriendResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteFriendResponse::res_info() const {
  // @@protoc_insertion_point(field_get:DeleteFriendResponse.res_info)
  return _internal_res_info();
}
inline void DeleteFriendResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:DeleteFriendResponse.res_info)
}
inline std::string* DeleteFriendResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:DeleteFriendResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& DeleteFriendResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void DeleteFriendResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteFriendResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeleteFriendResponse.res_info)
}
inline void DeleteFriendResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeleteFriendResponse.res_info)
}
inline void DeleteFriendResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeleteFriendResponse.res_info)
}
inline std::string* DeleteFriendResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteFriendResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:DeleteFriendResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteFriendResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:DeleteFriendResponse.res_info)
}

// -------------------------------------------------------------------

// GroupUserInfo

// int32 id = 1;
inline void GroupUserInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupUserInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupUserInfo::id() const {
  // @@protoc_insertion_point(field_get:GroupUserInfo.id)
  return _internal_id();
}
inline void GroupUserInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void GroupUserInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:GroupUserInfo.id)
}

// bytes name = 2;
inline void GroupUserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupUserInfo::name() const {
  // @@protoc_insertion_point(field_get:GroupUserInfo.name)
  return _internal_name();
}
inline void GroupUserInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:GroupUserInfo.name)
}
inline std::string* GroupUserInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:GroupUserInfo.name)
  return _internal_mutable_name();
}
inline const std::string& GroupUserInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void GroupUserInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupUserInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupUserInfo.name)
}
inline void GroupUserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupUserInfo.name)
}
inline void GroupUserInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupUserInfo.name)
}
inline std::string* GroupUserInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupUserInfo::release_name() {
  // @@protoc_insertion_point(field_release:GroupUserInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupUserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GroupUserInfo.name)
}

// .UserState state = 3;
inline void GroupUserInfo::clear_state() {
  state_ = 0;
}
inline ::UserState GroupUserInfo::_internal_state() const {
  return static_cast< ::UserState >(state_);
}
inline ::UserState GroupUserInfo::state() const {
  // @@protoc_insertion_point(field_get:GroupUserInfo.state)
  return _internal_state();
}
inline void GroupUserInfo::_internal_set_state(::UserState value) {
  
  state_ = value;
}
inline void GroupUserInfo::set_state(::UserState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:GroupUserInfo.state)
}

// .GroupUserRole role = 4;
inline void GroupUserInfo::clear_role() {
  role_ = 0;
}
inline ::GroupUserRole GroupUserInfo::_internal_role() const {
  return static_cast< ::GroupUserRole >(role_);
}
inline ::GroupUserRole GroupUserInfo::role() const {
  // @@protoc_insertion_point(field_get:GroupUserInfo.role)
  return _internal_role();
}
inline void GroupUserInfo::_internal_set_role(::GroupUserRole value) {
  
  role_ = value;
}
inline void GroupUserInfo::set_role(::GroupUserRole value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:GroupUserInfo.role)
}

// -------------------------------------------------------------------

// GroupInfo

// int32 id = 1;
inline void GroupInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupInfo::id() const {
  // @@protoc_insertion_point(field_get:GroupInfo.id)
  return _internal_id();
}
inline void GroupInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void GroupInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:GroupInfo.id)
}

// bytes name = 2;
inline void GroupInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupInfo::name() const {
  // @@protoc_insertion_point(field_get:GroupInfo.name)
  return _internal_name();
}
inline void GroupInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:GroupInfo.name)
}
inline std::string* GroupInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:GroupInfo.name)
  return _internal_mutable_name();
}
inline const std::string& GroupInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void GroupInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupInfo.name)
}
inline void GroupInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupInfo.name)
}
inline void GroupInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupInfo.name)
}
inline std::string* GroupInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupInfo::release_name() {
  // @@protoc_insertion_point(field_release:GroupInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GroupInfo.name)
}

// bytes desc = 3;
inline void GroupInfo::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupInfo::desc() const {
  // @@protoc_insertion_point(field_get:GroupInfo.desc)
  return _internal_desc();
}
inline void GroupInfo::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:GroupInfo.desc)
}
inline std::string* GroupInfo::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:GroupInfo.desc)
  return _internal_mutable_desc();
}
inline const std::string& GroupInfo::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void GroupInfo::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupInfo::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupInfo.desc)
}
inline void GroupInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupInfo.desc)
}
inline void GroupInfo::set_desc(const void* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupInfo.desc)
}
inline std::string* GroupInfo::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupInfo::release_desc() {
  // @@protoc_insertion_point(field_release:GroupInfo.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:GroupInfo.desc)
}

// repeated .GroupUserInfo users = 4;
inline int GroupInfo::_internal_users_size() const {
  return users_.size();
}
inline int GroupInfo::users_size() const {
  return _internal_users_size();
}
inline void GroupInfo::clear_users() {
  users_.Clear();
}
inline ::GroupUserInfo* GroupInfo::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:GroupInfo.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupUserInfo >*
GroupInfo::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:GroupInfo.users)
  return &users_;
}
inline const ::GroupUserInfo& GroupInfo::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::GroupUserInfo& GroupInfo::users(int index) const {
  // @@protoc_insertion_point(field_get:GroupInfo.users)
  return _internal_users(index);
}
inline ::GroupUserInfo* GroupInfo::_internal_add_users() {
  return users_.Add();
}
inline ::GroupUserInfo* GroupInfo::add_users() {
  // @@protoc_insertion_point(field_add:GroupInfo.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupUserInfo >&
GroupInfo::users() const {
  // @@protoc_insertion_point(field_list:GroupInfo.users)
  return users_;
}

// -------------------------------------------------------------------

// AddGroupRequest

// int32 user_id = 1;
inline void AddGroupRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroupRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroupRequest::user_id() const {
  // @@protoc_insertion_point(field_get:AddGroupRequest.user_id)
  return _internal_user_id();
}
inline void AddGroupRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void AddGroupRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:AddGroupRequest.user_id)
}

// int32 group_id = 2;
inline void AddGroupRequest::clear_group_id() {
  group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroupRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:AddGroupRequest.group_id)
  return _internal_group_id();
}
inline void AddGroupRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_id_ = value;
}
inline void AddGroupRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:AddGroupRequest.group_id)
}

// -------------------------------------------------------------------

// AddGroupResponse

// int32 ret_code = 1;
inline void AddGroupResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroupResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroupResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:AddGroupResponse.ret_code)
  return _internal_ret_code();
}
inline void AddGroupResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void AddGroupResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:AddGroupResponse.ret_code)
}

// string res_info = 2;
inline void AddGroupResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddGroupResponse::res_info() const {
  // @@protoc_insertion_point(field_get:AddGroupResponse.res_info)
  return _internal_res_info();
}
inline void AddGroupResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:AddGroupResponse.res_info)
}
inline std::string* AddGroupResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:AddGroupResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& AddGroupResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void AddGroupResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddGroupResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddGroupResponse.res_info)
}
inline void AddGroupResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddGroupResponse.res_info)
}
inline void AddGroupResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddGroupResponse.res_info)
}
inline std::string* AddGroupResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddGroupResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:AddGroupResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddGroupResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:AddGroupResponse.res_info)
}

// -------------------------------------------------------------------

// CreateGroupRequest

// int32 user_id = 1;
inline void CreateGroupRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateGroupRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateGroupRequest::user_id() const {
  // @@protoc_insertion_point(field_get:CreateGroupRequest.user_id)
  return _internal_user_id();
}
inline void CreateGroupRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void CreateGroupRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CreateGroupRequest.user_id)
}

// bytes group_name = 2;
inline void CreateGroupRequest::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateGroupRequest::group_name() const {
  // @@protoc_insertion_point(field_get:CreateGroupRequest.group_name)
  return _internal_group_name();
}
inline void CreateGroupRequest::set_group_name(const std::string& value) {
  _internal_set_group_name(value);
  // @@protoc_insertion_point(field_set:CreateGroupRequest.group_name)
}
inline std::string* CreateGroupRequest::mutable_group_name() {
  // @@protoc_insertion_point(field_mutable:CreateGroupRequest.group_name)
  return _internal_mutable_group_name();
}
inline const std::string& CreateGroupRequest::_internal_group_name() const {
  return group_name_.GetNoArena();
}
inline void CreateGroupRequest::_internal_set_group_name(const std::string& value) {
  
  group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateGroupRequest::set_group_name(std::string&& value) {
  
  group_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateGroupRequest.group_name)
}
inline void CreateGroupRequest::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateGroupRequest.group_name)
}
inline void CreateGroupRequest::set_group_name(const void* value, size_t size) {
  
  group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateGroupRequest.group_name)
}
inline std::string* CreateGroupRequest::_internal_mutable_group_name() {
  
  return group_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateGroupRequest::release_group_name() {
  // @@protoc_insertion_point(field_release:CreateGroupRequest.group_name)
  
  return group_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupRequest::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:CreateGroupRequest.group_name)
}

// bytes group_desc = 3;
inline void CreateGroupRequest::clear_group_desc() {
  group_desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateGroupRequest::group_desc() const {
  // @@protoc_insertion_point(field_get:CreateGroupRequest.group_desc)
  return _internal_group_desc();
}
inline void CreateGroupRequest::set_group_desc(const std::string& value) {
  _internal_set_group_desc(value);
  // @@protoc_insertion_point(field_set:CreateGroupRequest.group_desc)
}
inline std::string* CreateGroupRequest::mutable_group_desc() {
  // @@protoc_insertion_point(field_mutable:CreateGroupRequest.group_desc)
  return _internal_mutable_group_desc();
}
inline const std::string& CreateGroupRequest::_internal_group_desc() const {
  return group_desc_.GetNoArena();
}
inline void CreateGroupRequest::_internal_set_group_desc(const std::string& value) {
  
  group_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateGroupRequest::set_group_desc(std::string&& value) {
  
  group_desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateGroupRequest.group_desc)
}
inline void CreateGroupRequest::set_group_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateGroupRequest.group_desc)
}
inline void CreateGroupRequest::set_group_desc(const void* value, size_t size) {
  
  group_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateGroupRequest.group_desc)
}
inline std::string* CreateGroupRequest::_internal_mutable_group_desc() {
  
  return group_desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateGroupRequest::release_group_desc() {
  // @@protoc_insertion_point(field_release:CreateGroupRequest.group_desc)
  
  return group_desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupRequest::set_allocated_group_desc(std::string* group_desc) {
  if (group_desc != nullptr) {
    
  } else {
    
  }
  group_desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_desc);
  // @@protoc_insertion_point(field_set_allocated:CreateGroupRequest.group_desc)
}

// -------------------------------------------------------------------

// CreateGroupResponse

// int32 ret_code = 1;
inline void CreateGroupResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateGroupResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateGroupResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:CreateGroupResponse.ret_code)
  return _internal_ret_code();
}
inline void CreateGroupResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void CreateGroupResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:CreateGroupResponse.ret_code)
}

// string res_info = 2;
inline void CreateGroupResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateGroupResponse::res_info() const {
  // @@protoc_insertion_point(field_get:CreateGroupResponse.res_info)
  return _internal_res_info();
}
inline void CreateGroupResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:CreateGroupResponse.res_info)
}
inline std::string* CreateGroupResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:CreateGroupResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& CreateGroupResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void CreateGroupResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateGroupResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateGroupResponse.res_info)
}
inline void CreateGroupResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateGroupResponse.res_info)
}
inline void CreateGroupResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateGroupResponse.res_info)
}
inline std::string* CreateGroupResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateGroupResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:CreateGroupResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:CreateGroupResponse.res_info)
}

// int32 group_id = 3;
inline void CreateGroupResponse::clear_group_id() {
  group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateGroupResponse::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateGroupResponse::group_id() const {
  // @@protoc_insertion_point(field_get:CreateGroupResponse.group_id)
  return _internal_group_id();
}
inline void CreateGroupResponse::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_id_ = value;
}
inline void CreateGroupResponse::set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:CreateGroupResponse.group_id)
}

// -------------------------------------------------------------------

// QuitGroupRequest

// int32 user_id = 1;
inline void QuitGroupRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuitGroupRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuitGroupRequest::user_id() const {
  // @@protoc_insertion_point(field_get:QuitGroupRequest.user_id)
  return _internal_user_id();
}
inline void QuitGroupRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void QuitGroupRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:QuitGroupRequest.user_id)
}

// int32 group_id = 2;
inline void QuitGroupRequest::clear_group_id() {
  group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuitGroupRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuitGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:QuitGroupRequest.group_id)
  return _internal_group_id();
}
inline void QuitGroupRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_id_ = value;
}
inline void QuitGroupRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:QuitGroupRequest.group_id)
}

// -------------------------------------------------------------------

// QuitGroupResponse

// int32 ret_code = 1;
inline void QuitGroupResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuitGroupResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuitGroupResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:QuitGroupResponse.ret_code)
  return _internal_ret_code();
}
inline void QuitGroupResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void QuitGroupResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:QuitGroupResponse.ret_code)
}

// string res_info = 2;
inline void QuitGroupResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QuitGroupResponse::res_info() const {
  // @@protoc_insertion_point(field_get:QuitGroupResponse.res_info)
  return _internal_res_info();
}
inline void QuitGroupResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:QuitGroupResponse.res_info)
}
inline std::string* QuitGroupResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:QuitGroupResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& QuitGroupResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void QuitGroupResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QuitGroupResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QuitGroupResponse.res_info)
}
inline void QuitGroupResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QuitGroupResponse.res_info)
}
inline void QuitGroupResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QuitGroupResponse.res_info)
}
inline std::string* QuitGroupResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuitGroupResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:QuitGroupResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuitGroupResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:QuitGroupResponse.res_info)
}

// -------------------------------------------------------------------

// GetGroupInfoRequest

// int32 group_id = 1;
inline void GetGroupInfoRequest::clear_group_id() {
  group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupInfoRequest::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupInfoRequest::group_id() const {
  // @@protoc_insertion_point(field_get:GetGroupInfoRequest.group_id)
  return _internal_group_id();
}
inline void GetGroupInfoRequest::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_id_ = value;
}
inline void GetGroupInfoRequest::set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:GetGroupInfoRequest.group_id)
}

// -------------------------------------------------------------------

// GetGroupInfoResponse

// int32 ret_code = 1;
inline void GetGroupInfoResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupInfoResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupInfoResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:GetGroupInfoResponse.ret_code)
  return _internal_ret_code();
}
inline void GetGroupInfoResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void GetGroupInfoResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:GetGroupInfoResponse.ret_code)
}

// string res_info = 2;
inline void GetGroupInfoResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetGroupInfoResponse::res_info() const {
  // @@protoc_insertion_point(field_get:GetGroupInfoResponse.res_info)
  return _internal_res_info();
}
inline void GetGroupInfoResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:GetGroupInfoResponse.res_info)
}
inline std::string* GetGroupInfoResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:GetGroupInfoResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& GetGroupInfoResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void GetGroupInfoResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetGroupInfoResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetGroupInfoResponse.res_info)
}
inline void GetGroupInfoResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetGroupInfoResponse.res_info)
}
inline void GetGroupInfoResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetGroupInfoResponse.res_info)
}
inline std::string* GetGroupInfoResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetGroupInfoResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:GetGroupInfoResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetGroupInfoResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:GetGroupInfoResponse.res_info)
}

// .GroupInfo group_info = 3;
inline bool GetGroupInfoResponse::_internal_has_group_info() const {
  return this != internal_default_instance() && group_info_ != nullptr;
}
inline bool GetGroupInfoResponse::has_group_info() const {
  return _internal_has_group_info();
}
inline void GetGroupInfoResponse::clear_group_info() {
  if (GetArenaNoVirtual() == nullptr && group_info_ != nullptr) {
    delete group_info_;
  }
  group_info_ = nullptr;
}
inline const ::GroupInfo& GetGroupInfoResponse::_internal_group_info() const {
  const ::GroupInfo* p = group_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GroupInfo*>(
      &::_GroupInfo_default_instance_);
}
inline const ::GroupInfo& GetGroupInfoResponse::group_info() const {
  // @@protoc_insertion_point(field_get:GetGroupInfoResponse.group_info)
  return _internal_group_info();
}
inline ::GroupInfo* GetGroupInfoResponse::release_group_info() {
  // @@protoc_insertion_point(field_release:GetGroupInfoResponse.group_info)
  
  ::GroupInfo* temp = group_info_;
  group_info_ = nullptr;
  return temp;
}
inline ::GroupInfo* GetGroupInfoResponse::_internal_mutable_group_info() {
  
  if (group_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::GroupInfo>(GetArenaNoVirtual());
    group_info_ = p;
  }
  return group_info_;
}
inline ::GroupInfo* GetGroupInfoResponse::mutable_group_info() {
  // @@protoc_insertion_point(field_mutable:GetGroupInfoResponse.group_info)
  return _internal_mutable_group_info();
}
inline void GetGroupInfoResponse::set_allocated_group_info(::GroupInfo* group_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete group_info_;
  }
  if (group_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      group_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_info, submessage_arena);
    }
    
  } else {
    
  }
  group_info_ = group_info;
  // @@protoc_insertion_point(field_set_allocated:GetGroupInfoResponse.group_info)
}

// -------------------------------------------------------------------

// GetUserGroupsRequest

// int32 user_id = 1;
inline void GetUserGroupsRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserGroupsRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserGroupsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:GetUserGroupsRequest.user_id)
  return _internal_user_id();
}
inline void GetUserGroupsRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void GetUserGroupsRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:GetUserGroupsRequest.user_id)
}

// -------------------------------------------------------------------

// GetUserGroupsResponse

// int32 ret_code = 1;
inline void GetUserGroupsResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserGroupsResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserGroupsResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:GetUserGroupsResponse.ret_code)
  return _internal_ret_code();
}
inline void GetUserGroupsResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void GetUserGroupsResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:GetUserGroupsResponse.ret_code)
}

// string res_info = 2;
inline void GetUserGroupsResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetUserGroupsResponse::res_info() const {
  // @@protoc_insertion_point(field_get:GetUserGroupsResponse.res_info)
  return _internal_res_info();
}
inline void GetUserGroupsResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:GetUserGroupsResponse.res_info)
}
inline std::string* GetUserGroupsResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:GetUserGroupsResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& GetUserGroupsResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void GetUserGroupsResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetUserGroupsResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetUserGroupsResponse.res_info)
}
inline void GetUserGroupsResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetUserGroupsResponse.res_info)
}
inline void GetUserGroupsResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetUserGroupsResponse.res_info)
}
inline std::string* GetUserGroupsResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetUserGroupsResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:GetUserGroupsResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetUserGroupsResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:GetUserGroupsResponse.res_info)
}

// repeated .GroupInfo groups = 3;
inline int GetUserGroupsResponse::_internal_groups_size() const {
  return groups_.size();
}
inline int GetUserGroupsResponse::groups_size() const {
  return _internal_groups_size();
}
inline void GetUserGroupsResponse::clear_groups() {
  groups_.Clear();
}
inline ::GroupInfo* GetUserGroupsResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:GetUserGroupsResponse.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupInfo >*
GetUserGroupsResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:GetUserGroupsResponse.groups)
  return &groups_;
}
inline const ::GroupInfo& GetUserGroupsResponse::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::GroupInfo& GetUserGroupsResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:GetUserGroupsResponse.groups)
  return _internal_groups(index);
}
inline ::GroupInfo* GetUserGroupsResponse::_internal_add_groups() {
  return groups_.Add();
}
inline ::GroupInfo* GetUserGroupsResponse::add_groups() {
  // @@protoc_insertion_point(field_add:GetUserGroupsResponse.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupInfo >&
GetUserGroupsResponse::groups() const {
  // @@protoc_insertion_point(field_list:GetUserGroupsResponse.groups)
  return groups_;
}

// -------------------------------------------------------------------

// LoginRequest

// int32 user_id = 1;
inline void LoginRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::user_id() const {
  // @@protoc_insertion_point(field_get:LoginRequest.user_id)
  return _internal_user_id();
}
inline void LoginRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void LoginRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:LoginRequest.user_id)
}

// bytes user_password = 2;
inline void LoginRequest::clear_user_password() {
  user_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::user_password() const {
  // @@protoc_insertion_point(field_get:LoginRequest.user_password)
  return _internal_user_password();
}
inline void LoginRequest::set_user_password(const std::string& value) {
  _internal_set_user_password(value);
  // @@protoc_insertion_point(field_set:LoginRequest.user_password)
}
inline std::string* LoginRequest::mutable_user_password() {
  // @@protoc_insertion_point(field_mutable:LoginRequest.user_password)
  return _internal_mutable_user_password();
}
inline const std::string& LoginRequest::_internal_user_password() const {
  return user_password_.GetNoArena();
}
inline void LoginRequest::_internal_set_user_password(const std::string& value) {
  
  user_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_user_password(std::string&& value) {
  
  user_password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginRequest.user_password)
}
inline void LoginRequest::set_user_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequest.user_password)
}
inline void LoginRequest::set_user_password(const void* value, size_t size) {
  
  user_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequest.user_password)
}
inline std::string* LoginRequest::_internal_mutable_user_password() {
  
  return user_password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_user_password() {
  // @@protoc_insertion_point(field_release:LoginRequest.user_password)
  
  return user_password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_user_password(std::string* user_password) {
  if (user_password != nullptr) {
    
  } else {
    
  }
  user_password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_password);
  // @@protoc_insertion_point(field_set_allocated:LoginRequest.user_password)
}

// bytes auth_info = 3;
inline void LoginRequest::clear_auth_info() {
  auth_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::auth_info() const {
  // @@protoc_insertion_point(field_get:LoginRequest.auth_info)
  return _internal_auth_info();
}
inline void LoginRequest::set_auth_info(const std::string& value) {
  _internal_set_auth_info(value);
  // @@protoc_insertion_point(field_set:LoginRequest.auth_info)
}
inline std::string* LoginRequest::mutable_auth_info() {
  // @@protoc_insertion_point(field_mutable:LoginRequest.auth_info)
  return _internal_mutable_auth_info();
}
inline const std::string& LoginRequest::_internal_auth_info() const {
  return auth_info_.GetNoArena();
}
inline void LoginRequest::_internal_set_auth_info(const std::string& value) {
  
  auth_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_auth_info(std::string&& value) {
  
  auth_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginRequest.auth_info)
}
inline void LoginRequest::set_auth_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequest.auth_info)
}
inline void LoginRequest::set_auth_info(const void* value, size_t size) {
  
  auth_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequest.auth_info)
}
inline std::string* LoginRequest::_internal_mutable_auth_info() {
  
  return auth_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_auth_info() {
  // @@protoc_insertion_point(field_release:LoginRequest.auth_info)
  
  return auth_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_auth_info(std::string* auth_info) {
  if (auth_info != nullptr) {
    
  } else {
    
  }
  auth_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_info);
  // @@protoc_insertion_point(field_set_allocated:LoginRequest.auth_info)
}

// -------------------------------------------------------------------

// LoginResponse

// int32 ret_code = 1;
inline void LoginResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:LoginResponse.ret_code)
  return _internal_ret_code();
}
inline void LoginResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void LoginResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:LoginResponse.ret_code)
}

// string res_info = 2;
inline void LoginResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginResponse::res_info() const {
  // @@protoc_insertion_point(field_get:LoginResponse.res_info)
  return _internal_res_info();
}
inline void LoginResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:LoginResponse.res_info)
}
inline std::string* LoginResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:LoginResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& LoginResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void LoginResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginResponse.res_info)
}
inline void LoginResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginResponse.res_info)
}
inline void LoginResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginResponse.res_info)
}
inline std::string* LoginResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:LoginResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:LoginResponse.res_info)
}

// -------------------------------------------------------------------

// RegisterRequest

// bytes user_name = 1;
inline void RegisterRequest::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterRequest::user_name() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.user_name)
  return _internal_user_name();
}
inline void RegisterRequest::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:RegisterRequest.user_name)
}
inline std::string* RegisterRequest::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:RegisterRequest.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& RegisterRequest::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void RegisterRequest::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterRequest::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.user_name)
}
inline void RegisterRequest::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterRequest.user_name)
}
inline void RegisterRequest::set_user_name(const void* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.user_name)
}
inline std::string* RegisterRequest::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:RegisterRequest.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.user_name)
}

// bytes user_password = 2;
inline void RegisterRequest::clear_user_password() {
  user_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterRequest::user_password() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.user_password)
  return _internal_user_password();
}
inline void RegisterRequest::set_user_password(const std::string& value) {
  _internal_set_user_password(value);
  // @@protoc_insertion_point(field_set:RegisterRequest.user_password)
}
inline std::string* RegisterRequest::mutable_user_password() {
  // @@protoc_insertion_point(field_mutable:RegisterRequest.user_password)
  return _internal_mutable_user_password();
}
inline const std::string& RegisterRequest::_internal_user_password() const {
  return user_password_.GetNoArena();
}
inline void RegisterRequest::_internal_set_user_password(const std::string& value) {
  
  user_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterRequest::set_user_password(std::string&& value) {
  
  user_password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.user_password)
}
inline void RegisterRequest::set_user_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterRequest.user_password)
}
inline void RegisterRequest::set_user_password(const void* value, size_t size) {
  
  user_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.user_password)
}
inline std::string* RegisterRequest::_internal_mutable_user_password() {
  
  return user_password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterRequest::release_user_password() {
  // @@protoc_insertion_point(field_release:RegisterRequest.user_password)
  
  return user_password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_user_password(std::string* user_password) {
  if (user_password != nullptr) {
    
  } else {
    
  }
  user_password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_password);
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.user_password)
}

// -------------------------------------------------------------------

// RegisterResponse

// int32 ret_code = 1;
inline void RegisterResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:RegisterResponse.ret_code)
  return _internal_ret_code();
}
inline void RegisterResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void RegisterResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:RegisterResponse.ret_code)
}

// string res_info = 2;
inline void RegisterResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterResponse::res_info() const {
  // @@protoc_insertion_point(field_get:RegisterResponse.res_info)
  return _internal_res_info();
}
inline void RegisterResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:RegisterResponse.res_info)
}
inline std::string* RegisterResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:RegisterResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& RegisterResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void RegisterResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterResponse.res_info)
}
inline void RegisterResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterResponse.res_info)
}
inline void RegisterResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterResponse.res_info)
}
inline std::string* RegisterResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:RegisterResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:RegisterResponse.res_info)
}

// int32 user_id = 3;
inline void RegisterResponse::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::user_id() const {
  // @@protoc_insertion_point(field_get:RegisterResponse.user_id)
  return _internal_user_id();
}
inline void RegisterResponse::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void RegisterResponse::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:RegisterResponse.user_id)
}

// -------------------------------------------------------------------

// LogoutRequest

// int32 user_id = 1;
inline void LogoutRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoutRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoutRequest::user_id() const {
  // @@protoc_insertion_point(field_get:LogoutRequest.user_id)
  return _internal_user_id();
}
inline void LogoutRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void LogoutRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:LogoutRequest.user_id)
}

// -------------------------------------------------------------------

// LogoutResponse

// int32 ret_code = 1;
inline void LogoutResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoutResponse::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoutResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:LogoutResponse.ret_code)
  return _internal_ret_code();
}
inline void LogoutResponse::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void LogoutResponse::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:LogoutResponse.ret_code)
}

// string res_info = 2;
inline void LogoutResponse::clear_res_info() {
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogoutResponse::res_info() const {
  // @@protoc_insertion_point(field_get:LogoutResponse.res_info)
  return _internal_res_info();
}
inline void LogoutResponse::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:LogoutResponse.res_info)
}
inline std::string* LogoutResponse::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:LogoutResponse.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& LogoutResponse::_internal_res_info() const {
  return res_info_.GetNoArena();
}
inline void LogoutResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogoutResponse::set_res_info(std::string&& value) {
  
  res_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogoutResponse.res_info)
}
inline void LogoutResponse::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogoutResponse.res_info)
}
inline void LogoutResponse::set_res_info(const char* value, size_t size) {
  
  res_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogoutResponse.res_info)
}
inline std::string* LogoutResponse::_internal_mutable_res_info() {
  
  return res_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogoutResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:LogoutResponse.res_info)
  
  return res_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info);
  // @@protoc_insertion_point(field_set_allocated:LogoutResponse.res_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::UserState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserState>() {
  return ::UserState_descriptor();
}
template <> struct is_proto_enum< ::GroupUserRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GroupUserRole>() {
  return ::GroupUserRole_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProxyService_2eproto
