syntax = "proto3";

option cc_generic_services = true;

message OneChatRequest {
    int32 from_user_id = 1;
    int32 to_user_id = 2;
    bytes msg = 3;
}

message OneChatResponse {
    int32 ret_code = 1;
    string res_info = 2;
}

message GroupChatRequest {
    int32 from_user_id = 1;
    int32 to_group_id = 2;
    bytes msg = 3;
}

message GroupChatResponse {
    int32 ret_code = 1;
    string res_info = 2;
}

message ReadOfflineMessageRequest {
    int32 user_id = 1;
}

message ReadOfflineMessageResponse {
    int32 ret_code = 1;
    string res_info = 2;
    repeated bytes msgs = 3;
}

message SaveOfflineMessageRequest {
    int32 user_id = 1;
    bytes msg = 2;
}

message SaveOfflineMessageResponse {
    int32 ret_code = 1;
    string res_info = 2;
}

service ChatServiceRpc {
    rpc OneChat(OneChatRequest) returns(OneChatResponse);
    rpc GroupChat(GroupChatRequest) returns(GroupChatResponse);
    rpc ReadOfflineMessage(ReadOfflineMessageRequest) returns(ReadOfflineMessageResponse);
    rpc SaveOfflineMessage(SaveOfflineMessageRequest) returns(SaveOfflineMessageResponse);
}

enum UserState {
    ONLINE = 0;
    OFFLINE = 1;
}

message UserInfo {
    int32 id = 1;
    bytes name = 2;
    UserState state = 3;
}

message UserInfoRequest {
    int32 user_id = 1;
}

message UserInfoResponse {
    int32 ret_code = 1;
    string res_info = 2;
    UserInfo user = 3;
}

message FriendListRequest {
    int32 user_id = 1;
}

message FriendListResponse {
    int32 ret_code = 1;
    string res_info = 2;
    repeated UserInfo friends = 3;
}

message AddFriendRequest {
    int32 user_id = 1;
    int32 friend_id = 2;
}

message AddFriendResponse {
    int32 ret_code = 1;
    string res_info = 2;
}

message DeleteFriendRequest {
    int32 user_id = 1;
    int32 friend_id = 2;
}

message DeleteFriendResponse {
    int32 ret_code = 1;
    string res_info = 2;
}

service FriendServiceRpc {
    rpc GetFriendList(FriendListRequest) returns(FriendListResponse);
    rpc GetUserInfo(UserInfoRequest) returns(UserInfoResponse);
    rpc AddFriend(AddFriendRequest) returns(AddFriendResponse);
    rpc DeleteFriend(DeleteFriendRequest) returns(DeleteFriendResponse);
}

enum GroupUserRole {
    CREATOR = 0;
    NORMAL = 1;
}

message GroupUserInfo {
    int32 id = 1;
    bytes name = 2;
    UserState state = 3;
    GroupUserRole role = 4;
}

message GroupInfo {
    int32 id = 1;
    bytes name = 2;
    bytes desc = 3;
    repeated GroupUserInfo users = 4;
}

message AddGroupRequest {
    int32 user_id = 1;
    int32 group_id = 2;
}

message AddGroupResponse {
    int32 ret_code = 1;
    string res_info = 2;
}

message CreateGroupRequest {
    int32 user_id = 1;
    bytes group_name = 2;
    bytes group_desc = 3;
}

message CreateGroupResponse {
    int32 ret_code = 1;
    string res_info = 2;
    int32 group_id = 3;
}

message QuitGroupRequest {
    int32 user_id = 1;
    int32 group_id = 2;
}

message QuitGroupResponse {
    int32 ret_code = 1;
    string res_info = 2;
}

message GetGroupInfoRequest {
    int32 group_id = 1;
}

message GetGroupInfoResponse {
    int32 ret_code = 1;
    string res_info = 2;
    GroupInfo group_info = 3;
}

message GetUserGroupsRequest {
    int32 user_id = 1;
}

message GetUserGroupsResponse {
    int32 ret_code = 1;
    string res_info = 2;
    repeated GroupInfo groups = 3;
}

service GroupServiceRpc {
    rpc AddGroup(AddGroupRequest) returns(AddGroupResponse);
    rpc CreateGroup(CreateGroupRequest) returns(CreateGroupResponse);
    rpc QuitGroup(QuitGroupRequest) returns(QuitGroupResponse);
    rpc GetGroupInfo(GetGroupInfoRequest) returns(GetGroupInfoResponse);
    rpc GetUserGroups(GetUserGroupsRequest) returns(GetUserGroupsResponse);
}

message LoginRequest {
    int32 user_id = 1;
    bytes user_password = 2;
    bytes auth_info = 3;
}

message LoginResponse {
    int32 ret_code = 1;
    string res_info = 2;
}

message RegisterRequest {
    bytes user_name = 1;
    bytes user_password = 2;
}

message RegisterResponse {
    int32 ret_code = 1;
    string res_info = 2;
    int32 user_id = 3;
}

message LogoutRequest {
    int32 user_id = 1;
}

message LogoutResponse {
    int32 ret_code = 1;
    string res_info = 2;
}

service UserServiceRpc {
    rpc Login(LoginRequest) returns(LoginResponse);
    rpc Register(RegisterRequest) returns(RegisterResponse);
    rpc Logout(LogoutRequest) returns(LogoutResponse);
}