// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProxyService.proto

#include "ProxyService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ProxyService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupInfo_ProxyService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProxyService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupUserInfo_ProxyService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProxyService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_ProxyService_2eproto;
class OneChatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OneChatRequest> _instance;
} _OneChatRequest_default_instance_;
class OneChatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OneChatResponse> _instance;
} _OneChatResponse_default_instance_;
class GroupChatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupChatRequest> _instance;
} _GroupChatRequest_default_instance_;
class GroupChatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupChatResponse> _instance;
} _GroupChatResponse_default_instance_;
class ReadOfflineMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadOfflineMessageRequest> _instance;
} _ReadOfflineMessageRequest_default_instance_;
class ReadOfflineMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadOfflineMessageResponse> _instance;
} _ReadOfflineMessageResponse_default_instance_;
class SaveOfflineMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveOfflineMessageRequest> _instance;
} _SaveOfflineMessageRequest_default_instance_;
class SaveOfflineMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveOfflineMessageResponse> _instance;
} _SaveOfflineMessageResponse_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfo> _instance;
} _UserInfo_default_instance_;
class UserInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfoRequest> _instance;
} _UserInfoRequest_default_instance_;
class UserInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfoResponse> _instance;
} _UserInfoResponse_default_instance_;
class FriendListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendListRequest> _instance;
} _FriendListRequest_default_instance_;
class FriendListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendListResponse> _instance;
} _FriendListResponse_default_instance_;
class AddFriendRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFriendRequest> _instance;
} _AddFriendRequest_default_instance_;
class AddFriendResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFriendResponse> _instance;
} _AddFriendResponse_default_instance_;
class DeleteFriendRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteFriendRequest> _instance;
} _DeleteFriendRequest_default_instance_;
class DeleteFriendResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteFriendResponse> _instance;
} _DeleteFriendResponse_default_instance_;
class GroupUserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupUserInfo> _instance;
} _GroupUserInfo_default_instance_;
class GroupInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupInfo> _instance;
} _GroupInfo_default_instance_;
class AddGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddGroupRequest> _instance;
} _AddGroupRequest_default_instance_;
class AddGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddGroupResponse> _instance;
} _AddGroupResponse_default_instance_;
class CreateGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateGroupRequest> _instance;
} _CreateGroupRequest_default_instance_;
class CreateGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateGroupResponse> _instance;
} _CreateGroupResponse_default_instance_;
class QuitGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuitGroupRequest> _instance;
} _QuitGroupRequest_default_instance_;
class QuitGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuitGroupResponse> _instance;
} _QuitGroupResponse_default_instance_;
class GetGroupInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGroupInfoRequest> _instance;
} _GetGroupInfoRequest_default_instance_;
class GetGroupInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGroupInfoResponse> _instance;
} _GetGroupInfoResponse_default_instance_;
class GetUserGroupsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUserGroupsRequest> _instance;
} _GetUserGroupsRequest_default_instance_;
class GetUserGroupsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUserGroupsResponse> _instance;
} _GetUserGroupsResponse_default_instance_;
class LoginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginRequest> _instance;
} _LoginRequest_default_instance_;
class LoginResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginResponse> _instance;
} _LoginResponse_default_instance_;
class RegisterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterRequest> _instance;
} _RegisterRequest_default_instance_;
class RegisterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterResponse> _instance;
} _RegisterResponse_default_instance_;
class LogoutRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogoutRequest> _instance;
} _LogoutRequest_default_instance_;
class LogoutResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogoutResponse> _instance;
} _LogoutResponse_default_instance_;
static void InitDefaultsscc_info_AddFriendRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AddFriendRequest_default_instance_;
    new (ptr) ::AddFriendRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AddFriendRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddFriendRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddFriendRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_AddFriendResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AddFriendResponse_default_instance_;
    new (ptr) ::AddFriendResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AddFriendResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddFriendResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddFriendResponse_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_AddGroupRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AddGroupRequest_default_instance_;
    new (ptr) ::AddGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AddGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddGroupRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddGroupRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_AddGroupResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AddGroupResponse_default_instance_;
    new (ptr) ::AddGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AddGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddGroupResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddGroupResponse_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_CreateGroupRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CreateGroupRequest_default_instance_;
    new (ptr) ::CreateGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CreateGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateGroupRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateGroupRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_CreateGroupResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CreateGroupResponse_default_instance_;
    new (ptr) ::CreateGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CreateGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateGroupResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateGroupResponse_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_DeleteFriendRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeleteFriendRequest_default_instance_;
    new (ptr) ::DeleteFriendRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeleteFriendRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteFriendRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteFriendRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_DeleteFriendResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeleteFriendResponse_default_instance_;
    new (ptr) ::DeleteFriendResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeleteFriendResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteFriendResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteFriendResponse_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_FriendListRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FriendListRequest_default_instance_;
    new (ptr) ::FriendListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FriendListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendListRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FriendListRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_FriendListResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FriendListResponse_default_instance_;
    new (ptr) ::FriendListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FriendListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FriendListResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FriendListResponse_ProxyService_2eproto}, {
      &scc_info_UserInfo_ProxyService_2eproto.base,}};

static void InitDefaultsscc_info_GetGroupInfoRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetGroupInfoRequest_default_instance_;
    new (ptr) ::GetGroupInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetGroupInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetGroupInfoRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetGroupInfoRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_GetGroupInfoResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetGroupInfoResponse_default_instance_;
    new (ptr) ::GetGroupInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetGroupInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetGroupInfoResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetGroupInfoResponse_ProxyService_2eproto}, {
      &scc_info_GroupInfo_ProxyService_2eproto.base,}};

static void InitDefaultsscc_info_GetUserGroupsRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetUserGroupsRequest_default_instance_;
    new (ptr) ::GetUserGroupsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetUserGroupsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUserGroupsRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetUserGroupsRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_GetUserGroupsResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetUserGroupsResponse_default_instance_;
    new (ptr) ::GetUserGroupsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetUserGroupsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetUserGroupsResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetUserGroupsResponse_ProxyService_2eproto}, {
      &scc_info_GroupInfo_ProxyService_2eproto.base,}};

static void InitDefaultsscc_info_GroupChatRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GroupChatRequest_default_instance_;
    new (ptr) ::GroupChatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupChatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupChatRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupChatRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_GroupChatResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GroupChatResponse_default_instance_;
    new (ptr) ::GroupChatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupChatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupChatResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupChatResponse_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_GroupInfo_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GroupInfo_default_instance_;
    new (ptr) ::GroupInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupInfo_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GroupInfo_ProxyService_2eproto}, {
      &scc_info_GroupUserInfo_ProxyService_2eproto.base,}};

static void InitDefaultsscc_info_GroupUserInfo_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GroupUserInfo_default_instance_;
    new (ptr) ::GroupUserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupUserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupUserInfo_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupUserInfo_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_LoginRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoginRequest_default_instance_;
    new (ptr) ::LoginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_LoginResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoginResponse_default_instance_;
    new (ptr) ::LoginResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginResponse_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_LogoutRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LogoutRequest_default_instance_;
    new (ptr) ::LogoutRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogoutRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogoutRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogoutRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_LogoutResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LogoutResponse_default_instance_;
    new (ptr) ::LogoutResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogoutResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogoutResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogoutResponse_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_OneChatRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OneChatRequest_default_instance_;
    new (ptr) ::OneChatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OneChatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OneChatRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OneChatRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_OneChatResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OneChatResponse_default_instance_;
    new (ptr) ::OneChatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OneChatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OneChatResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OneChatResponse_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_QuitGroupRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QuitGroupRequest_default_instance_;
    new (ptr) ::QuitGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::QuitGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuitGroupRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QuitGroupRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_QuitGroupResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QuitGroupResponse_default_instance_;
    new (ptr) ::QuitGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::QuitGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuitGroupResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QuitGroupResponse_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_ReadOfflineMessageRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReadOfflineMessageRequest_default_instance_;
    new (ptr) ::ReadOfflineMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReadOfflineMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadOfflineMessageRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadOfflineMessageRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_ReadOfflineMessageResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReadOfflineMessageResponse_default_instance_;
    new (ptr) ::ReadOfflineMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReadOfflineMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadOfflineMessageResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadOfflineMessageResponse_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_RegisterRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterRequest_default_instance_;
    new (ptr) ::RegisterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_RegisterResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterResponse_default_instance_;
    new (ptr) ::RegisterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterResponse_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_SaveOfflineMessageRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SaveOfflineMessageRequest_default_instance_;
    new (ptr) ::SaveOfflineMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SaveOfflineMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaveOfflineMessageRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SaveOfflineMessageRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_SaveOfflineMessageResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SaveOfflineMessageResponse_default_instance_;
    new (ptr) ::SaveOfflineMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SaveOfflineMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaveOfflineMessageResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SaveOfflineMessageResponse_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_UserInfo_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserInfo_default_instance_;
    new (ptr) ::UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfo_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_UserInfoRequest_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserInfoRequest_default_instance_;
    new (ptr) ::UserInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfoRequest_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfoRequest_ProxyService_2eproto}, {}};

static void InitDefaultsscc_info_UserInfoResponse_ProxyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserInfoResponse_default_instance_;
    new (ptr) ::UserInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserInfoResponse_ProxyService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserInfoResponse_ProxyService_2eproto}, {
      &scc_info_UserInfo_ProxyService_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ProxyService_2eproto[35];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ProxyService_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_ProxyService_2eproto[4];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ProxyService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OneChatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OneChatRequest, from_user_id_),
  PROTOBUF_FIELD_OFFSET(::OneChatRequest, to_user_id_),
  PROTOBUF_FIELD_OFFSET(::OneChatRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OneChatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OneChatResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::OneChatResponse, res_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupChatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupChatRequest, from_user_id_),
  PROTOBUF_FIELD_OFFSET(::GroupChatRequest, to_group_id_),
  PROTOBUF_FIELD_OFFSET(::GroupChatRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupChatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupChatResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::GroupChatResponse, res_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReadOfflineMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReadOfflineMessageRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReadOfflineMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReadOfflineMessageResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::ReadOfflineMessageResponse, res_info_),
  PROTOBUF_FIELD_OFFSET(::ReadOfflineMessageResponse, msgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SaveOfflineMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SaveOfflineMessageRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::SaveOfflineMessageRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SaveOfflineMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SaveOfflineMessageResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::SaveOfflineMessageResponse, res_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserInfo, id_),
  PROTOBUF_FIELD_OFFSET(::UserInfo, name_),
  PROTOBUF_FIELD_OFFSET(::UserInfo, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserInfoRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserInfoResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::UserInfoResponse, res_info_),
  PROTOBUF_FIELD_OFFSET(::UserInfoResponse, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FriendListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FriendListRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FriendListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FriendListResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::FriendListResponse, res_info_),
  PROTOBUF_FIELD_OFFSET(::FriendListResponse, friends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AddFriendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AddFriendRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::AddFriendRequest, friend_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AddFriendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AddFriendResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::AddFriendResponse, res_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeleteFriendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeleteFriendRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::DeleteFriendRequest, friend_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeleteFriendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeleteFriendResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::DeleteFriendResponse, res_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupUserInfo, id_),
  PROTOBUF_FIELD_OFFSET(::GroupUserInfo, name_),
  PROTOBUF_FIELD_OFFSET(::GroupUserInfo, state_),
  PROTOBUF_FIELD_OFFSET(::GroupUserInfo, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupInfo, id_),
  PROTOBUF_FIELD_OFFSET(::GroupInfo, name_),
  PROTOBUF_FIELD_OFFSET(::GroupInfo, desc_),
  PROTOBUF_FIELD_OFFSET(::GroupInfo, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AddGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AddGroupRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::AddGroupRequest, group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AddGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AddGroupResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::AddGroupResponse, res_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CreateGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CreateGroupRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::CreateGroupRequest, group_name_),
  PROTOBUF_FIELD_OFFSET(::CreateGroupRequest, group_desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CreateGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CreateGroupResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::CreateGroupResponse, res_info_),
  PROTOBUF_FIELD_OFFSET(::CreateGroupResponse, group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QuitGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QuitGroupRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::QuitGroupRequest, group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QuitGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QuitGroupResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::QuitGroupResponse, res_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetGroupInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetGroupInfoRequest, group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetGroupInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetGroupInfoResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::GetGroupInfoResponse, res_info_),
  PROTOBUF_FIELD_OFFSET(::GetGroupInfoResponse, group_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetUserGroupsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetUserGroupsRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetUserGroupsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetUserGroupsResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::GetUserGroupsResponse, res_info_),
  PROTOBUF_FIELD_OFFSET(::GetUserGroupsResponse, groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::LoginRequest, user_password_),
  PROTOBUF_FIELD_OFFSET(::LoginRequest, auth_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::LoginResponse, res_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegisterRequest, user_name_),
  PROTOBUF_FIELD_OFFSET(::RegisterRequest, user_password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegisterResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::RegisterResponse, res_info_),
  PROTOBUF_FIELD_OFFSET(::RegisterResponse, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogoutRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogoutResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::LogoutResponse, res_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::OneChatRequest)},
  { 8, -1, sizeof(::OneChatResponse)},
  { 15, -1, sizeof(::GroupChatRequest)},
  { 23, -1, sizeof(::GroupChatResponse)},
  { 30, -1, sizeof(::ReadOfflineMessageRequest)},
  { 36, -1, sizeof(::ReadOfflineMessageResponse)},
  { 44, -1, sizeof(::SaveOfflineMessageRequest)},
  { 51, -1, sizeof(::SaveOfflineMessageResponse)},
  { 58, -1, sizeof(::UserInfo)},
  { 66, -1, sizeof(::UserInfoRequest)},
  { 72, -1, sizeof(::UserInfoResponse)},
  { 80, -1, sizeof(::FriendListRequest)},
  { 86, -1, sizeof(::FriendListResponse)},
  { 94, -1, sizeof(::AddFriendRequest)},
  { 101, -1, sizeof(::AddFriendResponse)},
  { 108, -1, sizeof(::DeleteFriendRequest)},
  { 115, -1, sizeof(::DeleteFriendResponse)},
  { 122, -1, sizeof(::GroupUserInfo)},
  { 131, -1, sizeof(::GroupInfo)},
  { 140, -1, sizeof(::AddGroupRequest)},
  { 147, -1, sizeof(::AddGroupResponse)},
  { 154, -1, sizeof(::CreateGroupRequest)},
  { 162, -1, sizeof(::CreateGroupResponse)},
  { 170, -1, sizeof(::QuitGroupRequest)},
  { 177, -1, sizeof(::QuitGroupResponse)},
  { 184, -1, sizeof(::GetGroupInfoRequest)},
  { 190, -1, sizeof(::GetGroupInfoResponse)},
  { 198, -1, sizeof(::GetUserGroupsRequest)},
  { 204, -1, sizeof(::GetUserGroupsResponse)},
  { 212, -1, sizeof(::LoginRequest)},
  { 220, -1, sizeof(::LoginResponse)},
  { 227, -1, sizeof(::RegisterRequest)},
  { 234, -1, sizeof(::RegisterResponse)},
  { 242, -1, sizeof(::LogoutRequest)},
  { 248, -1, sizeof(::LogoutResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OneChatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OneChatResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GroupChatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GroupChatResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReadOfflineMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReadOfflineMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SaveOfflineMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SaveOfflineMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FriendListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FriendListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AddFriendRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AddFriendResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeleteFriendRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeleteFriendResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GroupUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GroupInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AddGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AddGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CreateGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CreateGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QuitGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QuitGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetGroupInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetGroupInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetUserGroupsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetUserGroupsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LoginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LoginResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegisterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegisterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LogoutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LogoutResponse_default_instance_),
};

const char descriptor_table_protodef_ProxyService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022ProxyService.proto\"G\n\016OneChatRequest\022\024"
  "\n\014from_user_id\030\001 \001(\005\022\022\n\nto_user_id\030\002 \001(\005"
  "\022\013\n\003msg\030\003 \001(\014\"5\n\017OneChatResponse\022\020\n\010ret_"
  "code\030\001 \001(\005\022\020\n\010res_info\030\002 \001(\t\"J\n\020GroupCha"
  "tRequest\022\024\n\014from_user_id\030\001 \001(\005\022\023\n\013to_gro"
  "up_id\030\002 \001(\005\022\013\n\003msg\030\003 \001(\014\"7\n\021GroupChatRes"
  "ponse\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010res_info\030\002 \001("
  "\t\",\n\031ReadOfflineMessageRequest\022\017\n\007user_i"
  "d\030\001 \001(\005\"N\n\032ReadOfflineMessageResponse\022\020\n"
  "\010ret_code\030\001 \001(\005\022\020\n\010res_info\030\002 \001(\t\022\014\n\004msg"
  "s\030\003 \003(\014\"9\n\031SaveOfflineMessageRequest\022\017\n\007"
  "user_id\030\001 \001(\005\022\013\n\003msg\030\002 \001(\014\"@\n\032SaveOfflin"
  "eMessageResponse\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010re"
  "s_info\030\002 \001(\t\"\?\n\010UserInfo\022\n\n\002id\030\001 \001(\005\022\014\n\004"
  "name\030\002 \001(\014\022\031\n\005state\030\003 \001(\0162\n.UserState\"\"\n"
  "\017UserInfoRequest\022\017\n\007user_id\030\001 \001(\005\"O\n\020Use"
  "rInfoResponse\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010res_i"
  "nfo\030\002 \001(\t\022\027\n\004user\030\003 \001(\0132\t.UserInfo\"$\n\021Fr"
  "iendListRequest\022\017\n\007user_id\030\001 \001(\005\"T\n\022Frie"
  "ndListResponse\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010res_"
  "info\030\002 \001(\t\022\032\n\007friends\030\003 \003(\0132\t.UserInfo\"6"
  "\n\020AddFriendRequest\022\017\n\007user_id\030\001 \001(\005\022\021\n\tf"
  "riend_id\030\002 \001(\005\"7\n\021AddFriendResponse\022\020\n\010r"
  "et_code\030\001 \001(\005\022\020\n\010res_info\030\002 \001(\t\"9\n\023Delet"
  "eFriendRequest\022\017\n\007user_id\030\001 \001(\005\022\021\n\tfrien"
  "d_id\030\002 \001(\005\":\n\024DeleteFriendResponse\022\020\n\010re"
  "t_code\030\001 \001(\005\022\020\n\010res_info\030\002 \001(\t\"b\n\rGroupU"
  "serInfo\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\022\031\n\005sta"
  "te\030\003 \001(\0162\n.UserState\022\034\n\004role\030\004 \001(\0162\016.Gro"
  "upUserRole\"R\n\tGroupInfo\022\n\n\002id\030\001 \001(\005\022\014\n\004n"
  "ame\030\002 \001(\014\022\014\n\004desc\030\003 \001(\014\022\035\n\005users\030\004 \003(\0132\016"
  ".GroupUserInfo\"4\n\017AddGroupRequest\022\017\n\007use"
  "r_id\030\001 \001(\005\022\020\n\010group_id\030\002 \001(\005\"6\n\020AddGroup"
  "Response\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010res_info\030\002"
  " \001(\t\"M\n\022CreateGroupRequest\022\017\n\007user_id\030\001 "
  "\001(\005\022\022\n\ngroup_name\030\002 \001(\014\022\022\n\ngroup_desc\030\003 "
  "\001(\014\"K\n\023CreateGroupResponse\022\020\n\010ret_code\030\001"
  " \001(\005\022\020\n\010res_info\030\002 \001(\t\022\020\n\010group_id\030\003 \001(\005"
  "\"5\n\020QuitGroupRequest\022\017\n\007user_id\030\001 \001(\005\022\020\n"
  "\010group_id\030\002 \001(\005\"7\n\021QuitGroupResponse\022\020\n\010"
  "ret_code\030\001 \001(\005\022\020\n\010res_info\030\002 \001(\t\"\'\n\023GetG"
  "roupInfoRequest\022\020\n\010group_id\030\001 \001(\005\"Z\n\024Get"
  "GroupInfoResponse\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010r"
  "es_info\030\002 \001(\t\022\036\n\ngroup_info\030\003 \001(\0132\n.Grou"
  "pInfo\"\'\n\024GetUserGroupsRequest\022\017\n\007user_id"
  "\030\001 \001(\005\"W\n\025GetUserGroupsResponse\022\020\n\010ret_c"
  "ode\030\001 \001(\005\022\020\n\010res_info\030\002 \001(\t\022\032\n\006groups\030\003 "
  "\003(\0132\n.GroupInfo\"I\n\014LoginRequest\022\017\n\007user_"
  "id\030\001 \001(\005\022\025\n\ruser_password\030\002 \001(\014\022\021\n\tauth_"
  "info\030\003 \001(\014\"3\n\rLoginResponse\022\020\n\010ret_code\030"
  "\001 \001(\005\022\020\n\010res_info\030\002 \001(\t\";\n\017RegisterReque"
  "st\022\021\n\tuser_name\030\001 \001(\014\022\025\n\ruser_password\030\002"
  " \001(\014\"G\n\020RegisterResponse\022\020\n\010ret_code\030\001 \001"
  "(\005\022\020\n\010res_info\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\005\" \n"
  "\rLogoutRequest\022\017\n\007user_id\030\001 \001(\005\"4\n\016Logou"
  "tResponse\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010res_info\030"
  "\002 \001(\t*$\n\tUserState\022\n\n\006ONLINE\020\000\022\013\n\007OFFLIN"
  "E\020\001*(\n\rGroupUserRole\022\013\n\007CREATOR\020\000\022\n\n\006NOR"
  "MAL\020\0012\220\002\n\016ChatServiceRpc\022,\n\007OneChat\022\017.On"
  "eChatRequest\032\020.OneChatResponse\0222\n\tGroupC"
  "hat\022\021.GroupChatRequest\032\022.GroupChatRespon"
  "se\022M\n\022ReadOfflineMessage\022\032.ReadOfflineMe"
  "ssageRequest\032\033.ReadOfflineMessageRespons"
  "e\022M\n\022SaveOfflineMessage\022\032.SaveOfflineMes"
  "sageRequest\032\033.SaveOfflineMessageResponse"
  "2\361\001\n\020FriendServiceRpc\0228\n\rGetFriendList\022\022"
  ".FriendListRequest\032\023.FriendListResponse\022"
  "2\n\013GetUserInfo\022\020.UserInfoRequest\032\021.UserI"
  "nfoResponse\0222\n\tAddFriend\022\021.AddFriendRequ"
  "est\032\022.AddFriendResponse\022;\n\014DeleteFriend\022"
  "\024.DeleteFriendRequest\032\025.DeleteFriendResp"
  "onse2\255\002\n\017GroupServiceRpc\022/\n\010AddGroup\022\020.A"
  "ddGroupRequest\032\021.AddGroupResponse\0228\n\013Cre"
  "ateGroup\022\023.CreateGroupRequest\032\024.CreateGr"
  "oupResponse\0222\n\tQuitGroup\022\021.QuitGroupRequ"
  "est\032\022.QuitGroupResponse\022;\n\014GetGroupInfo\022"
  "\024.GetGroupInfoRequest\032\025.GetGroupInfoResp"
  "onse\022>\n\rGetUserGroups\022\025.GetUserGroupsReq"
  "uest\032\026.GetUserGroupsResponse2\224\001\n\016UserSer"
  "viceRpc\022&\n\005Login\022\r.LoginRequest\032\016.LoginR"
  "esponse\022/\n\010Register\022\020.RegisterRequest\032\021."
  "RegisterResponse\022)\n\006Logout\022\016.LogoutReque"
  "st\032\017.LogoutResponseB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ProxyService_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ProxyService_2eproto_sccs[35] = {
  &scc_info_AddFriendRequest_ProxyService_2eproto.base,
  &scc_info_AddFriendResponse_ProxyService_2eproto.base,
  &scc_info_AddGroupRequest_ProxyService_2eproto.base,
  &scc_info_AddGroupResponse_ProxyService_2eproto.base,
  &scc_info_CreateGroupRequest_ProxyService_2eproto.base,
  &scc_info_CreateGroupResponse_ProxyService_2eproto.base,
  &scc_info_DeleteFriendRequest_ProxyService_2eproto.base,
  &scc_info_DeleteFriendResponse_ProxyService_2eproto.base,
  &scc_info_FriendListRequest_ProxyService_2eproto.base,
  &scc_info_FriendListResponse_ProxyService_2eproto.base,
  &scc_info_GetGroupInfoRequest_ProxyService_2eproto.base,
  &scc_info_GetGroupInfoResponse_ProxyService_2eproto.base,
  &scc_info_GetUserGroupsRequest_ProxyService_2eproto.base,
  &scc_info_GetUserGroupsResponse_ProxyService_2eproto.base,
  &scc_info_GroupChatRequest_ProxyService_2eproto.base,
  &scc_info_GroupChatResponse_ProxyService_2eproto.base,
  &scc_info_GroupInfo_ProxyService_2eproto.base,
  &scc_info_GroupUserInfo_ProxyService_2eproto.base,
  &scc_info_LoginRequest_ProxyService_2eproto.base,
  &scc_info_LoginResponse_ProxyService_2eproto.base,
  &scc_info_LogoutRequest_ProxyService_2eproto.base,
  &scc_info_LogoutResponse_ProxyService_2eproto.base,
  &scc_info_OneChatRequest_ProxyService_2eproto.base,
  &scc_info_OneChatResponse_ProxyService_2eproto.base,
  &scc_info_QuitGroupRequest_ProxyService_2eproto.base,
  &scc_info_QuitGroupResponse_ProxyService_2eproto.base,
  &scc_info_ReadOfflineMessageRequest_ProxyService_2eproto.base,
  &scc_info_ReadOfflineMessageResponse_ProxyService_2eproto.base,
  &scc_info_RegisterRequest_ProxyService_2eproto.base,
  &scc_info_RegisterResponse_ProxyService_2eproto.base,
  &scc_info_SaveOfflineMessageRequest_ProxyService_2eproto.base,
  &scc_info_SaveOfflineMessageResponse_ProxyService_2eproto.base,
  &scc_info_UserInfo_ProxyService_2eproto.base,
  &scc_info_UserInfoRequest_ProxyService_2eproto.base,
  &scc_info_UserInfoResponse_ProxyService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ProxyService_2eproto_once;
static bool descriptor_table_ProxyService_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProxyService_2eproto = {
  &descriptor_table_ProxyService_2eproto_initialized, descriptor_table_protodef_ProxyService_2eproto, "ProxyService.proto", 3312,
  &descriptor_table_ProxyService_2eproto_once, descriptor_table_ProxyService_2eproto_sccs, descriptor_table_ProxyService_2eproto_deps, 35, 0,
  schemas, file_default_instances, TableStruct_ProxyService_2eproto::offsets,
  file_level_metadata_ProxyService_2eproto, 35, file_level_enum_descriptors_ProxyService_2eproto, file_level_service_descriptors_ProxyService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ProxyService_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ProxyService_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProxyService_2eproto);
  return file_level_enum_descriptors_ProxyService_2eproto[0];
}
bool UserState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupUserRole_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProxyService_2eproto);
  return file_level_enum_descriptors_ProxyService_2eproto[1];
}
bool GroupUserRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void OneChatRequest::InitAsDefaultInstance() {
}
class OneChatRequest::_Internal {
 public:
};

OneChatRequest::OneChatRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneChatRequest)
}
OneChatRequest::OneChatRequest(const OneChatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&from_user_id_, &from.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_user_id_) -
    reinterpret_cast<char*>(&from_user_id_)) + sizeof(to_user_id_));
  // @@protoc_insertion_point(copy_constructor:OneChatRequest)
}

void OneChatRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OneChatRequest_ProxyService_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_user_id_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(to_user_id_));
}

OneChatRequest::~OneChatRequest() {
  // @@protoc_insertion_point(destructor:OneChatRequest)
  SharedDtor();
}

void OneChatRequest::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OneChatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OneChatRequest& OneChatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OneChatRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void OneChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:OneChatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_user_id_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(to_user_id_));
  _internal_metadata_.Clear();
}

const char* OneChatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OneChatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OneChatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from_user_id(), target);
  }

  // int32 to_user_id = 2;
  if (this->to_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to_user_id(), target);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneChatRequest)
  return target;
}

size_t OneChatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneChatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from_user_id());
  }

  // int32 to_user_id = 2;
  if (this->to_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OneChatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneChatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OneChatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OneChatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneChatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneChatRequest)
    MergeFrom(*source);
  }
}

void OneChatRequest::MergeFrom(const OneChatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneChatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.from_user_id() != 0) {
    _internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from.to_user_id() != 0) {
    _internal_set_to_user_id(from._internal_to_user_id());
  }
}

void OneChatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneChatRequest::CopyFrom(const OneChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneChatRequest::IsInitialized() const {
  return true;
}

void OneChatRequest::InternalSwap(OneChatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(from_user_id_, other->from_user_id_);
  swap(to_user_id_, other->to_user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OneChatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OneChatResponse::InitAsDefaultInstance() {
}
class OneChatResponse::_Internal {
 public:
};

OneChatResponse::OneChatResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneChatResponse)
}
OneChatResponse::OneChatResponse(const OneChatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:OneChatResponse)
}

void OneChatResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OneChatResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

OneChatResponse::~OneChatResponse() {
  // @@protoc_insertion_point(destructor:OneChatResponse)
  SharedDtor();
}

void OneChatResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OneChatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OneChatResponse& OneChatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OneChatResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void OneChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:OneChatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* OneChatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OneChatResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OneChatResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OneChatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OneChatResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneChatResponse)
  return target;
}

size_t OneChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneChatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OneChatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OneChatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OneChatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneChatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneChatResponse)
    MergeFrom(*source);
  }
}

void OneChatResponse::MergeFrom(const OneChatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void OneChatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneChatResponse::CopyFrom(const OneChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneChatResponse::IsInitialized() const {
  return true;
}

void OneChatResponse::InternalSwap(OneChatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OneChatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupChatRequest::InitAsDefaultInstance() {
}
class GroupChatRequest::_Internal {
 public:
};

GroupChatRequest::GroupChatRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupChatRequest)
}
GroupChatRequest::GroupChatRequest(const GroupChatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&from_user_id_, &from.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_group_id_) -
    reinterpret_cast<char*>(&from_user_id_)) + sizeof(to_group_id_));
  // @@protoc_insertion_point(copy_constructor:GroupChatRequest)
}

void GroupChatRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupChatRequest_ProxyService_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_group_id_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(to_group_id_));
}

GroupChatRequest::~GroupChatRequest() {
  // @@protoc_insertion_point(destructor:GroupChatRequest)
  SharedDtor();
}

void GroupChatRequest::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupChatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupChatRequest& GroupChatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupChatRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void GroupChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupChatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_group_id_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(to_group_id_));
  _internal_metadata_.Clear();
}

const char* GroupChatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupChatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupChatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from_user_id(), target);
  }

  // int32 to_group_id = 2;
  if (this->to_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to_group_id(), target);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupChatRequest)
  return target;
}

size_t GroupChatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupChatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from_user_id());
  }

  // int32 to_group_id = 2;
  if (this->to_group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupChatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupChatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupChatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupChatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupChatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupChatRequest)
    MergeFrom(*source);
  }
}

void GroupChatRequest::MergeFrom(const GroupChatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupChatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.from_user_id() != 0) {
    _internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from.to_group_id() != 0) {
    _internal_set_to_group_id(from._internal_to_group_id());
  }
}

void GroupChatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupChatRequest::CopyFrom(const GroupChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChatRequest::IsInitialized() const {
  return true;
}

void GroupChatRequest::InternalSwap(GroupChatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(from_user_id_, other->from_user_id_);
  swap(to_group_id_, other->to_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupChatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupChatResponse::InitAsDefaultInstance() {
}
class GroupChatResponse::_Internal {
 public:
};

GroupChatResponse::GroupChatResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupChatResponse)
}
GroupChatResponse::GroupChatResponse(const GroupChatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:GroupChatResponse)
}

void GroupChatResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupChatResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

GroupChatResponse::~GroupChatResponse() {
  // @@protoc_insertion_point(destructor:GroupChatResponse)
  SharedDtor();
}

void GroupChatResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupChatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupChatResponse& GroupChatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupChatResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void GroupChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupChatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* GroupChatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GroupChatResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupChatResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupChatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GroupChatResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupChatResponse)
  return target;
}

size_t GroupChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupChatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupChatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupChatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupChatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupChatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupChatResponse)
    MergeFrom(*source);
  }
}

void GroupChatResponse::MergeFrom(const GroupChatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void GroupChatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupChatResponse::CopyFrom(const GroupChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChatResponse::IsInitialized() const {
  return true;
}

void GroupChatResponse::InternalSwap(GroupChatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupChatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadOfflineMessageRequest::InitAsDefaultInstance() {
}
class ReadOfflineMessageRequest::_Internal {
 public:
};

ReadOfflineMessageRequest::ReadOfflineMessageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReadOfflineMessageRequest)
}
ReadOfflineMessageRequest::ReadOfflineMessageRequest(const ReadOfflineMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ReadOfflineMessageRequest)
}

void ReadOfflineMessageRequest::SharedCtor() {
  user_id_ = 0;
}

ReadOfflineMessageRequest::~ReadOfflineMessageRequest() {
  // @@protoc_insertion_point(destructor:ReadOfflineMessageRequest)
  SharedDtor();
}

void ReadOfflineMessageRequest::SharedDtor() {
}

void ReadOfflineMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadOfflineMessageRequest& ReadOfflineMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadOfflineMessageRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void ReadOfflineMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ReadOfflineMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = 0;
  _internal_metadata_.Clear();
}

const char* ReadOfflineMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadOfflineMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadOfflineMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadOfflineMessageRequest)
  return target;
}

size_t ReadOfflineMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReadOfflineMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadOfflineMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReadOfflineMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadOfflineMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadOfflineMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReadOfflineMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReadOfflineMessageRequest)
    MergeFrom(*source);
  }
}

void ReadOfflineMessageRequest::MergeFrom(const ReadOfflineMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReadOfflineMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void ReadOfflineMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReadOfflineMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOfflineMessageRequest::CopyFrom(const ReadOfflineMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReadOfflineMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOfflineMessageRequest::IsInitialized() const {
  return true;
}

void ReadOfflineMessageRequest::InternalSwap(ReadOfflineMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOfflineMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadOfflineMessageResponse::InitAsDefaultInstance() {
}
class ReadOfflineMessageResponse::_Internal {
 public:
};

ReadOfflineMessageResponse::ReadOfflineMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReadOfflineMessageResponse)
}
ReadOfflineMessageResponse::ReadOfflineMessageResponse(const ReadOfflineMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msgs_(from.msgs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:ReadOfflineMessageResponse)
}

void ReadOfflineMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadOfflineMessageResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

ReadOfflineMessageResponse::~ReadOfflineMessageResponse() {
  // @@protoc_insertion_point(destructor:ReadOfflineMessageResponse)
  SharedDtor();
}

void ReadOfflineMessageResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadOfflineMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadOfflineMessageResponse& ReadOfflineMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadOfflineMessageResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void ReadOfflineMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ReadOfflineMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* ReadOfflineMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReadOfflineMessageResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes msgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_msgs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadOfflineMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadOfflineMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReadOfflineMessageResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  // repeated bytes msgs = 3;
  for (int i = 0, n = this->_internal_msgs_size(); i < n; i++) {
    const auto& s = this->_internal_msgs(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadOfflineMessageResponse)
  return target;
}

size_t ReadOfflineMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReadOfflineMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes msgs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(msgs_.size());
  for (int i = 0, n = msgs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      msgs_.Get(i));
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadOfflineMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReadOfflineMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadOfflineMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadOfflineMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReadOfflineMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReadOfflineMessageResponse)
    MergeFrom(*source);
  }
}

void ReadOfflineMessageResponse::MergeFrom(const ReadOfflineMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReadOfflineMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void ReadOfflineMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReadOfflineMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOfflineMessageResponse::CopyFrom(const ReadOfflineMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReadOfflineMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOfflineMessageResponse::IsInitialized() const {
  return true;
}

void ReadOfflineMessageResponse::InternalSwap(ReadOfflineMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msgs_.InternalSwap(&other->msgs_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOfflineMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaveOfflineMessageRequest::InitAsDefaultInstance() {
}
class SaveOfflineMessageRequest::_Internal {
 public:
};

SaveOfflineMessageRequest::SaveOfflineMessageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SaveOfflineMessageRequest)
}
SaveOfflineMessageRequest::SaveOfflineMessageRequest(const SaveOfflineMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:SaveOfflineMessageRequest)
}

void SaveOfflineMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SaveOfflineMessageRequest_ProxyService_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

SaveOfflineMessageRequest::~SaveOfflineMessageRequest() {
  // @@protoc_insertion_point(destructor:SaveOfflineMessageRequest)
  SharedDtor();
}

void SaveOfflineMessageRequest::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SaveOfflineMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveOfflineMessageRequest& SaveOfflineMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveOfflineMessageRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void SaveOfflineMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SaveOfflineMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
  _internal_metadata_.Clear();
}

const char* SaveOfflineMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveOfflineMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaveOfflineMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaveOfflineMessageRequest)
  return target;
}

size_t SaveOfflineMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SaveOfflineMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveOfflineMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SaveOfflineMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveOfflineMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveOfflineMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SaveOfflineMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SaveOfflineMessageRequest)
    MergeFrom(*source);
  }
}

void SaveOfflineMessageRequest::MergeFrom(const SaveOfflineMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SaveOfflineMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void SaveOfflineMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SaveOfflineMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveOfflineMessageRequest::CopyFrom(const SaveOfflineMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SaveOfflineMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveOfflineMessageRequest::IsInitialized() const {
  return true;
}

void SaveOfflineMessageRequest::InternalSwap(SaveOfflineMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveOfflineMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaveOfflineMessageResponse::InitAsDefaultInstance() {
}
class SaveOfflineMessageResponse::_Internal {
 public:
};

SaveOfflineMessageResponse::SaveOfflineMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SaveOfflineMessageResponse)
}
SaveOfflineMessageResponse::SaveOfflineMessageResponse(const SaveOfflineMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:SaveOfflineMessageResponse)
}

void SaveOfflineMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SaveOfflineMessageResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

SaveOfflineMessageResponse::~SaveOfflineMessageResponse() {
  // @@protoc_insertion_point(destructor:SaveOfflineMessageResponse)
  SharedDtor();
}

void SaveOfflineMessageResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SaveOfflineMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveOfflineMessageResponse& SaveOfflineMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveOfflineMessageResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void SaveOfflineMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SaveOfflineMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* SaveOfflineMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SaveOfflineMessageResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveOfflineMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaveOfflineMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SaveOfflineMessageResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaveOfflineMessageResponse)
  return target;
}

size_t SaveOfflineMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SaveOfflineMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveOfflineMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SaveOfflineMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveOfflineMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveOfflineMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SaveOfflineMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SaveOfflineMessageResponse)
    MergeFrom(*source);
  }
}

void SaveOfflineMessageResponse::MergeFrom(const SaveOfflineMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SaveOfflineMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void SaveOfflineMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SaveOfflineMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveOfflineMessageResponse::CopyFrom(const SaveOfflineMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SaveOfflineMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveOfflineMessageResponse::IsInitialized() const {
  return true;
}

void SaveOfflineMessageResponse::InternalSwap(SaveOfflineMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveOfflineMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInfo::InitAsDefaultInstance() {
}
class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:UserInfo)
}

void UserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInfo_ProxyService_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfo_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UserState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::UserState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .UserState state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // .UserState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInfoRequest::InitAsDefaultInstance() {
}
class UserInfoRequest::_Internal {
 public:
};

UserInfoRequest::UserInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserInfoRequest)
}
UserInfoRequest::UserInfoRequest(const UserInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:UserInfoRequest)
}

void UserInfoRequest::SharedCtor() {
  user_id_ = 0;
}

UserInfoRequest::~UserInfoRequest() {
  // @@protoc_insertion_point(destructor:UserInfoRequest)
  SharedDtor();
}

void UserInfoRequest::SharedDtor() {
}

void UserInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfoRequest& UserInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfoRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void UserInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UserInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = 0;
  _internal_metadata_.Clear();
}

const char* UserInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserInfoRequest)
  return target;
}

size_t UserInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserInfoRequest)
    MergeFrom(*source);
  }
}

void UserInfoRequest::MergeFrom(const UserInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void UserInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoRequest::CopyFrom(const UserInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoRequest::IsInitialized() const {
  return true;
}

void UserInfoRequest::InternalSwap(UserInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInfoResponse::InitAsDefaultInstance() {
  ::_UserInfoResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::UserInfo*>(
      ::UserInfo::internal_default_instance());
}
class UserInfoResponse::_Internal {
 public:
  static const ::UserInfo& user(const UserInfoResponse* msg);
};

const ::UserInfo&
UserInfoResponse::_Internal::user(const UserInfoResponse* msg) {
  return *msg->user_;
}
UserInfoResponse::UserInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserInfoResponse)
}
UserInfoResponse::UserInfoResponse(const UserInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from._internal_has_user()) {
    user_ = new ::UserInfo(*from.user_);
  } else {
    user_ = nullptr;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:UserInfoResponse)
}

void UserInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInfoResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&user_)) + sizeof(ret_code_));
}

UserInfoResponse::~UserInfoResponse() {
  // @@protoc_insertion_point(destructor:UserInfoResponse)
  SharedDtor();
}

void UserInfoResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void UserInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfoResponse& UserInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfoResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void UserInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UserInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* UserInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserInfoResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UserInfo user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserInfoResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  // .UserInfo user = 3;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserInfoResponse)
  return target;
}

size_t UserInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // .UserInfo user = 3;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserInfoResponse)
    MergeFrom(*source);
  }
}

void UserInfoResponse::MergeFrom(const UserInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.has_user()) {
    _internal_mutable_user()->::UserInfo::MergeFrom(from._internal_user());
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void UserInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoResponse::CopyFrom(const UserInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoResponse::IsInitialized() const {
  return true;
}

void UserInfoResponse::InternalSwap(UserInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendListRequest::InitAsDefaultInstance() {
}
class FriendListRequest::_Internal {
 public:
};

FriendListRequest::FriendListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendListRequest)
}
FriendListRequest::FriendListRequest(const FriendListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:FriendListRequest)
}

void FriendListRequest::SharedCtor() {
  user_id_ = 0;
}

FriendListRequest::~FriendListRequest() {
  // @@protoc_insertion_point(destructor:FriendListRequest)
  SharedDtor();
}

void FriendListRequest::SharedDtor() {
}

void FriendListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendListRequest& FriendListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendListRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void FriendListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = 0;
  _internal_metadata_.Clear();
}

const char* FriendListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FriendListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendListRequest)
  return target;
}

size_t FriendListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendListRequest)
    MergeFrom(*source);
  }
}

void FriendListRequest::MergeFrom(const FriendListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void FriendListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListRequest::CopyFrom(const FriendListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListRequest::IsInitialized() const {
  return true;
}

void FriendListRequest::InternalSwap(FriendListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendListResponse::InitAsDefaultInstance() {
}
class FriendListResponse::_Internal {
 public:
};

FriendListResponse::FriendListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendListResponse)
}
FriendListResponse::FriendListResponse(const FriendListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:FriendListResponse)
}

void FriendListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FriendListResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

FriendListResponse::~FriendListResponse() {
  // @@protoc_insertion_point(destructor:FriendListResponse)
  SharedDtor();
}

void FriendListResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FriendListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendListResponse& FriendListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendListResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void FriendListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* FriendListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FriendListResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .UserInfo friends = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FriendListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FriendListResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  // repeated .UserInfo friends = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_friends(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendListResponse)
  return target;
}

size_t FriendListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UserInfo friends = 3;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendListResponse)
    MergeFrom(*source);
  }
}

void FriendListResponse::MergeFrom(const FriendListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void FriendListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListResponse::CopyFrom(const FriendListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListResponse::IsInitialized() const {
  return true;
}

void FriendListResponse::InternalSwap(FriendListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  friends_.InternalSwap(&other->friends_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddFriendRequest::InitAsDefaultInstance() {
}
class AddFriendRequest::_Internal {
 public:
};

AddFriendRequest::AddFriendRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddFriendRequest)
}
AddFriendRequest::AddFriendRequest(const AddFriendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&friend_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(friend_id_));
  // @@protoc_insertion_point(copy_constructor:AddFriendRequest)
}

void AddFriendRequest::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friend_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(friend_id_));
}

AddFriendRequest::~AddFriendRequest() {
  // @@protoc_insertion_point(destructor:AddFriendRequest)
  SharedDtor();
}

void AddFriendRequest::SharedDtor() {
}

void AddFriendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFriendRequest& AddFriendRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFriendRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void AddFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AddFriendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friend_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(friend_id_));
  _internal_metadata_.Clear();
}

const char* AddFriendRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 friend_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          friend_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFriendRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddFriendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 friend_id = 2;
  if (this->friend_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_friend_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddFriendRequest)
  return target;
}

size_t AddFriendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddFriendRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 friend_id = 2;
  if (this->friend_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_friend_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriendRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriendRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFriendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddFriendRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddFriendRequest)
    MergeFrom(*source);
  }
}

void AddFriendRequest::MergeFrom(const AddFriendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.friend_id() != 0) {
    _internal_set_friend_id(from._internal_friend_id());
  }
}

void AddFriendRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendRequest::CopyFrom(const AddFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendRequest::IsInitialized() const {
  return true;
}

void AddFriendRequest::InternalSwap(AddFriendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
  swap(friend_id_, other->friend_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriendRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddFriendResponse::InitAsDefaultInstance() {
}
class AddFriendResponse::_Internal {
 public:
};

AddFriendResponse::AddFriendResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddFriendResponse)
}
AddFriendResponse::AddFriendResponse(const AddFriendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:AddFriendResponse)
}

void AddFriendResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddFriendResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

AddFriendResponse::~AddFriendResponse() {
  // @@protoc_insertion_point(destructor:AddFriendResponse)
  SharedDtor();
}

void AddFriendResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddFriendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFriendResponse& AddFriendResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFriendResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void AddFriendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AddFriendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* AddFriendResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AddFriendResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFriendResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddFriendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AddFriendResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddFriendResponse)
  return target;
}

size_t AddFriendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddFriendResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriendResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriendResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFriendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddFriendResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddFriendResponse)
    MergeFrom(*source);
  }
}

void AddFriendResponse::MergeFrom(const AddFriendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void AddFriendResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendResponse::CopyFrom(const AddFriendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendResponse::IsInitialized() const {
  return true;
}

void AddFriendResponse::InternalSwap(AddFriendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriendResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteFriendRequest::InitAsDefaultInstance() {
}
class DeleteFriendRequest::_Internal {
 public:
};

DeleteFriendRequest::DeleteFriendRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeleteFriendRequest)
}
DeleteFriendRequest::DeleteFriendRequest(const DeleteFriendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&friend_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(friend_id_));
  // @@protoc_insertion_point(copy_constructor:DeleteFriendRequest)
}

void DeleteFriendRequest::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friend_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(friend_id_));
}

DeleteFriendRequest::~DeleteFriendRequest() {
  // @@protoc_insertion_point(destructor:DeleteFriendRequest)
  SharedDtor();
}

void DeleteFriendRequest::SharedDtor() {
}

void DeleteFriendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteFriendRequest& DeleteFriendRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteFriendRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void DeleteFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteFriendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friend_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(friend_id_));
  _internal_metadata_.Clear();
}

const char* DeleteFriendRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 friend_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          friend_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteFriendRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeleteFriendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 friend_id = 2;
  if (this->friend_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_friend_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteFriendRequest)
  return target;
}

size_t DeleteFriendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteFriendRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 friend_id = 2;
  if (this->friend_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_friend_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteFriendRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeleteFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteFriendRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteFriendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeleteFriendRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeleteFriendRequest)
    MergeFrom(*source);
  }
}

void DeleteFriendRequest::MergeFrom(const DeleteFriendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeleteFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.friend_id() != 0) {
    _internal_set_friend_id(from._internal_friend_id());
  }
}

void DeleteFriendRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeleteFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriendRequest::CopyFrom(const DeleteFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendRequest::IsInitialized() const {
  return true;
}

void DeleteFriendRequest::InternalSwap(DeleteFriendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
  swap(friend_id_, other->friend_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFriendRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteFriendResponse::InitAsDefaultInstance() {
}
class DeleteFriendResponse::_Internal {
 public:
};

DeleteFriendResponse::DeleteFriendResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeleteFriendResponse)
}
DeleteFriendResponse::DeleteFriendResponse(const DeleteFriendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:DeleteFriendResponse)
}

void DeleteFriendResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteFriendResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

DeleteFriendResponse::~DeleteFriendResponse() {
  // @@protoc_insertion_point(destructor:DeleteFriendResponse)
  SharedDtor();
}

void DeleteFriendResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteFriendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteFriendResponse& DeleteFriendResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteFriendResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void DeleteFriendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteFriendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* DeleteFriendResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DeleteFriendResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteFriendResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeleteFriendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeleteFriendResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteFriendResponse)
  return target;
}

size_t DeleteFriendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteFriendResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteFriendResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeleteFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteFriendResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteFriendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeleteFriendResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeleteFriendResponse)
    MergeFrom(*source);
  }
}

void DeleteFriendResponse::MergeFrom(const DeleteFriendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeleteFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void DeleteFriendResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeleteFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriendResponse::CopyFrom(const DeleteFriendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendResponse::IsInitialized() const {
  return true;
}

void DeleteFriendResponse::InternalSwap(DeleteFriendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFriendResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupUserInfo::InitAsDefaultInstance() {
}
class GroupUserInfo::_Internal {
 public:
};

GroupUserInfo::GroupUserInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupUserInfo)
}
GroupUserInfo::GroupUserInfo(const GroupUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&id_)) + sizeof(role_));
  // @@protoc_insertion_point(copy_constructor:GroupUserInfo)
}

void GroupUserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupUserInfo_ProxyService_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&id_)) + sizeof(role_));
}

GroupUserInfo::~GroupUserInfo() {
  // @@protoc_insertion_point(destructor:GroupUserInfo)
  SharedDtor();
}

void GroupUserInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupUserInfo& GroupUserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupUserInfo_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void GroupUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&id_)) + sizeof(role_));
  _internal_metadata_.Clear();
}

const char* GroupUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UserState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::UserState>(val));
        } else goto handle_unusual;
        continue;
      // .GroupUserRole role = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::GroupUserRole>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .UserState state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // .GroupUserRole role = 4;
  if (this->role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupUserInfo)
  return target;
}

size_t GroupUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupUserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // .UserState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .GroupUserRole role = 4;
  if (this->role() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupUserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupUserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupUserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupUserInfo)
    MergeFrom(*source);
  }
}

void GroupUserInfo::MergeFrom(const GroupUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.role() != 0) {
    _internal_set_role(from._internal_role());
  }
}

void GroupUserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUserInfo::CopyFrom(const GroupUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUserInfo::IsInitialized() const {
  return true;
}

void GroupUserInfo::InternalSwap(GroupUserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(state_, other->state_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupUserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupInfo::InitAsDefaultInstance() {
}
class GroupInfo::_Internal {
 public:
};

GroupInfo::GroupInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupInfo)
}
GroupInfo::GroupInfo(const GroupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:GroupInfo)
}

void GroupInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupInfo_ProxyService_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

GroupInfo::~GroupInfo() {
  // @@protoc_insertion_point(destructor:GroupInfo)
  SharedDtor();
}

void GroupInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupInfo& GroupInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupInfo_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void GroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

const char* GroupInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GroupUserInfo users = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes desc = 3;
  if (this->desc().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_desc(), target);
  }

  // repeated .GroupUserInfo users = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupInfo)
  return target;
}

size_t GroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GroupUserInfo users = 4;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes desc = 3;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupInfo)
    MergeFrom(*source);
  }
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GroupInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {
  return true;
}

void GroupInfo::InternalSwap(GroupInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddGroupRequest::InitAsDefaultInstance() {
}
class AddGroupRequest::_Internal {
 public:
};

AddGroupRequest::AddGroupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddGroupRequest)
}
AddGroupRequest::AddGroupRequest(const AddGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:AddGroupRequest)
}

void AddGroupRequest::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
}

AddGroupRequest::~AddGroupRequest() {
  // @@protoc_insertion_point(destructor:AddGroupRequest)
  SharedDtor();
}

void AddGroupRequest::SharedDtor() {
}

void AddGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddGroupRequest& AddGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddGroupRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void AddGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AddGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  _internal_metadata_.Clear();
}

const char* AddGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 group_id = 2;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddGroupRequest)
  return target;
}

size_t AddGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 group_id = 2;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddGroupRequest)
    MergeFrom(*source);
  }
}

void AddGroupRequest::MergeFrom(const AddGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void AddGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGroupRequest::CopyFrom(const AddGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupRequest::IsInitialized() const {
  return true;
}

void AddGroupRequest::InternalSwap(AddGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
  swap(group_id_, other->group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddGroupResponse::InitAsDefaultInstance() {
}
class AddGroupResponse::_Internal {
 public:
};

AddGroupResponse::AddGroupResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddGroupResponse)
}
AddGroupResponse::AddGroupResponse(const AddGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:AddGroupResponse)
}

void AddGroupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddGroupResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

AddGroupResponse::~AddGroupResponse() {
  // @@protoc_insertion_point(destructor:AddGroupResponse)
  SharedDtor();
}

void AddGroupResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddGroupResponse& AddGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddGroupResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void AddGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AddGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* AddGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AddGroupResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AddGroupResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddGroupResponse)
  return target;
}

size_t AddGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddGroupResponse)
    MergeFrom(*source);
  }
}

void AddGroupResponse::MergeFrom(const AddGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void AddGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGroupResponse::CopyFrom(const AddGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupResponse::IsInitialized() const {
  return true;
}

void AddGroupResponse::InternalSwap(AddGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateGroupRequest::InitAsDefaultInstance() {
}
class CreateGroupRequest::_Internal {
 public:
};

CreateGroupRequest::CreateGroupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateGroupRequest)
}
CreateGroupRequest::CreateGroupRequest(const CreateGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_name().empty()) {
    group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  group_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_desc().empty()) {
    group_desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.group_desc_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:CreateGroupRequest)
}

void CreateGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateGroupRequest_ProxyService_2eproto.base);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

CreateGroupRequest::~CreateGroupRequest() {
  // @@protoc_insertion_point(destructor:CreateGroupRequest)
  SharedDtor();
}

void CreateGroupRequest::SharedDtor() {
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateGroupRequest& CreateGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateGroupRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void CreateGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
  _internal_metadata_.Clear();
}

const char* CreateGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes group_desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_group_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // bytes group_name = 2;
  if (this->group_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_group_name(), target);
  }

  // bytes group_desc = 3;
  if (this->group_desc().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_group_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateGroupRequest)
  return target;
}

size_t CreateGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes group_name = 2;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_group_name());
  }

  // bytes group_desc = 3;
  if (this->group_desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_group_desc());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateGroupRequest)
    MergeFrom(*source);
  }
}

void CreateGroupRequest::MergeFrom(const CreateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_name().size() > 0) {

    group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  if (from.group_desc().size() > 0) {

    group_desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.group_desc_);
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void CreateGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupRequest::CopyFrom(const CreateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupRequest::IsInitialized() const {
  return true;
}

void CreateGroupRequest::InternalSwap(CreateGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  group_name_.Swap(&other->group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  group_desc_.Swap(&other->group_desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateGroupResponse::InitAsDefaultInstance() {
}
class CreateGroupResponse::_Internal {
 public:
};

CreateGroupResponse::CreateGroupResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateGroupResponse)
}
CreateGroupResponse::CreateGroupResponse(const CreateGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:CreateGroupResponse)
}

void CreateGroupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateGroupResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(group_id_));
}

CreateGroupResponse::~CreateGroupResponse() {
  // @@protoc_insertion_point(destructor:CreateGroupResponse)
  SharedDtor();
}

void CreateGroupResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateGroupResponse& CreateGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateGroupResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void CreateGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(group_id_));
  _internal_metadata_.Clear();
}

const char* CreateGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CreateGroupResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateGroupResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  // int32 group_id = 3;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateGroupResponse)
  return target;
}

size_t CreateGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  // int32 group_id = 3;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateGroupResponse)
    MergeFrom(*source);
  }
}

void CreateGroupResponse::MergeFrom(const CreateGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void CreateGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupResponse::CopyFrom(const CreateGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupResponse::IsInitialized() const {
  return true;
}

void CreateGroupResponse::InternalSwap(CreateGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
  swap(group_id_, other->group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuitGroupRequest::InitAsDefaultInstance() {
}
class QuitGroupRequest::_Internal {
 public:
};

QuitGroupRequest::QuitGroupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuitGroupRequest)
}
QuitGroupRequest::QuitGroupRequest(const QuitGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:QuitGroupRequest)
}

void QuitGroupRequest::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
}

QuitGroupRequest::~QuitGroupRequest() {
  // @@protoc_insertion_point(destructor:QuitGroupRequest)
  SharedDtor();
}

void QuitGroupRequest::SharedDtor() {
}

void QuitGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuitGroupRequest& QuitGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuitGroupRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void QuitGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:QuitGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  _internal_metadata_.Clear();
}

const char* QuitGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuitGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuitGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 group_id = 2;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuitGroupRequest)
  return target;
}

size_t QuitGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QuitGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 group_id = 2;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuitGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QuitGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuitGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QuitGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QuitGroupRequest)
    MergeFrom(*source);
  }
}

void QuitGroupRequest::MergeFrom(const QuitGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QuitGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void QuitGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QuitGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitGroupRequest::CopyFrom(const QuitGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QuitGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitGroupRequest::IsInitialized() const {
  return true;
}

void QuitGroupRequest::InternalSwap(QuitGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
  swap(group_id_, other->group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuitGroupResponse::InitAsDefaultInstance() {
}
class QuitGroupResponse::_Internal {
 public:
};

QuitGroupResponse::QuitGroupResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuitGroupResponse)
}
QuitGroupResponse::QuitGroupResponse(const QuitGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:QuitGroupResponse)
}

void QuitGroupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuitGroupResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

QuitGroupResponse::~QuitGroupResponse() {
  // @@protoc_insertion_point(destructor:QuitGroupResponse)
  SharedDtor();
}

void QuitGroupResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuitGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuitGroupResponse& QuitGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuitGroupResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void QuitGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:QuitGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* QuitGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QuitGroupResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuitGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuitGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QuitGroupResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuitGroupResponse)
  return target;
}

size_t QuitGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QuitGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuitGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QuitGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuitGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QuitGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QuitGroupResponse)
    MergeFrom(*source);
  }
}

void QuitGroupResponse::MergeFrom(const QuitGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QuitGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void QuitGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QuitGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitGroupResponse::CopyFrom(const QuitGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QuitGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitGroupResponse::IsInitialized() const {
  return true;
}

void QuitGroupResponse::InternalSwap(QuitGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGroupInfoRequest::InitAsDefaultInstance() {
}
class GetGroupInfoRequest::_Internal {
 public:
};

GetGroupInfoRequest::GetGroupInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetGroupInfoRequest)
}
GetGroupInfoRequest::GetGroupInfoRequest(const GetGroupInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:GetGroupInfoRequest)
}

void GetGroupInfoRequest::SharedCtor() {
  group_id_ = 0;
}

GetGroupInfoRequest::~GetGroupInfoRequest() {
  // @@protoc_insertion_point(destructor:GetGroupInfoRequest)
  SharedDtor();
}

void GetGroupInfoRequest::SharedDtor() {
}

void GetGroupInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGroupInfoRequest& GetGroupInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGroupInfoRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void GetGroupInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetGroupInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_ = 0;
  _internal_metadata_.Clear();
}

const char* GetGroupInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGroupInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetGroupInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group_id = 1;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetGroupInfoRequest)
  return target;
}

size_t GetGroupInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetGroupInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGroupInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetGroupInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGroupInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGroupInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetGroupInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetGroupInfoRequest)
    MergeFrom(*source);
  }
}

void GetGroupInfoRequest::MergeFrom(const GetGroupInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetGroupInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void GetGroupInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetGroupInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupInfoRequest::CopyFrom(const GetGroupInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetGroupInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupInfoRequest::IsInitialized() const {
  return true;
}

void GetGroupInfoRequest::InternalSwap(GetGroupInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(group_id_, other->group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGroupInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGroupInfoResponse::InitAsDefaultInstance() {
  ::_GetGroupInfoResponse_default_instance_._instance.get_mutable()->group_info_ = const_cast< ::GroupInfo*>(
      ::GroupInfo::internal_default_instance());
}
class GetGroupInfoResponse::_Internal {
 public:
  static const ::GroupInfo& group_info(const GetGroupInfoResponse* msg);
};

const ::GroupInfo&
GetGroupInfoResponse::_Internal::group_info(const GetGroupInfoResponse* msg) {
  return *msg->group_info_;
}
GetGroupInfoResponse::GetGroupInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetGroupInfoResponse)
}
GetGroupInfoResponse::GetGroupInfoResponse(const GetGroupInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from._internal_has_group_info()) {
    group_info_ = new ::GroupInfo(*from.group_info_);
  } else {
    group_info_ = nullptr;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:GetGroupInfoResponse)
}

void GetGroupInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGroupInfoResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&group_info_)) + sizeof(ret_code_));
}

GetGroupInfoResponse::~GetGroupInfoResponse() {
  // @@protoc_insertion_point(destructor:GetGroupInfoResponse)
  SharedDtor();
}

void GetGroupInfoResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete group_info_;
}

void GetGroupInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGroupInfoResponse& GetGroupInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGroupInfoResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void GetGroupInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetGroupInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && group_info_ != nullptr) {
    delete group_info_;
  }
  group_info_ = nullptr;
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* GetGroupInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetGroupInfoResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GroupInfo group_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGroupInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetGroupInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetGroupInfoResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  // .GroupInfo group_info = 3;
  if (this->has_group_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::group_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetGroupInfoResponse)
  return target;
}

size_t GetGroupInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetGroupInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // .GroupInfo group_info = 3;
  if (this->has_group_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_info_);
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGroupInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetGroupInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGroupInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGroupInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetGroupInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetGroupInfoResponse)
    MergeFrom(*source);
  }
}

void GetGroupInfoResponse::MergeFrom(const GetGroupInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetGroupInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.has_group_info()) {
    _internal_mutable_group_info()->::GroupInfo::MergeFrom(from._internal_group_info());
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void GetGroupInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetGroupInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupInfoResponse::CopyFrom(const GetGroupInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetGroupInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupInfoResponse::IsInitialized() const {
  return true;
}

void GetGroupInfoResponse::InternalSwap(GetGroupInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(group_info_, other->group_info_);
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGroupInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUserGroupsRequest::InitAsDefaultInstance() {
}
class GetUserGroupsRequest::_Internal {
 public:
};

GetUserGroupsRequest::GetUserGroupsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetUserGroupsRequest)
}
GetUserGroupsRequest::GetUserGroupsRequest(const GetUserGroupsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:GetUserGroupsRequest)
}

void GetUserGroupsRequest::SharedCtor() {
  user_id_ = 0;
}

GetUserGroupsRequest::~GetUserGroupsRequest() {
  // @@protoc_insertion_point(destructor:GetUserGroupsRequest)
  SharedDtor();
}

void GetUserGroupsRequest::SharedDtor() {
}

void GetUserGroupsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUserGroupsRequest& GetUserGroupsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUserGroupsRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void GetUserGroupsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetUserGroupsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = 0;
  _internal_metadata_.Clear();
}

const char* GetUserGroupsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserGroupsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetUserGroupsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetUserGroupsRequest)
  return target;
}

size_t GetUserGroupsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetUserGroupsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserGroupsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetUserGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserGroupsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUserGroupsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetUserGroupsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetUserGroupsRequest)
    MergeFrom(*source);
  }
}

void GetUserGroupsRequest::MergeFrom(const GetUserGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetUserGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void GetUserGroupsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetUserGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserGroupsRequest::CopyFrom(const GetUserGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetUserGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserGroupsRequest::IsInitialized() const {
  return true;
}

void GetUserGroupsRequest::InternalSwap(GetUserGroupsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserGroupsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUserGroupsResponse::InitAsDefaultInstance() {
}
class GetUserGroupsResponse::_Internal {
 public:
};

GetUserGroupsResponse::GetUserGroupsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetUserGroupsResponse)
}
GetUserGroupsResponse::GetUserGroupsResponse(const GetUserGroupsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:GetUserGroupsResponse)
}

void GetUserGroupsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUserGroupsResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

GetUserGroupsResponse::~GetUserGroupsResponse() {
  // @@protoc_insertion_point(destructor:GetUserGroupsResponse)
  SharedDtor();
}

void GetUserGroupsResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetUserGroupsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUserGroupsResponse& GetUserGroupsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUserGroupsResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void GetUserGroupsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetUserGroupsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* GetUserGroupsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetUserGroupsResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GroupInfo groups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserGroupsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetUserGroupsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetUserGroupsResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  // repeated .GroupInfo groups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetUserGroupsResponse)
  return target;
}

size_t GetUserGroupsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetUserGroupsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GroupInfo groups = 3;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserGroupsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetUserGroupsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserGroupsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUserGroupsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetUserGroupsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetUserGroupsResponse)
    MergeFrom(*source);
  }
}

void GetUserGroupsResponse::MergeFrom(const GetUserGroupsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetUserGroupsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void GetUserGroupsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetUserGroupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserGroupsResponse::CopyFrom(const GetUserGroupsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetUserGroupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserGroupsResponse::IsInitialized() const {
  return true;
}

void GetUserGroupsResponse::InternalSwap(GetUserGroupsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserGroupsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginRequest::InitAsDefaultInstance() {
}
class LoginRequest::_Internal {
 public:
};

LoginRequest::LoginRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_password().empty()) {
    user_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_password_);
  }
  auth_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_info().empty()) {
    auth_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_info_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginRequest_ProxyService_2eproto.base);
  user_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  user_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRequest& LoginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
  _internal_metadata_.Clear();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes user_password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes auth_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_auth_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // bytes user_password = 2;
  if (this->user_password().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_user_password(), target);
  }

  // bytes auth_info = 3;
  if (this->auth_info().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_auth_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes user_password = 2;
  if (this->user_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_password());
  }

  // bytes auth_info = 3;
  if (this->auth_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_auth_info());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_password().size() > 0) {

    user_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_password_);
  }
  if (from.auth_info().size() > 0) {

    auth_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_info_);
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void LoginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_password_.Swap(&other->user_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_info_.Swap(&other->auth_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginResponse::InitAsDefaultInstance() {
}
class LoginResponse::_Internal {
 public:
};

LoginResponse::LoginResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginResponse& LoginResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* LoginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LoginResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void LoginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterRequest::InitAsDefaultInstance() {
}
class RegisterRequest::_Internal {
 public:
};

RegisterRequest::RegisterRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  user_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_password().empty()) {
    user_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_password_);
  }
  // @@protoc_insertion_point(copy_constructor:RegisterRequest)
}

void RegisterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterRequest_ProxyService_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:RegisterRequest)
  SharedDtor();
}

void RegisterRequest::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterRequest& RegisterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RegisterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes user_password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user_name = 1;
  if (this->user_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  // bytes user_password = 2;
  if (this->user_password().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_user_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_name());
  }

  // bytes user_password = 2;
  if (this->user_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterRequest)
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.user_password().size() > 0) {

    user_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_password_);
  }
}

void RegisterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  return true;
}

void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_password_.Swap(&other->user_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterResponse::InitAsDefaultInstance() {
}
class RegisterResponse::_Internal {
 public:
};

RegisterResponse::RegisterResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterResponse)
}
RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:RegisterResponse)
}

void RegisterResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(user_id_));
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:RegisterResponse)
  SharedDtor();
}

void RegisterResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterResponse& RegisterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

const char* RegisterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  // int32 user_id = 3;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterResponse)
  return target;
}

size_t RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  // int32 user_id = 3;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterResponse)
    MergeFrom(*source);
  }
}

void RegisterResponse::MergeFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void RegisterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {
  return true;
}

void RegisterResponse::InternalSwap(RegisterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogoutRequest::InitAsDefaultInstance() {
}
class LogoutRequest::_Internal {
 public:
};

LogoutRequest::LogoutRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogoutRequest)
}
LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:LogoutRequest)
}

void LogoutRequest::SharedCtor() {
  user_id_ = 0;
}

LogoutRequest::~LogoutRequest() {
  // @@protoc_insertion_point(destructor:LogoutRequest)
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
}

void LogoutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoutRequest& LogoutRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogoutRequest_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void LogoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LogoutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = 0;
  _internal_metadata_.Clear();
}

const char* LogoutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogoutRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogoutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogoutRequest)
  return target;
}

size_t LogoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogoutRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogoutRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogoutRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogoutRequest)
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void LogoutRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {
  return true;
}

void LogoutRequest::InternalSwap(LogoutRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogoutResponse::InitAsDefaultInstance() {
}
class LogoutResponse::_Internal {
 public:
};

LogoutResponse::LogoutResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogoutResponse)
}
LogoutResponse::LogoutResponse(const LogoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:LogoutResponse)
}

void LogoutResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogoutResponse_ProxyService_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

LogoutResponse::~LogoutResponse() {
  // @@protoc_insertion_point(destructor:LogoutResponse)
  SharedDtor();
}

void LogoutResponse::SharedDtor() {
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogoutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoutResponse& LogoutResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogoutResponse_ProxyService_2eproto.base);
  return *internal_default_instance();
}


void LogoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LogoutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* LogoutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LogoutResponse.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogoutResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogoutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogoutResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogoutResponse)
  return target;
}

size_t LogoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogoutResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogoutResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogoutResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogoutResponse)
    MergeFrom(*source);
  }
}

void LogoutResponse::MergeFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {

    res_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_info_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void LogoutResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutResponse::CopyFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResponse::IsInitialized() const {
  return true;
}

void LogoutResponse::InternalSwap(LogoutResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ChatServiceRpc::~ChatServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ChatServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProxyService_2eproto);
  return file_level_service_descriptors_ProxyService_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ChatServiceRpc::GetDescriptor() {
  return descriptor();
}

void ChatServiceRpc::OneChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::OneChatRequest*,
                         ::OneChatResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OneChat() not implemented.");
  done->Run();
}

void ChatServiceRpc::GroupChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::GroupChatRequest*,
                         ::GroupChatResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GroupChat() not implemented.");
  done->Run();
}

void ChatServiceRpc::ReadOfflineMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ReadOfflineMessageRequest*,
                         ::ReadOfflineMessageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReadOfflineMessage() not implemented.");
  done->Run();
}

void ChatServiceRpc::SaveOfflineMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SaveOfflineMessageRequest*,
                         ::SaveOfflineMessageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SaveOfflineMessage() not implemented.");
  done->Run();
}

void ChatServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_ProxyService_2eproto[0]);
  switch(method->index()) {
    case 0:
      OneChat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::OneChatRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::OneChatResponse*>(
                 response),
             done);
      break;
    case 1:
      GroupChat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::GroupChatRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::GroupChatResponse*>(
                 response),
             done);
      break;
    case 2:
      ReadOfflineMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ReadOfflineMessageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ReadOfflineMessageResponse*>(
                 response),
             done);
      break;
    case 3:
      SaveOfflineMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SaveOfflineMessageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SaveOfflineMessageResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ChatServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::OneChatRequest::default_instance();
    case 1:
      return ::GroupChatRequest::default_instance();
    case 2:
      return ::ReadOfflineMessageRequest::default_instance();
    case 3:
      return ::SaveOfflineMessageRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ChatServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::OneChatResponse::default_instance();
    case 1:
      return ::GroupChatResponse::default_instance();
    case 2:
      return ::ReadOfflineMessageResponse::default_instance();
    case 3:
      return ::SaveOfflineMessageResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ChatServiceRpc_Stub::ChatServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChatServiceRpc_Stub::ChatServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ChatServiceRpc_Stub::~ChatServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void ChatServiceRpc_Stub::OneChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::OneChatRequest* request,
                              ::OneChatResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ChatServiceRpc_Stub::GroupChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::GroupChatRequest* request,
                              ::GroupChatResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ChatServiceRpc_Stub::ReadOfflineMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ReadOfflineMessageRequest* request,
                              ::ReadOfflineMessageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ChatServiceRpc_Stub::SaveOfflineMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SaveOfflineMessageRequest* request,
                              ::SaveOfflineMessageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
// ===================================================================

FriendServiceRpc::~FriendServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FriendServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProxyService_2eproto);
  return file_level_service_descriptors_ProxyService_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FriendServiceRpc::GetDescriptor() {
  return descriptor();
}

void FriendServiceRpc::GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::FriendListRequest*,
                         ::FriendListResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriendList() not implemented.");
  done->Run();
}

void FriendServiceRpc::GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::UserInfoRequest*,
                         ::UserInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserInfo() not implemented.");
  done->Run();
}

void FriendServiceRpc::AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::AddFriendRequest*,
                         ::AddFriendResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddFriend() not implemented.");
  done->Run();
}

void FriendServiceRpc::DeleteFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DeleteFriendRequest*,
                         ::DeleteFriendResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteFriend() not implemented.");
  done->Run();
}

void FriendServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_ProxyService_2eproto[1]);
  switch(method->index()) {
    case 0:
      GetFriendList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::FriendListRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::FriendListResponse*>(
                 response),
             done);
      break;
    case 1:
      GetUserInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::UserInfoRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::UserInfoResponse*>(
                 response),
             done);
      break;
    case 2:
      AddFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::AddFriendRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::AddFriendResponse*>(
                 response),
             done);
      break;
    case 3:
      DeleteFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DeleteFriendRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DeleteFriendResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FriendServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::FriendListRequest::default_instance();
    case 1:
      return ::UserInfoRequest::default_instance();
    case 2:
      return ::AddFriendRequest::default_instance();
    case 3:
      return ::DeleteFriendRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FriendServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::FriendListResponse::default_instance();
    case 1:
      return ::UserInfoResponse::default_instance();
    case 2:
      return ::AddFriendResponse::default_instance();
    case 3:
      return ::DeleteFriendResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FriendServiceRpc_Stub::FriendServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendServiceRpc_Stub::FriendServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
FriendServiceRpc_Stub::~FriendServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendServiceRpc_Stub::GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::FriendListRequest* request,
                              ::FriendListResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FriendServiceRpc_Stub::GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::UserInfoRequest* request,
                              ::UserInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FriendServiceRpc_Stub::AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::AddFriendRequest* request,
                              ::AddFriendResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FriendServiceRpc_Stub::DeleteFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DeleteFriendRequest* request,
                              ::DeleteFriendResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
// ===================================================================

GroupServiceRpc::~GroupServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GroupServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProxyService_2eproto);
  return file_level_service_descriptors_ProxyService_2eproto[2];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GroupServiceRpc::GetDescriptor() {
  return descriptor();
}

void GroupServiceRpc::AddGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::AddGroupRequest*,
                         ::AddGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddGroup() not implemented.");
  done->Run();
}

void GroupServiceRpc::CreateGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CreateGroupRequest*,
                         ::CreateGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateGroup() not implemented.");
  done->Run();
}

void GroupServiceRpc::QuitGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::QuitGroupRequest*,
                         ::QuitGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QuitGroup() not implemented.");
  done->Run();
}

void GroupServiceRpc::GetGroupInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::GetGroupInfoRequest*,
                         ::GetGroupInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGroupInfo() not implemented.");
  done->Run();
}

void GroupServiceRpc::GetUserGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::GetUserGroupsRequest*,
                         ::GetUserGroupsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserGroups() not implemented.");
  done->Run();
}

void GroupServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_ProxyService_2eproto[2]);
  switch(method->index()) {
    case 0:
      AddGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::AddGroupRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::AddGroupResponse*>(
                 response),
             done);
      break;
    case 1:
      CreateGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CreateGroupRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CreateGroupResponse*>(
                 response),
             done);
      break;
    case 2:
      QuitGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::QuitGroupRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::QuitGroupResponse*>(
                 response),
             done);
      break;
    case 3:
      GetGroupInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::GetGroupInfoRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::GetGroupInfoResponse*>(
                 response),
             done);
      break;
    case 4:
      GetUserGroups(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::GetUserGroupsRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::GetUserGroupsResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GroupServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::AddGroupRequest::default_instance();
    case 1:
      return ::CreateGroupRequest::default_instance();
    case 2:
      return ::QuitGroupRequest::default_instance();
    case 3:
      return ::GetGroupInfoRequest::default_instance();
    case 4:
      return ::GetUserGroupsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GroupServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::AddGroupResponse::default_instance();
    case 1:
      return ::CreateGroupResponse::default_instance();
    case 2:
      return ::QuitGroupResponse::default_instance();
    case 3:
      return ::GetGroupInfoResponse::default_instance();
    case 4:
      return ::GetUserGroupsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GroupServiceRpc_Stub::GroupServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GroupServiceRpc_Stub::GroupServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GroupServiceRpc_Stub::~GroupServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void GroupServiceRpc_Stub::AddGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::AddGroupRequest* request,
                              ::AddGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GroupServiceRpc_Stub::CreateGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CreateGroupRequest* request,
                              ::CreateGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GroupServiceRpc_Stub::QuitGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::QuitGroupRequest* request,
                              ::QuitGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void GroupServiceRpc_Stub::GetGroupInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::GetGroupInfoRequest* request,
                              ::GetGroupInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void GroupServiceRpc_Stub::GetUserGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::GetUserGroupsRequest* request,
                              ::GetUserGroupsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
// ===================================================================

UserServiceRpc::~UserServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProxyService_2eproto);
  return file_level_service_descriptors_ProxyService_2eproto[3];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserServiceRpc::GetDescriptor() {
  return descriptor();
}

void UserServiceRpc::Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::LoginRequest*,
                         ::LoginResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Login() not implemented.");
  done->Run();
}

void UserServiceRpc::Register(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::RegisterRequest*,
                         ::RegisterResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Register() not implemented.");
  done->Run();
}

void UserServiceRpc::Logout(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::LogoutRequest*,
                         ::LogoutResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Logout() not implemented.");
  done->Run();
}

void UserServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_ProxyService_2eproto[3]);
  switch(method->index()) {
    case 0:
      Login(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::LoginRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::LoginResponse*>(
                 response),
             done);
      break;
    case 1:
      Register(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::RegisterRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::RegisterResponse*>(
                 response),
             done);
      break;
    case 2:
      Logout(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::LogoutRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::LogoutResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::LoginRequest::default_instance();
    case 1:
      return ::RegisterRequest::default_instance();
    case 2:
      return ::LogoutRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::LoginResponse::default_instance();
    case 1:
      return ::RegisterResponse::default_instance();
    case 2:
      return ::LogoutResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

UserServiceRpc_Stub::UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UserServiceRpc_Stub::UserServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
UserServiceRpc_Stub::~UserServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void UserServiceRpc_Stub::Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::LoginRequest* request,
                              ::LoginResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UserServiceRpc_Stub::Register(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::RegisterRequest* request,
                              ::RegisterResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void UserServiceRpc_Stub::Logout(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::LogoutRequest* request,
                              ::LogoutResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::OneChatRequest* Arena::CreateMaybeMessage< ::OneChatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::OneChatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::OneChatResponse* Arena::CreateMaybeMessage< ::OneChatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::OneChatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupChatRequest* Arena::CreateMaybeMessage< ::GroupChatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GroupChatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupChatResponse* Arena::CreateMaybeMessage< ::GroupChatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GroupChatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ReadOfflineMessageRequest* Arena::CreateMaybeMessage< ::ReadOfflineMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ReadOfflineMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ReadOfflineMessageResponse* Arena::CreateMaybeMessage< ::ReadOfflineMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ReadOfflineMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SaveOfflineMessageRequest* Arena::CreateMaybeMessage< ::SaveOfflineMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SaveOfflineMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SaveOfflineMessageResponse* Arena::CreateMaybeMessage< ::SaveOfflineMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SaveOfflineMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::UserInfo* Arena::CreateMaybeMessage< ::UserInfo >(Arena* arena) {
  return Arena::CreateInternal< ::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::UserInfoRequest* Arena::CreateMaybeMessage< ::UserInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UserInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UserInfoResponse* Arena::CreateMaybeMessage< ::UserInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::UserInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FriendListRequest* Arena::CreateMaybeMessage< ::FriendListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::FriendListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FriendListResponse* Arena::CreateMaybeMessage< ::FriendListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::FriendListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AddFriendRequest* Arena::CreateMaybeMessage< ::AddFriendRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AddFriendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AddFriendResponse* Arena::CreateMaybeMessage< ::AddFriendResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AddFriendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DeleteFriendRequest* Arena::CreateMaybeMessage< ::DeleteFriendRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DeleteFriendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DeleteFriendResponse* Arena::CreateMaybeMessage< ::DeleteFriendResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DeleteFriendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupUserInfo* Arena::CreateMaybeMessage< ::GroupUserInfo >(Arena* arena) {
  return Arena::CreateInternal< ::GroupUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupInfo* Arena::CreateMaybeMessage< ::GroupInfo >(Arena* arena) {
  return Arena::CreateInternal< ::GroupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AddGroupRequest* Arena::CreateMaybeMessage< ::AddGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AddGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AddGroupResponse* Arena::CreateMaybeMessage< ::AddGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AddGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateGroupRequest* Arena::CreateMaybeMessage< ::CreateGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::CreateGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateGroupResponse* Arena::CreateMaybeMessage< ::CreateGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CreateGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::QuitGroupRequest* Arena::CreateMaybeMessage< ::QuitGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::QuitGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::QuitGroupResponse* Arena::CreateMaybeMessage< ::QuitGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::QuitGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GetGroupInfoRequest* Arena::CreateMaybeMessage< ::GetGroupInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GetGroupInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetGroupInfoResponse* Arena::CreateMaybeMessage< ::GetGroupInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GetGroupInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GetUserGroupsRequest* Arena::CreateMaybeMessage< ::GetUserGroupsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GetUserGroupsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetUserGroupsResponse* Arena::CreateMaybeMessage< ::GetUserGroupsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GetUserGroupsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginRequest* Arena::CreateMaybeMessage< ::LoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginResponse* Arena::CreateMaybeMessage< ::LoginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::LoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterRequest* Arena::CreateMaybeMessage< ::RegisterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterResponse* Arena::CreateMaybeMessage< ::RegisterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LogoutRequest* Arena::CreateMaybeMessage< ::LogoutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::LogoutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LogoutResponse* Arena::CreateMaybeMessage< ::LogoutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::LogoutResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
