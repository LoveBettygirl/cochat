/*************************************************************
 * register.cpp
 * Generated by corpc framework corpc_gen.py
 * Create Time: 2022-12-17 11:24:33
 * This file will not be overwrite althrough protobuf file changed !!!
 * Just write this file while not exist
*************************************************************/

#include <corpc/common/log.h>
#include "UserService/interface/register.h"
#include "UserService/pb/UserService.pb.h"
#include "UserService/dao/user_dao.h"
#include "UserService/common/business_exception.h"
#include "UserService/common/error_code.h"
#include "UserService/utils/random_string.h"


namespace UserService {

RegisterInterface::RegisterInterface(const ::RegisterRequest &request, ::RegisterResponse &response)
    : request_(request), 
    response_(response)
{

}

RegisterInterface::~RegisterInterface()
{

}

void RegisterInterface::run()
{
    //
    // Run your business at here
    // response_.set_ret_code(0);
    // response_.set_res_info("Succ");
    //
    std::string name = request_.user_name();
    std::string pwd = request_.user_password();

    if (name.empty()) {
        throw BusinessException(USER_NAME_IS_EMPTY, getErrorMsg(USER_NAME_IS_EMPTY), __FILE__, __LINE__);
    }
    if (pwd.empty()) {
        throw BusinessException(USER_PWD_IS_EMPTY, getErrorMsg(USER_PWD_IS_EMPTY), __FILE__, __LINE__);
    }

    std::string salt = randomString(32), reverseSalt = salt;
    std::reverse(reverseSalt.begin(), reverseSalt.end());
    std::string newPwd = pwd + reverseSalt;
    corpc::MD5 md5;
    newPwd = md5.getResultString(newPwd);

    User user;
    user.setName(name);
    user.setPwd(newPwd);
    user.setSalt(salt);
    UserDao dao;
    if (dao.insertUser(user)) {
        // 注册成功
        response_.set_user_id(user.getId());
    }
    else {
        // 注册失败
        throw BusinessException(USER_IS_REGISTERED, getErrorMsg(USER_IS_REGISTERED), __FILE__, __LINE__);
    }
}

}